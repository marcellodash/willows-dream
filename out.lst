0001   0000             ; eXtended Genesis Music (XGM) Z80 driver - Stéphane Dallongeville @2014-2016
0002   0000             ;
0003   0000             ; XGM is a music format dedicated to the Sega Megadrive/Genesis system.
0004   0000             ; It has been designed to minimize CPU decoding resource and keep reasonable data size (should be smaller than VGM file).
0005   0000             ; It supports both FM and PSG chip and allow up to 4 PCM channels (8 bits signed at 14 Khz) to be played at once.
0006   0000             ; These 4 PCM channels are obtained by software mixing in the FM DAC in replacement of the 6th FM channel (so at best you can have 5FM + 4PCM + 4PSG = 13 channels)
0007   0000             ;
0008   0000             ; The driver supports playing SFX in PCM format with 16 priority levels.
0009   0000             ; PCM samples can be >32KB but with the restriction of having their address and size aligned on 256 bytes.
0010   0000             ;
0011   0000             ; we have to do 254 cycles per sample output which consist of :
0012   0000             ; - bufferize 4 PCM samples from the rom and mix them in write buffer
0013   0000             ; - read 1 sample from read buffer and output it to the DAC
0014   0000             ; - handle loop
0015   0000             ; - bufferize XGM data / parse and apply XGM command / handle extern command
0016   0000             ;
0017   0000             ; register usage :
0018   0000             ; HL  = sample source (in ROM)
0019   0000             ; DE  = write buffer / XGM buffer
0020   0000             ; BC  = counter
0021   0000             ; B = $80 (used for overflow and sample unsign)
0022   0000             ; IYH = temp value
0023   0000             ; HL' = YMPORT1
0024   0000             ; BC' = read buffer
0025   0000             
0026   0000             ; ###########################      define      ##############################
0027   0000             
0028   0000                         INCLUDE "z80_def.i80"   ; basic definitions
0001+  0000             ; ############################ define ##############################
0002+  0000             
0003+  0000             YMPORT0     EQU     $4000           ; YM2612 port 0
0004+  0000             YMPORT1     EQU     $4001           ; YM2612 port 1
0005+  0000             YMPORT2     EQU     $4002           ; YM2612 port 2
0006+  0000             YMPORT3     EQU     $4003           ; YM2612 port 3
0007+  0000             VDPSTATUS_H EQU     $7F04           ; VDP status port high
0008+  0000             VDPSTATUS_L EQU     $7F05           ; VDP status port low
0009+  0000             VCOUNTER    EQU     $7F08           ; V counter
0010+  0000             HCOUNTER    EQU     $7F09           ; H counter
0011+  0000             PSGPORT     EQU     $7F11           ; PSG port
0012+  0000             BANKREG     EQU     $6000           ; bank register
0013+  0000             
0014+  0000             COMPLAY_SFT EQU     0               ; start play command
0015+  0000             COMSTOP_SFT EQU     4               ; stop play command
0016+  0000             
0017+  0000             STATPLAY_SFT  EQU   0               ; playing status
0018+  0000             STATREADY_SFT EQU   7               ; driver ready status
0019+  0000             
0020+  0000             CH0_SFT     EQU     0               ; channel 0
0021+  0000             CH1_SFT     EQU     1               ; channel 1
0022+  0000             CH2_SFT     EQU     2               ; channel 2
0023+  0000             CH3_SFT     EQU     3               ; channel 3
0024+  0000             
0025+  0000             COMPLAY     EQU     1<<COMPLAY_SFT
0026+  0000             COMSTOP     EQU     1<<COMSTOP_SFT
0027+  0000             
0028+  0000             STATPLAY    EQU     1<<STATPLAY_SFT
0029+  0000             STATREADY   EQU     1<<STATREADY_SFT
0030+  0000             
0031+  0000             CH0         EQU     1<<CH0_SFT
0032+  0000             CH1         EQU     1<<CH1_SFT
0033+  0000             CH2         EQU     1<<CH2_SFT
0034+  0000             CH3         EQU     1<<CH3_SFT
0035+  0000             
0036+  0000             
0037+  0000             ; ########################### variable #############################
0038+  0000             
0039+  0000             COMMAND     EQU     $0100           ; command from 68K
0040+  0000             STATUS      EQU     $0102           ; status from Z80
0041+  0000             PARAMS      EQU     $0104           ; parameters (68K and Z80)
0029   0000             
0030   0000             
0031   0000             ; ###########################       var        ##############################
0032   0000             
0033   0000             XGM_PLAY_SFT    EQU     6           ; XGM music play command bit
0034   0000             XGM_RESUME_SFT  EQU     5           ; XGM music resume command bit
0035   0000             XGM_PAUSE_SFT   EQU     4           ; XGM music pause command bit
0036   0000             
0037   0000                                                 ; COMMAND b0 = play PCM0   STATUS b0 = PCM0 playing
0038   0000                                                 ; COMMAND b1 = play PCM1   STATUS b1 = PCM1 playing
0039   0000                                                 ; COMMAND b2 = play PCM2   STATUS b2 = PCM2 playing
0040   0000                                                 ; COMMAND b3 = play PCM3   STATUS b3 = PCM3 playing
0041   0000                                                 ; COMMAND b4 = stop XGM
0042   0000                                                 ; COMMAND b5 = resume XGM
0043   0000                                                 ; COMMAND b6 = play XGM    STATUS b6 = XGM playing
0044   0000             
0045   0000             XGM_ARG_A   EQU     PARAMS+$00      ; XGM address (bit 0 --> bit 23)
0046   0000             
0047   0000             PCM0_ARG_P  EQU     PARAMS+$04      ; priority (0 to 15)
0048   0000             PCM0_ARG_ID EQU     PARAMS+$05      ; PCM id (0 to 255)
0049   0000             PCM1_ARG_P  EQU     PARAMS+$06      ; priority (0 to 15)
0050   0000             PCM1_ARG_ID EQU     PARAMS+$07      ; PCM id (0 to 255)
0051   0000             PCM2_ARG_P  EQU     PARAMS+$08      ; priority (0 to 15)
0052   0000             PCM2_ARG_ID EQU     PARAMS+$09      ; PCM id (0 to 255)
0053   0000             PCM3_ARG_P  EQU     PARAMS+$0A      ; priority (0 to 15)
0054   0000             PCM3_ARG_ID EQU     PARAMS+$0B      ; PCM id (0 to 255)
0055   0000             
0056   0000             PCM_ARG_P   EQU     PCM0_ARG_P
0057   0000             PCM_ARG_ID  EQU     PCM0_ARG_ID
0058   0000             
0059   0000             LOOP_ARG    EQU     PARAMS+$0C      ; number of loop (0 = 255 loop)
0060   0000             PROTECT_ARG EQU     PARAMS+$0D      ; set to 1 from 68k during DMA (in vblank period)
0061   0000                                                 ; to prevent Z80 accessing 68k BUS
0062   0000             
0063   0000             MODIFYING_F EQU     PARAMS+$0E      ; Z80 is modifying the 'PENDING_FRM' variable
0064   0000             PENDING_FRM EQU     PARAMS+$0F      ; contains number of XGM frame to process
0065   0000             
0066   0000             PCM0_PRIO   EQU     PARAMS+$10      ; PCM0 internal priority
0067   0000             PCM0_ADDR   EQU     PARAMS+$12      ; PCM0 internal addr (bit8 --> bit23)
0068   0000             PCM0_LEN    EQU     PARAMS+$14      ; PCM0 internal len (bit8 --> bit23)
0069   0000             PCM1_PRIO   EQU     PARAMS+$18      ; PCM1 internal priority
0070   0000             PCM1_ADDR   EQU     PARAMS+$1A      ; PCM1 internal addr (bit8 --> bit23)
0071   0000             PCM1_LEN    EQU     PARAMS+$1C      ; PCM1 internal len (bit8 --> bit23)
0072   0000             PCM2_PRIO   EQU     PARAMS+$20      ; PCM2 internal priority
0073   0000             PCM2_ADDR   EQU     PARAMS+$22      ; PCM2 internal addr (bit8 --> bit23)
0074   0000             PCM2_LEN    EQU     PARAMS+$24      ; PCM2 internal len (bit8 --> bit23)
0075   0000             PCM3_PRIO   EQU     PARAMS+$28      ; PCM3 internal priority
0076   0000             PCM3_ADDR   EQU     PARAMS+$2A      ; PCM3 internal addr (bit8 --> bit23)
0077   0000             PCM3_LEN    EQU     PARAMS+$2C      ; PCM3 internal len (bit8 --> bit23)
0078   0000             
0079   0000             PCM_PRIO    EQU     PCM0_PRIO
0080   0000             PCM_ADDR    EQU     PCM0_ADDR
0081   0000             PCM_LEN     EQU     PCM0_LEN
0082   0000             
0083   0000             XGM_ADDR    EQU     PARAMS+$30      ; XGM internal addr (bit0 --> bit23)
0084   0000             
0085   0000             WRITEBUF    EQU     PARAMS+$34      ; PCM write buffer pointer (bit8 --> bit9)
0086   0000             READBUF     EQU     PARAMS+$36      ; PCM read buffer pointer (bit8 --> bit9)
0087   0000             
0088   0000             REM_LOOP    EQU     PARAMS+$38      ; remaining loop (0 = 255)
0089   0000             
0090   0000             YM_RR_SAV   EQU     PARAMS+$40      ; YM RR save (4 slots * 6 channels)
0091   0000             PSG_ENV_SAV EQU     PARAMS+$58      ; PSG env save (4 channels)
0092   0000             YM_RR_OFF   EQU     PARAMS+$60      ; YM RR off (4 slots * 6 channels)
0093   0000             PSG_ENV_OFF EQU     PARAMS+$78      ; PSG env off (4 channels)
0094   0000             
0095   0000             YM_2B_SAV   EQU     PARAMS+$5C      ; YM register $2B last write save
0096   0000             YM_2B_CNT   EQU     PARAMS+$5D      ; YM register $2B ON expiration
0097   0000             
0098   0000             IDLE_LOOP   EQU     PARAMS+$7C      ; idle loop counter (XGM frame wait)
0099   0000             WAIT_LOOP   EQU     PARAMS+$7E      ; wait loop counter (DMA contention wait)
0100   0000             
0101   0000             DEBUG_1     EQU     PARAMS+$80      ; debug
0102   0000             DEBUG_2     EQU     PARAMS+$81      ; debug
0103   0000             DEBUG_3     EQU     PARAMS+$82      ; debug
0104   0000             DEBUG_4     EQU     PARAMS+$83      ; debug
0105   0000             DEBUG_5     EQU     PARAMS+$84      ; debug
0106   0000             DEBUG_6     EQU     PARAMS+$85      ; debug
0107   0000             DEBUG_7     EQU     PARAMS+$86      ; debug
0108   0000             DEBUG_8     EQU     PARAMS+$87      ; debug
0109   0000             DEBUG_9     EQU     PARAMS+$88      ; debug
0110   0000             DEBUG_A     EQU     PARAMS+$89      ; debug
0111   0000             DEBUG_B     EQU     PARAMS+$8A      ; debug
0112   0000             
0113   0000             ELAPSED     EQU     PARAMS+$90      ; elapsed frame since beginning of music (in frames), encoded on 24 bit
0114   0000             
0115   0000             JUMP_TABLE  EQU     $1600           ; XGM command jump table (size = $100)
0116   0000             XGM_BUFFER  EQU     $1700           ; XGM music data buffer (size = $100)
0117   0000             
0118   0000             PCM_BUFFER0 EQU     $1800           ; PCM buffer 0
0119   0000             PCM_BUFFER1 EQU     $1900           ; PCM buffer 1
0120   0000             PCM_BUFFER2 EQU     $1A00           ; PCM buffer 2
0121   0000             PCM_BUFFER3 EQU     $1B00           ; PCM buffer 3
0122   0000             
0123   0000             PCM_BUFFER  EQU     PCM_BUFFER0     ; PCM buffer
0124   0000             
0125   0000             
0126   0000             ID_TABLE    EQU     $1C00           ; sample id table (size = $400)
0127   0000             
0128   0000             STACK       EQU     JUMP_TABLE      ; stack pointer above buffer region ($1600 --> $15XX)
0129   0000             
0130   0000             
0131   0000             ; ###########################      macro       ##############################
0132   0000             
0133   0000                         INCLUDE "z80_mac.i80"  ; basic macros
0001+  0000             ; ############################     macro     ##############################
0002+  0000             
0003+  0000             
0004+  0000             ; setBank
0005+  0000             ; -------
0006+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0007+  0000             ; HL  <-  BANKREG
0008+  0000             ;
0009+  0000             ; set the bank register for ROM area
0010+  0000             ; = 101 cycles
0011+  0000             
0012+  0000                         macro   setBank
0013+  0000~            
0014+  0000~                        LD  HL, BANKREG         ; HL = BANKREG              ' 10
0015+  0000~                        LD  (HL), A             ; #1 (bit 15)               ' 7
0016+  0000~                        RRA                     ;                           ' 4
0017+  0000~                        LD  (HL), A             ; #2 (bit 16)               ' 7
0018+  0000~                        RRA                     ;                           ' 4
0019+  0000~                        LD  (HL), A             ; #3 (bit 17)               ' 7
0020+  0000~                        RRA                     ;                           ' 4
0021+  0000~                        LD  (HL), A             ; #4 (bit 18)               ' 7
0022+  0000~                        RRA                     ;                           ' 4
0023+  0000~                        LD  (HL), A             ; #5 (bit 19)               ' 7
0024+  0000~                        RRA                     ;                           ' 4
0025+  0000~                        LD  (HL), A             ; #6 (bit 20)               ' 7
0026+  0000~                        RRA                     ;                           ' 4
0027+  0000~                        LD  (HL), A             ; #7 (bit 21)               ' 7
0028+  0000~                        RRA                     ;                           ' 4
0029+  0000~                        LD  (HL), A             ; #8 (bit 22)               ' 7
0030+  0000~                        LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
0031+  0000~            
0032+  0000                         endm                    ;                           ' 101
0033+  0000             
0034+  0000             
0035+  0000             ; setBankFast
0036+  0000             ; -----------
0037+  0000             ; A    -> bit 21-15 of rom address to set in the bank register
0038+  0000             ; HL  <-  BANKREG
0039+  0000             ;
0040+  0000             ; set the bank register for ROM area
0041+  0000             ; = 97 cycles
0042+  0000             
0043+  0000                         macro   setBankFast
0044+  0000~            
0045+  0000~                        LD  HL, BANKREG         ; HL = BANKREG              ' 10
0046+  0000~                        LD  (HL), A             ; #1 (bit 15)               ' 7
0047+  0000~                        RRA                     ;                           ' 4
0048+  0000~                        LD  (HL), A             ; #2 (bit 16)               ' 7
0049+  0000~                        RRA                     ;                           ' 4
0050+  0000~                        LD  (HL), A             ; #3 (bit 17)               ' 7
0051+  0000~                        RRA                     ;                           ' 4
0052+  0000~                        LD  (HL), A             ; #4 (bit 18)               ' 7
0053+  0000~                        RRA                     ;                           ' 4
0054+  0000~                        LD  (HL), A             ; #5 (bit 19)               ' 7
0055+  0000~                        RRA                     ;                           ' 4
0056+  0000~                        LD  (HL), A             ; #6 (bit 20)               ' 7
0057+  0000~                        RRA                     ;                           ' 4
0058+  0000~                        LD  (HL), A             ; #7 (bit 21)               ' 7
0059+  0000~                        LD  (HL), L             ; #8 (bit 22 = 0)           ' 7
0060+  0000~                        LD  (HL), L             ; #9 (bit 23 = 0)           ' 7
0061+  0000~            
0062+  0000                         endm                    ;                           ' 97
0063+  0000             
0064+  0000             
0065+  0000             ; setBank_BC
0066+  0000             ; ----------
0067+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0068+  0000             ; BC  <-  BANKREG
0069+  0000             ; A   <-  0
0070+  0000             ;
0071+  0000             ; set the bank register for ROM area
0072+  0000             ; = 105 cycles
0073+  0000             
0074+  0000                         macro   setBank_BC
0075+  0000~            
0076+  0000~                        LD  BC, BANKREG         ; BC = BANKREG              ' 10
0077+  0000~                        LD  (BC), A             ; #1 (bit 15)               ' 7
0078+  0000~                        RRA                     ;                           ' 4
0079+  0000~                        LD  (BC), A             ; #2 (bit 16)               ' 7
0080+  0000~                        RRA                     ;                           ' 4
0081+  0000~                        LD  (BC), A             ; #3 (bit 17)               ' 7
0082+  0000~                        RRA                     ;                           ' 4
0083+  0000~                        LD  (BC), A             ; #4 (bit 18)               ' 7
0084+  0000~                        RRA                     ;                           ' 4
0085+  0000~                        LD  (BC), A             ; #5 (bit 19)               ' 7
0086+  0000~                        RRA                     ;                           ' 4
0087+  0000~                        LD  (BC), A             ; #6 (bit 20)               ' 7
0088+  0000~                        RRA                     ;                           ' 4
0089+  0000~                        LD  (BC), A             ; #7 (bit 21)               ' 7
0090+  0000~                        RRA                     ;                           ' 4
0091+  0000~                        LD  (BC), A             ; #8 (bit 22)               ' 7
0092+  0000~                        RRA                     ;                           ' 4
0093+  0000~                        LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0094+  0000~            
0095+  0000                         endm                    ;                           ' 105
0096+  0000             
0097+  0000             
0098+  0000             ; setBank_DE
0099+  0000             ; ----------
0100+  0000             ; A    -> bit 22-15 of rom address to set in the bank register
0101+  0000             ; DE  <-  BANKREG
0102+  0000             ; A   <-  0
0103+  0000             ;
0104+  0000             ; set the bank register for ROM area
0105+  0000             ; = 105 cycles
0106+  0000             
0107+  0000                         macro   setBank_DE
0108+  0000~            
0109+  0000~                        LD  DE, BANKREG         ; DE = BANKREG              ' 10
0110+  0000~                        LD  (DE), A             ; #1 (bit 15)               ' 7
0111+  0000~                        RRA                     ;                           ' 4
0112+  0000~                        LD  (DE), A             ; #2 (bit 16)               ' 7
0113+  0000~                        RRA                     ;                           ' 4
0114+  0000~                        LD  (DE), A             ; #3 (bit 17)               ' 7
0115+  0000~                        RRA                     ;                           ' 4
0116+  0000~                        LD  (DE), A             ; #4 (bit 18)               ' 7
0117+  0000~                        RRA                     ;                           ' 4
0118+  0000~                        LD  (DE), A             ; #5 (bit 19)               ' 7
0119+  0000~                        RRA                     ;                           ' 4
0120+  0000~                        LD  (DE), A             ; #6 (bit 20)               ' 7
0121+  0000~                        RRA                     ;                           ' 4
0122+  0000~                        LD  (DE), A             ; #7 (bit 21)               ' 7
0123+  0000~                        RRA                     ;                           ' 4
0124+  0000~                        LD  (DE), A             ; #8 (bit 22)               ' 7
0125+  0000~                        RRA                     ;                           ' 4
0126+  0000~                        LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
0127+  0000~            
0128+  0000                         endm                    ;                           ' 105
0129+  0000             
0130+  0000             
0131+  0000             ; writeYMFast
0132+  0000             ; -----------
0133+  0000             ; HL  <-> YM port where to write
0134+  0000             ; D    -> address
0135+  0000             ; E    -> value
0136+  0000             ;
0137+  0000             ; write to YM2612 (no busy check)
0138+  0000             ; = 26 cycles
0139+  0000             
0140+  0000                         macro   writeYMFast
0141+  0000~            
0142+  0000~                        LD      (HL), D         ; write address             ' 7     |
0143+  0000~                        NOP                     ;                           ' 4     | 15
0144+  0000~                        NOP                     ; wait a bit for YM         ' 4     |
0145+  0000~            
0146+  0000~                        INC     L               ; next port                 ' 4     |
0147+  0000~                        LD      (HL), E         ; write value               ' 7     | 11
0148+  0000~            
0149+  0000                         endm
0150+  0000             
0151+  0000             
0152+  0000             
0153+  0000             ; getPlayCommand
0154+  0000             ; --------------
0155+  0000             ; HL  <-  point to COMMAND
0156+  0000             ; zf  <-  channel 'ch' play command
0157+  0000             ;
0158+  0000             ; Z flag reset if play command for channel 'ch'
0159+  0000             ; = 22 cycles
0160+  0000             
0161+  0000                         macro   getPlayCommand ch
0162+  0000~            
0163+  0000~                        LD      HL, COMMAND             ;                   ' 10
0164+  0000~                        BIT     COMPLAY_SFT+ch, (HL)    ; play command ?    ' 12
0165+  0000~            
0166+  0000                         endm                            ;                   ' 22
0167+  0000             
0168+  0000             
0169+  0000             ; getStopCommand
0170+  0000             ; --------------
0171+  0000             ; HL  <-  point to COMMAND
0172+  0000             ; zf  <-  channel 'ch' stop command
0173+  0000             ;
0174+  0000             ; Z flag reset if stop command for channel 'ch'
0175+  0000             ; = 22 cycles
0176+  0000             
0177+  0000                         macro   getStopCommand ch
0178+  0000~            
0179+  0000~                        LD      HL, COMMAND             ;                   ' 10
0180+  0000~                        BIT     COMSTOP_SFT+ch, (HL)    ; stop command ?    ' 12
0181+  0000~            
0182+  0000                         endm                            ;                   ' 22
0183+  0000             
0184+  0000             
0185+  0000             ; setPlayCommand
0186+  0000             ; ----------------
0187+  0000             ; HL  <-  point to COMMAND
0188+  0000             ;
0189+  0000             ; set the play command for channel 'ch'
0190+  0000             ; = 25 cycles
0191+  0000             
0192+  0000                         macro   setPlayCommand ch
0193+  0000~            
0194+  0000~                        LD      HL, COMMAND             ;                   ' 10
0195+  0000~                        SET     COMPLAY_SFT+ch, (HL)    ; set command       ' 15
0196+  0000~            
0197+  0000                         endm                            ;                   ' 25
0198+  0000             
0199+  0000             
0200+  0000             ; setStopCommand
0201+  0000             ; ----------------
0202+  0000             ; HL  <-  point to COMMAND
0203+  0000             ;
0204+  0000             ; set the stop command for channel 'ch'
0205+  0000             ; = 25 cycles
0206+  0000             
0207+  0000                         macro   setStopCommand ch
0208+  0000~            
0209+  0000~                        LD      HL, COMMAND             ;                   ' 10
0210+  0000~                        SET     COMSTOP_SFT+ch, (HL)    ; set command       ' 15
0211+  0000~            
0212+  0000                         endm                            ;                   ' 25
0213+  0000             
0214+  0000             
0215+  0000             ; clearPlayCommand
0216+  0000             ; ----------------
0217+  0000             ; HL  <-  point to COMMAND
0218+  0000             ;
0219+  0000             ; clear the play command for channel 'ch'
0220+  0000             ; = 25 cycles
0221+  0000             
0222+  0000                         macro   clearPlayCommand ch
0223+  0000~            
0224+  0000~                        LD      HL, COMMAND             ;                   ' 10
0225+  0000~                        RES     COMPLAY_SFT+ch, (HL)    ; clear command     ' 15
0226+  0000~            
0227+  0000                         endm                            ;                   ' 25
0228+  0000             
0229+  0000             
0230+  0000             ; clearStopCommand
0231+  0000             ; ----------------
0232+  0000             ; HL  <-  point to COMMAND
0233+  0000             ;
0234+  0000             ; clear the stop command for channel 'ch'
0235+  0000             ; = 25 cycles
0236+  0000             
0237+  0000                         macro   clearStopCommand ch
0238+  0000~            
0239+  0000~                        LD      HL, COMMAND             ;                   ' 10
0240+  0000~                        RES     COMSTOP_SFT+ch, (HL)    ; clear command     ' 15
0241+  0000~            
0242+  0000                         endm                            ;                   ' 25
0243+  0000             
0244+  0000             
0245+  0000             ; getPlayStatus
0246+  0000             ; -------------
0247+  0000             ; HL  <- point to STATUS
0248+  0000             ; zf  <-  channel 'ch' is playing
0249+  0000             ;
0250+  0000             ; Z flag reset if play status for channel 'ch'
0251+  0000             ; = 22 cycles
0252+  0000             
0253+  0000                         macro   getPlayStatus ch
0254+  0000~            
0255+  0000~                        LD      HL, STATUS              ;                   ' 10
0256+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
0257+  0000~            
0258+  0000                         endm                            ;                   ' 22
0259+  0000             
0260+  0000             
0261+  0000             ; setPlayStatus
0262+  0000             ; -------------
0263+  0000             ; HL  <- point to STATUS
0264+  0000             ;
0265+  0000             ; set the play status for channel 'ch'
0266+  0000             ; = 25 cycles
0267+  0000             
0268+  0000                         macro   setPlayStatus ch
0269+  0000~            
0270+  0000~                        LD      HL, STATUS              ;                   ' 10
0271+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
0272+  0000~            
0273+  0000                         endm                            ;                   ' 25
0274+  0000             
0275+  0000             
0276+  0000             ; clearPlayStatus
0277+  0000             ; ---------------
0278+  0000             ; HL  <- point to STATUS
0279+  0000             ;
0280+  0000             ; clear play status for channel 'ch'
0281+  0000             ; = 25 cycles
0282+  0000             
0283+  0000                         macro   clearPlayStatus ch
0284+  0000~            
0285+  0000~                        LD      HL, STATUS              ;                   ' 10
0286+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
0287+  0000~            
0288+  0000                         endm                            ;                   ' 25
0289+  0000             
0290+  0000             
0291+  0000             ; getLoopStatus
0292+  0000             ; -------------
0293+  0000             ; HL  <- point to STATUS+1
0294+  0000             ; zf  <-  channel 'ch' is playing
0295+  0000             ;
0296+  0000             ; Z flag reset if loop status for channel 'ch'
0297+  0000             ; = 22 cycles
0298+  0000             
0299+  0000                         macro   getLoopStatus ch
0300+  0000~            
0301+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0302+  0000~                        BIT     STATPLAY_SFT+ch, (HL)   ; get status        ' 12
0303+  0000~            
0304+  0000                         endm                            ;                   ' 22
0305+  0000             
0306+  0000             
0307+  0000             ; setLoopStatus
0308+  0000             ; -------------
0309+  0000             ; HL  <- point to STATUS+1
0310+  0000             ;
0311+  0000             ; set the loop status for channel 'ch'
0312+  0000             ; = 25 cycles
0313+  0000             
0314+  0000                         macro   setLoopStatus ch
0315+  0000~            
0316+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0317+  0000~                        SET     STATPLAY_SFT+ch, (HL)   ; set status        ' 15
0318+  0000~            
0319+  0000                         endm                            ;                   ' 25
0320+  0000             
0321+  0000             
0322+  0000             ; clearLoopStatus
0323+  0000             ; ---------------
0324+  0000             ; HL  <- point to STATUS+1
0325+  0000             ;
0326+  0000             ; clear loop status for channel 'ch'
0327+  0000             ; = 25 cycles
0328+  0000             
0329+  0000                         macro   clearLoopStatus ch
0330+  0000~            
0331+  0000~                        LD      HL, STATUS+1            ;                   ' 10
0332+  0000~                        RES     STATPLAY_SFT+ch, (HL)   ; clear status      ' 15
0333+  0000~            
0334+  0000                         endm                            ;                   ' 25
0335+  0000             
0336+  0000             
0337+  0000             ; clearAllStatus
0338+  0000             ; --------------
0339+  0000             ; HL  <- 0
0340+  0000             ;
0341+  0000             ; clear play and loop status for all channel
0342+  0000             ; = 26 cycles
0343+  0000             
0344+  0000                         macro   clearAllStatus
0345+  0000~            
0346+  0000~                        LD      HL, $00                 ;                   ' 10
0347+  0000~                        LD      (STATUS), HL            ; clear status      ' 16
0348+  0000~            
0349+  0000                         endm                            ;                   ' 26
0350+  0000             
0351+  0000             
0352+  0000             ; ############################  macro wait macro  ##############################
0353+  0000             
0354+  0000             
0355+  0000             ; wait2p16x
0356+  0000             ; ---------
0357+  0000             ; wait for ((w * 16) + 2) cycles
0358+  0000             ;
0359+  0000                         macro   wait2p16x w
0360+  0000~            
0361+  0000~                        LD      A, w            ; 7-2
0362+  0000~            .loop
0363+  0000~                        DEC     A               ; 4
0364+  0000~                        JR      NZ, .loop       ; 12
0365+  0000~            
0366+  0000                         endm
0367+  0000             
0368+  0000             
0369+  0000                         macro   wait4
0370+  0000~                        NOP
0371+  0000                         endm
0372+  0000             
0373+  0000                         macro   wait6
0374+  0000~                        INC     DE
0375+  0000                         endm
0376+  0000             
0377+  0000                         macro   wait7
0378+  0000~                        LD      A, $0
0379+  0000                         endm
0380+  0000             
0381+  0000                         macro   wait8
0382+  0000~                        wait4
0383+  0000~                        wait4
0384+  0000                         endm
0385+  0000             
0386+  0000                         macro   wait9
0387+  0000~                        LD      R, A
0388+  0000                         endm
0389+  0000             
0390+  0000                         macro   wait10
0391+  0000~                        JP      .loop
0392+  0000~            .loop
0393+  0000                         endm
0394+  0000             
0395+  0000                         macro   wait11
0396+  0000~                        wait7
0397+  0000~                        wait4
0398+  0000                         endm
0399+  0000             
0400+  0000                         macro   wait12
0401+  0000~                        JR      .loop
0402+  0000~            .loop
0403+  0000                         endm
0404+  0000             
0405+  0000                         macro   wait13
0406+  0000~                        wait9
0407+  0000~                        wait4
0408+  0000                         endm
0409+  0000             
0410+  0000                         macro   wait14
0411+  0000~                        wait7
0412+  0000~                        wait7
0413+  0000                         endm
0414+  0000             
0415+  0000                         macro   wait15
0416+  0000~                        wait8
0417+  0000~                        wait7
0418+  0000                         endm
0419+  0000             
0420+  0000                         macro   wait16
0421+  0000~                        wait12
0422+  0000~                        wait4
0423+  0000                         endm
0424+  0000             
0425+  0000                         macro   wait17
0426+  0000~                        wait10
0427+  0000~                        wait7
0428+  0000                         endm
0429+  0000             
0430+  0000                         macro   wait18
0431+  0000~                        wait9
0432+  0000~                        wait9
0433+  0000                         endm
0434+  0000             
0435+  0000                         macro   wait19
0436+  0000~                        wait12
0437+  0000~                        wait7
0438+  0000                         endm
0439+  0000             
0440+  0000                         macro   wait20
0441+  0000~                        wait11
0442+  0000~                        wait9
0443+  0000                         endm
0444+  0000             
0445+  0000                         macro   wait21
0446+  0000~                        wait12
0447+  0000~                        wait9
0448+  0000                         endm
0449+  0000             
0450+  0000                         macro   wait22
0451+  0000~                        wait18
0452+  0000~                        wait4
0453+  0000                         endm
0454+  0000             
0455+  0000                         macro   wait23
0456+  0000~                        wait14
0457+  0000~                        wait9
0458+  0000                         endm
0459+  0000             
0460+  0000                         macro   wait24
0461+  0000~                        wait12
0462+  0000~                        wait12
0463+  0000                         endm
0464+  0000             
0465+  0000                         macro   wait25
0466+  0000~                        wait18
0467+  0000~                        wait7
0468+  0000                         endm
0469+  0000             
0470+  0000                         macro   wait26
0471+  0000~                        wait18
0472+  0000~                        wait8
0473+  0000                         endm
0474+  0000             
0475+  0000                         macro   wait27
0476+  0000~                        wait18
0477+  0000~                        wait9
0478+  0000                         endm
0479+  0000             
0480+  0000                         macro   wait28
0481+  0000~                        wait21
0482+  0000~                        wait7
0483+  0000                         endm
0484+  0000             
0485+  0000                         macro   wait29
0486+  0000~                        wait21
0487+  0000~                        wait8
0488+  0000                         endm
0489+  0000             
0490+  0000                         macro   wait30
0491+  0000~                        wait21
0492+  0000~                        wait9
0493+  0000                         endm
0494+  0000             
0495+  0000                         macro   wait31
0496+  0000~                        wait21
0497+  0000~                        wait10
0498+  0000                         endm
0499+  0000             
0500+  0000                         macro   wait32
0501+  0000~                        wait20
0502+  0000~                        wait12
0503+  0000                         endm
0504+  0000             
0505+  0000                         macro   wait33
0506+  0000~                        wait21
0507+  0000~                        wait12
0508+  0000                         endm
0509+  0000             
0510+  0000                         macro   wait34
0511+  0000~                        wait2p16x 2
0512+  0000                         endm
0513+  0000             
0514+  0000                         macro   wait35
0515+  0000~                        wait28
0516+  0000~                        wait7
0517+  0000                         endm
0518+  0000             
0519+  0000                         macro   wait36
0520+  0000~                        wait27
0521+  0000~                        wait9
0522+  0000                         endm
0523+  0000             
0524+  0000                         macro   wait37
0525+  0000~                        wait28
0526+  0000~                        wait9
0527+  0000                         endm
0528+  0000             
0529+  0000                         macro   wait38
0530+  0000~                        wait27
0531+  0000~                        wait11
0532+  0000                         endm
0533+  0000             
0534+  0000                         macro   wait39
0535+  0000~                        wait27
0536+  0000~                        wait12
0537+  0000                         endm
0538+  0000             
0539+  0000                         macro   wait40
0540+  0000~                        wait27
0541+  0000~                        wait13
0542+  0000                         endm
0543+  0000             
0544+  0000                         macro   wait41
0545+  0000~                        wait34
0546+  0000~                        wait7
0547+  0000                         endm
0548+  0000             
0549+  0000                         macro   wait42
0550+  0000~                        wait34
0551+  0000~                        wait8
0552+  0000                         endm
0553+  0000             
0554+  0000                         macro   wait43
0555+  0000~                        wait36
0556+  0000~                        wait7
0557+  0000                         endm
0558+  0000             
0559+  0000                         macro   wait44
0560+  0000~                        wait34
0561+  0000~                        wait10
0562+  0000                         endm
0563+  0000             
0564+  0000                         macro   wait45
0565+  0000~                        wait36
0566+  0000~                        wait9
0567+  0000                         endm
0568+  0000             
0569+  0000                         macro   wait46
0570+  0000~                        wait34
0571+  0000~                        wait12
0572+  0000                         endm
0573+  0000             
0574+  0000                         macro   wait47
0575+  0000~                        wait34
0576+  0000~                        wait13
0577+  0000                         endm
0578+  0000             
0579+  0000                         macro   wait48
0580+  0000~                        wait36
0581+  0000~                        wait12
0582+  0000                         endm
0583+  0000             
0584+  0000                         macro   wait49
0585+  0000~                        wait36
0586+  0000~                        wait13
0587+  0000                         endm
0588+  0000             
0589+  0000                         macro   wait50
0590+  0000~                        wait2p16x 3
0591+  0000                         endm
0592+  0000             
0593+  0000                         macro   wait51
0594+  0000~                        wait34
0595+  0000~                        wait17
0596+  0000                         endm
0597+  0000             
0598+  0000                         macro   wait52
0599+  0000~                        wait34
0600+  0000~                        wait18
0601+  0000                         endm
0602+  0000             
0603+  0000                         macro   wait53
0604+  0000~                        wait36
0605+  0000~                        wait17
0606+  0000                         endm
0607+  0000             
0608+  0000                         macro   wait54
0609+  0000~                        wait50
0610+  0000~                        wait4
0611+  0000                         endm
0612+  0000             
0613+  0000                         macro   wait55
0614+  0000~                        wait34
0615+  0000~                        wait21
0616+  0000                         endm
0617+  0000             
0618+  0000                         macro   wait56
0619+  0000~                        wait34
0620+  0000~                        wait22
0621+  0000                         endm
0622+  0000             
0623+  0000                         macro   wait57
0624+  0000~                        wait50
0625+  0000~                        wait7
0626+  0000                         endm
0627+  0000             
0628+  0000                         macro   wait58
0629+  0000~                        wait50
0630+  0000~                        wait8
0631+  0000                         endm
0632+  0000             
0633+  0000                         macro   wait59
0634+  0000~                        wait50
0635+  0000~                        wait9
0636+  0000                         endm
0637+  0000             
0638+  0000                         macro   wait60
0639+  0000~                        wait50
0640+  0000~                        wait10
0641+  0000                         endm
0642+  0000             
0643+  0000                         macro   wait61
0644+  0000~                        wait50
0645+  0000~                        wait11
0646+  0000                         endm
0647+  0000             
0648+  0000                         macro   wait62
0649+  0000~                        wait50
0650+  0000~                        wait12
0651+  0000                         endm
0652+  0000             
0653+  0000                         macro   wait63
0654+  0000~                        wait50
0655+  0000~                        wait13
0656+  0000                         endm
0657+  0000             
0658+  0000                         macro   wait64
0659+  0000~                        wait50
0660+  0000~                        wait14
0661+  0000                         endm
0662+  0000             
0663+  0000                         macro   wait65
0664+  0000~                        wait50
0665+  0000~                        wait15
0666+  0000                         endm
0667+  0000             
0668+  0000                         macro   wait66
0669+  0000~                        wait2p16x 4
0670+  0000                         endm
0671+  0000             
0672+  0000                         macro   wait67
0673+  0000~                        wait50
0674+  0000~                        wait17
0675+  0000                         endm
0676+  0000             
0677+  0000                         macro   wait68
0678+  0000~                        wait50
0679+  0000~                        wait18
0680+  0000                         endm
0681+  0000             
0682+  0000                         macro   wait70
0683+  0000~                        wait66
0684+  0000~                        wait4
0685+  0000                         endm
0686+  0000             
0687+  0000                         macro   wait71
0688+  0000~                        wait50
0689+  0000~                        wait21
0690+  0000                         endm
0691+  0000             
0692+  0000                         macro   wait72
0693+  0000~                        wait50
0694+  0000~                        wait22
0695+  0000                         endm
0696+  0000             
0697+  0000                         macro   wait73
0698+  0000~                        wait66
0699+  0000~                        wait7
0700+  0000                         endm
0701+  0000             
0702+  0000                         macro   wait74
0703+  0000~                        wait66
0704+  0000~                        wait8
0705+  0000                         endm
0706+  0000             
0707+  0000                         macro   wait75
0708+  0000~                        wait66
0709+  0000~                        wait9
0710+  0000                         endm
0711+  0000             
0712+  0000                         macro   wait76
0713+  0000~                        wait66
0714+  0000~                        wait10
0715+  0000                         endm
0716+  0000             
0717+  0000                         macro   wait77
0718+  0000~                        wait66
0719+  0000~                        wait11
0720+  0000                         endm
0721+  0000             
0722+  0000                         macro   wait78
0723+  0000~                        wait66
0724+  0000~                        wait12
0725+  0000                         endm
0726+  0000             
0727+  0000                         macro   wait79
0728+  0000~                        wait66
0729+  0000~                        wait13
0730+  0000                         endm
0731+  0000             
0732+  0000                         macro   wait80
0733+  0000~                        wait66
0734+  0000~                        wait14
0735+  0000                         endm
0736+  0000             
0737+  0000                         macro   wait81
0738+  0000~                        wait66
0739+  0000~                        wait15
0740+  0000                         endm
0741+  0000             
0742+  0000                         macro   wait82
0743+  0000~                        wait2p16x 5
0744+  0000                         endm
0745+  0000             
0746+  0000                         macro   wait83
0747+  0000~                        wait66
0748+  0000~                        wait17
0749+  0000                         endm
0750+  0000             
0751+  0000                         macro   wait84
0752+  0000~                        wait66
0753+  0000~                        wait18
0754+  0000                         endm
0755+  0000             
0756+  0000                         macro   wait85
0757+  0000~                        wait66
0758+  0000~                        wait19
0759+  0000                         endm
0760+  0000             
0761+  0000                         macro   wait86
0762+  0000~                        wait82
0763+  0000~                        wait4
0764+  0000                         endm
0765+  0000             
0766+  0000                         macro   wait87
0767+  0000~                        wait66
0768+  0000~                        wait21
0769+  0000                         endm
0770+  0000             
0771+  0000                         macro   wait88
0772+  0000~                        wait66
0773+  0000~                        wait22
0774+  0000                         endm
0775+  0000             
0776+  0000                         macro   wait89
0777+  0000~                        wait82
0778+  0000~                        wait7
0779+  0000                         endm
0780+  0000             
0781+  0000                         macro   wait90
0782+  0000~                        wait82
0783+  0000~                        wait8
0784+  0000                         endm
0785+  0000             
0786+  0000                         macro   wait91
0787+  0000~                        wait82
0788+  0000~                        wait9
0789+  0000                         endm
0790+  0000             
0791+  0000                         macro   wait92
0792+  0000~                        wait82
0793+  0000~                        wait10
0794+  0000                         endm
0795+  0000             
0796+  0000                         macro   wait94
0797+  0000~                        wait82
0798+  0000~                        wait12
0799+  0000                         endm
0800+  0000             
0801+  0000                         macro   wait95
0802+  0000~                        wait82
0803+  0000~                        wait13
0804+  0000                         endm
0805+  0000             
0806+  0000                         macro   wait96
0807+  0000~                        wait82
0808+  0000~                        wait14
0809+  0000                         endm
0810+  0000             
0811+  0000                         macro   wait97
0812+  0000~                        wait82
0813+  0000~                        wait15
0814+  0000                         endm
0815+  0000             
0816+  0000                         macro   wait98
0817+  0000~                        wait2p16x 6
0818+  0000                         endm
0819+  0000             
0820+  0000                         macro   wait99
0821+  0000~                        wait82
0822+  0000~                        wait17
0823+  0000                         endm
0824+  0000             
0825+  0000                         macro   wait100
0826+  0000~                        wait82
0827+  0000~                        wait18
0828+  0000                         endm
0829+  0000             
0830+  0000                         macro   wait102
0831+  0000~                        wait98
0832+  0000~                        wait4
0833+  0000                         endm
0834+  0000             
0835+  0000                         macro   wait103
0836+  0000~                        wait82
0837+  0000~                        wait21
0838+  0000                         endm
0839+  0000             
0840+  0000                         macro   wait104
0841+  0000~                        wait82
0842+  0000~                        wait22
0843+  0000                         endm
0844+  0000             
0845+  0000                         macro   wait105
0846+  0000~                        wait98
0847+  0000~                        wait7
0848+  0000                         endm
0849+  0000             
0850+  0000                         macro   wait106
0851+  0000~                        wait98
0852+  0000~                        wait8
0853+  0000                         endm
0854+  0000             
0855+  0000                         macro   wait107
0856+  0000~                        wait98
0857+  0000~                        wait9
0858+  0000                         endm
0859+  0000             
0860+  0000                         macro   wait108
0861+  0000~                        wait98
0862+  0000~                        wait10
0863+  0000                         endm
0864+  0000             
0865+  0000                         macro   wait109
0866+  0000~                        wait98
0867+  0000~                        wait11
0868+  0000                         endm
0869+  0000             
0870+  0000                         macro   wait110
0871+  0000~                        wait98
0872+  0000~                        wait12
0873+  0000                         endm
0874+  0000             
0875+  0000                         macro   wait111
0876+  0000~                        wait98
0877+  0000~                        wait13
0878+  0000                         endm
0879+  0000             
0880+  0000                         macro   wait112
0881+  0000~                        wait98
0882+  0000~                        wait14
0883+  0000                         endm
0884+  0000             
0885+  0000                         macro   wait114
0886+  0000~                        wait2p16x 7
0887+  0000                         endm
0888+  0000             
0889+  0000                         macro   wait115
0890+  0000~                        wait98
0891+  0000~                        wait17
0892+  0000                         endm
0893+  0000             
0894+  0000                         macro   wait116
0895+  0000~                        wait98
0896+  0000~                        wait18
0897+  0000                         endm
0898+  0000             
0899+  0000                         macro   wait117
0900+  0000~                        wait98
0901+  0000~                        wait19
0902+  0000                         endm
0903+  0000             
0904+  0000                         macro   wait118
0905+  0000~                        wait114
0906+  0000~                        wait4
0907+  0000                         endm
0908+  0000             
0909+  0000                         macro   wait119
0910+  0000~                        wait98
0911+  0000~                        wait21
0912+  0000                         endm
0913+  0000             
0914+  0000                         macro   wait120
0915+  0000~                        wait98
0916+  0000~                        wait22
0917+  0000                         endm
0918+  0000             
0919+  0000                         macro   wait121
0920+  0000~                        wait114
0921+  0000~                        wait7
0922+  0000                         endm
0923+  0000             
0924+  0000                         macro   wait122
0925+  0000~                        wait114
0926+  0000~                        wait8
0927+  0000                         endm
0928+  0000             
0929+  0000                         macro   wait123
0930+  0000~                        wait114
0931+  0000~                        wait9
0932+  0000                         endm
0933+  0000             
0934+  0000                         macro   wait124
0935+  0000~                        wait114
0936+  0000~                        wait10
0937+  0000                         endm
0938+  0000             
0939+  0000                         macro   wait125
0940+  0000~                        wait114
0941+  0000~                        wait11
0942+  0000                         endm
0943+  0000             
0944+  0000                         macro   wait126
0945+  0000~                        wait114
0946+  0000~                        wait12
0947+  0000                         endm
0948+  0000             
0949+  0000                         macro   wait127
0950+  0000~                        wait114
0951+  0000~                        wait13
0952+  0000                         endm
0953+  0000             
0954+  0000                         macro   wait128
0955+  0000~                        wait114
0956+  0000~                        wait14
0957+  0000                         endm
0958+  0000             
0959+  0000                         macro   wait129
0960+  0000~                        wait114
0961+  0000~                        wait15
0962+  0000                         endm
0963+  0000             
0964+  0000                         macro   wait130
0965+  0000~                        wait2p16x 8
0966+  0000                         endm
0967+  0000             
0968+  0000                         macro   wait131
0969+  0000~                        wait114
0970+  0000~                        wait17
0971+  0000                         endm
0972+  0000             
0973+  0000                         macro   wait132
0974+  0000~                        wait114
0975+  0000~                        wait18
0976+  0000                         endm
0977+  0000             
0978+  0000                         macro   wait133
0979+  0000~                        wait114
0980+  0000~                        wait19
0981+  0000                         endm
0982+  0000             
0983+  0000                         macro   wait134
0984+  0000~                        wait130
0985+  0000~                        wait4
0986+  0000                         endm
0987+  0000             
0988+  0000                         macro   wait135
0989+  0000~                        wait114
0990+  0000~                        wait21
0991+  0000                         endm
0992+  0000             
0993+  0000                         macro   wait136
0994+  0000~                        wait114
0995+  0000~                        wait22
0996+  0000                         endm
0997+  0000             
0998+  0000                         macro   wait137
0999+  0000~                        wait130
1000+  0000~                        wait7
1001+  0000                         endm
1002+  0000             
1003+  0000                         macro   wait138
1004+  0000~                        wait130
1005+  0000~                        wait8
1006+  0000                         endm
1007+  0000             
1008+  0000                         macro   wait139
1009+  0000~                        wait130
1010+  0000~                        wait9
1011+  0000                         endm
1012+  0000             
1013+  0000                         macro   wait140
1014+  0000~                        wait130
1015+  0000~                        wait10
1016+  0000                         endm
1017+  0000             
1018+  0000                         macro   wait141
1019+  0000~                        wait130
1020+  0000~                        wait11
1021+  0000                         endm
1022+  0000             
1023+  0000                         macro   wait144
1024+  0000~                        wait130
1025+  0000~                        wait14
1026+  0000                         endm
1027+  0000             
1028+  0000                         macro   wait145
1029+  0000~                        wait130
1030+  0000~                        wait15
1031+  0000                         endm
1032+  0000             
1033+  0000                         macro   wait146
1034+  0000~                        wait2p16x 9
1035+  0000                         endm
1036+  0000             
1037+  0000                         macro   wait147
1038+  0000~                        wait130
1039+  0000~                        wait17
1040+  0000                         endm
1041+  0000             
1042+  0000                         macro   wait148
1043+  0000~                        wait130
1044+  0000~                        wait18
1045+  0000                         endm
1046+  0000             
1047+  0000                         macro   wait149
1048+  0000~                        wait130
1049+  0000~                        wait19
1050+  0000                         endm
1051+  0000             
1052+  0000                         macro   wait150
1053+  0000~                        wait146
1054+  0000~                        wait4
1055+  0000                         endm
1056+  0000             
1057+  0000                         macro   wait154
1058+  0000~                        wait146
1059+  0000~                        wait8
1060+  0000                         endm
1061+  0000             
1062+  0000                         macro   wait155
1063+  0000~                        wait146
1064+  0000~                        wait9
1065+  0000                         endm
1066+  0000             
1067+  0000                         macro   wait156
1068+  0000~                        wait146
1069+  0000~                        wait10
1070+  0000                         endm
1071+  0000             
1072+  0000                         macro   wait157
1073+  0000~                        wait146
1074+  0000~                        wait11
1075+  0000                         endm
1076+  0000             
1077+  0000                         macro   wait158
1078+  0000~                        wait146
1079+  0000~                        wait12
1080+  0000                         endm
1081+  0000             
1082+  0000                         macro   wait160
1083+  0000~                        wait146
1084+  0000~                        wait14
1085+  0000                         endm
1086+  0000             
1087+  0000                         macro   wait161
1088+  0000~                        wait146
1089+  0000~                        wait15
1090+  0000                         endm
1091+  0000             
1092+  0000                         macro   wait162
1093+  0000~                        wait2p16x 10
1094+  0000                         endm
1095+  0000             
1096+  0000                         macro   wait164
1097+  0000~                        wait146
1098+  0000~                        wait18
1099+  0000                         endm
1100+  0000             
1101+  0000                         macro   wait165
1102+  0000~                        wait146
1103+  0000~                        wait19
1104+  0000                         endm
1105+  0000             
1106+  0000                         macro   wait166
1107+  0000~                        wait162
1108+  0000~                        wait4
1109+  0000                         endm
1110+  0000             
1111+  0000                         macro   wait172
1112+  0000~                        wait162
1113+  0000~                        wait10
1114+  0000                         endm
1115+  0000             
1116+  0000                         macro   wait174
1117+  0000~                        wait162
1118+  0000~                        wait12
1119+  0000                         endm
1120+  0000             
1121+  0000                         macro   wait175
1122+  0000~                        wait162
1123+  0000~                        wait13
1124+  0000                         endm
1125+  0000             
1126+  0000                         macro   wait176
1127+  0000~                        wait162
1128+  0000~                        wait14
1129+  0000                         endm
1130+  0000             
1131+  0000                         macro   wait178
1132+  0000~                        wait2p16x 11
1133+  0000                         endm
1134+  0000             
1135+  0000                         macro   wait179
1136+  0000~                        wait162
1137+  0000~                        wait17
1138+  0000                         endm
1139+  0000             
1140+  0000                         macro   wait180
1141+  0000~                        wait162
1142+  0000~                        wait18
1143+  0000                         endm
1144+  0000             
1145+  0000                         macro   wait182
1146+  0000~                        wait178
1147+  0000~                        wait4
1148+  0000                         endm
1149+  0000             
1150+  0000                         macro   wait183
1151+  0000~                        wait162
1152+  0000~                        wait121
1153+  0000                         endm
1154+  0000             
1155+  0000                         macro   wait186
1156+  0000~                        wait178
1157+  0000~                        wait8
1158+  0000                         endm
1159+  0000             
1160+  0000                         macro   wait187
1161+  0000~                        wait178
1162+  0000~                        wait9
1163+  0000                         endm
1164+  0000             
1165+  0000                         macro   wait189
1166+  0000~                        wait178
1167+  0000~                        wait11
1168+  0000                         endm
1169+  0000             
1170+  0000                         macro   wait191
1171+  0000~                        wait178
1172+  0000~                        wait13
1173+  0000                         endm
1174+  0000             
1175+  0000                         macro   wait192
1176+  0000~                        wait178
1177+  0000~                        wait14
1178+  0000                         endm
1179+  0000             
1180+  0000                         macro   wait193
1181+  0000~                        wait178
1182+  0000~                        wait15
1183+  0000                         endm
1184+  0000             
1185+  0000                         macro   wait194
1186+  0000~                        wait2p16x 12
1187+  0000                         endm
1188+  0000             
1189+  0000                         macro   wait197
1190+  0000~                        wait178
1191+  0000~                        wait19
1192+  0000                         endm
1193+  0000             
1194+  0000                         macro   wait203
1195+  0000~                        wait194
1196+  0000~                        wait9
1197+  0000                         endm
1198+  0000             
1199+  0000                         macro   wait210
1200+  0000~                        wait2p16x 13
1201+  0000                         endm
1202+  0000             
1203+  0000                         macro   wait218
1204+  0000~                        wait210
1205+  0000~                        wait8
1206+  0000                         endm
1207+  0000             
1208+  0000                         macro   wait226
1209+  0000~                        wait2p16x 14
1210+  0000                         endm
1211+  0000             
1212+  0000                         macro   wait234
1213+  0000~                        wait226
1214+  0000~                        wait8
1215+  0000                         endm
1216+  0000             
1217+  0000                         macro   wait242
1218+  0000~                        wait2p16x 15
1219+  0000                         endm
1220+  0000             
1221+  0000                         macro   wait244
1222+  0000~                        wait226
1223+  0000~                        wait18
1224+  0000                         endm
1225+  0000             
1226+  0000                         macro   wait246
1227+  0000~                        wait242
1228+  0000~                        wait4
1229+  0000                         endm
1230+  0000             
1231+  0000                         macro   wait254
1232+  0000~                        wait242
1233+  0000~                        wait12
1234+  0000                         endm
1235+  0000             
1236+  0000                         macro   wait258
1237+  0000~                        wait2p16x 16
1238+  0000                         endm
1239+  0000             
1240+  0000                         macro   wait260
1241+  0000~                        wait242
1242+  0000~                        wait18
1243+  0000                         endm
1244+  0000             
1245+  0000                         macro   wait262
1246+  0000~                        wait258
1247+  0000~                        wait4
1248+  0000                         endm
1249+  0000             
1250+  0000                         macro   wait264
1251+  0000~                        wait242
1252+  0000~                        wait22
1253+  0000                         endm
1254+  0000             
1255+  0000                         macro   wait268
1256+  0000~                        wait258
1257+  0000~                        wait10
1258+  0000                         endm
1259+  0000             
1260+  0000                         macro   wait274
1261+  0000~                        wait2p16x 17
1262+  0000                         endm
1263+  0000             
1264+  0000                         macro   wait276
1265+  0000~                        wait258
1266+  0000~                        wait18
1267+  0000                         endm
1268+  0000             
1269+  0000                         macro   wait278
1270+  0000~                        wait274
1271+  0000~                        wait4
1272+  0000                         endm
1273+  0000             
1274+  0000                         macro   wait282
1275+  0000~                        wait274
1276+  0000~                        wait8
1277+  0000                         endm
1278+  0000             
1279+  0000                         macro   wait283
1280+  0000~                        wait274
1281+  0000~                        wait9
1282+  0000                         endm
1283+  0000             
1284+  0000                         macro   wait285
1285+  0000~                        wait274
1286+  0000~                        wait11
1287+  0000                         endm
1288+  0000             
1289+  0000                         macro   wait287
1290+  0000~                        wait274
1291+  0000~                        wait13
1292+  0000                         endm
1293+  0000             
1294+  0000                         macro   wait290
1295+  0000~                        wait2p16x 18
1296+  0000                         endm
1297+  0000             
1298+  0000                         macro   wait294
1299+  0000~                        wait290
1300+  0000~                        wait4
1301+  0000                         endm
1302+  0000             
1303+  0000                         macro   wait295
1304+  0000~                        wait274
1305+  0000~                        wait21
1306+  0000                         endm
1307+  0000             
1308+  0000                         macro   wait298
1309+  0000~                        wait290
1310+  0000~                        wait8
1311+  0000                         endm
1312+  0000             
1313+  0000                         macro   wait305
1314+  0000~                        wait290
1315+  0000~                        wait15
1316+  0000                         endm
1317+  0000             
1318+  0000                         macro   wait306
1319+  0000~                        wait2p16x 19
1320+  0000                         endm
1321+  0000             
1322+  0000                         macro   wait308
1323+  0000~                        wait290
1324+  0000~                        wait18
1325+  0000                         endm
1326+  0000             
1327+  0000                         macro   wait320
1328+  0000~                        wait306
1329+  0000~                        wait14
1330+  0000                         endm
1331+  0000             
1332+  0000                         macro   wait322
1333+  0000~                        wait2p16x 20
1334+  0000                         endm
1335+  0000             
1336+  0000                         macro   wait324
1337+  0000~                        wait306
1338+  0000~                        wait18
1339+  0000                         endm
1340+  0000             
1341+  0000                         macro   wait329
1342+  0000~                        wait322
1343+  0000~                        wait7
1344+  0000                         endm
1345+  0000             
1346+  0000                         macro   wait337
1347+  0000~                        wait322
1348+  0000~                        wait15
1349+  0000                         endm
1350+  0000             
1351+  0000                         macro   wait338
1352+  0000~                        wait2p16x 21
1353+  0000                         endm
1354+  0000             
1355+  0000                         macro   wait345
1356+  0000~                        wait338
1357+  0000~                        wait7
1358+  0000                         endm
1359+  0000             
1360+  0000                         macro   wait434
1361+  0000~                        wait2p16x 27
1362+  0000                         endm
1363+  0000             
1364+  0000                         macro   wait450
1365+  0000~                        wait2p16x 28
1366+  0000                         endm
1367+  0000             
1368+  0000                         macro   wait454
1369+  0000~                        wait450
1370+  0000~                        wait4
1371+  0000                         endm
1372+  0000             
1373+  0000                         macro   wait455
1374+  0000~                        wait434
1375+  0000~                        wait21
1376+  0000                         endm
1377+  0000             
1378+  0000                         macro   wait546
1379+  0000~                        wait2p16x 34
1380+  0000                         endm
1381+  0000             
1382+  0000                         macro   wait562
1383+  0000~                        wait2p16x 35
1384+  0000                         endm
1385+  0000             
1386+  0000                         macro   wait567
1387+  0000~                        wait546
1388+  0000~                        wait21
1389+  0000                         endm
1390+  0000             
1391+  0000                         macro   wait578
1392+  0000~                        wait2p16x 36
1393+  0000                         endm
1394+  0000             
1395+  0000                         macro   wait586
1396+  0000~                        wait578
1397+  0000~                        wait8
1398+  0000                         endm
1399+  0000             
1400+  0000                         macro   wait590
1401+  0000~                        wait578
1402+  0000~                        wait12
1403+  0000                         endm
1404+  0000             
1405+  0000                         macro   wait594
1406+  0000~                        wait2p16x 37
1407+  0000                         endm
1408+  0000             
1409+  0000                         macro   wait595
1410+  0000~                        wait578
1411+  0000~                        wait17
1412+  0000                         endm
1413+  0000             
1414+  0000                         macro   wait598
1415+  0000~                        wait594
1416+  0000~                        wait4
1417+  0000                         endm
1418+  0000             
1419+  0000                         macro   wait599
1420+  0000~                        wait578
1421+  0000~                        wait21
1422+  0000                         endm
1423+  0000             
1424+  0000                         macro   wait602
1425+  0000~                        wait594
1426+  0000~                        wait8
1427+  0000                         endm
1428+  0000             
1429+  0000                         macro   wait609
1430+  0000~                        wait594
1431+  0000~                        wait15
1432+  0000                         endm
1433+  0000             
1434+  0000                         macro   wait610
1435+  0000~                        wait2p16x 38
1436+  0000                         endm
1437+  0000             
1438+  0000                         macro   wait614
1439+  0000~                        wait610
1440+  0000~                        wait4
1441+  0000                         endm
1442+  0000             
1443+  0000                         macro   wait618
1444+  0000~                        wait610
1445+  0000~                        wait8
1446+  0000                         endm
1447+  0000             
1448+  0000                         macro   wait619
1449+  0000~                        wait610
1450+  0000~                        wait9
1451+  0000                         endm
1452+  0000             
1453+  0000                         macro   wait622
1454+  0000~                        wait610
1455+  0000~                        wait12
1456+  0000                         endm
1457+  0000             
1458+  0000                         macro   wait623
1459+  0000~                        wait610
1460+  0000~                        wait13
1461+  0000                         endm
1462+  0000             
1463+  0000                         macro   wait626
1464+  0000~                        wait2p16x 39
1465+  0000                         endm
1466+  0000             
1467+  0000                         macro   wait634
1468+  0000~                        wait626
1469+  0000~                        wait8
1470+  0000                         endm
1471+  0000             
1472+  0000                         macro   wait638
1473+  0000~                        wait626
1474+  0000~                        wait12
1475+  0000                         endm
0134   0000             
0135   0000             
0136   0000             ; handlePCMCommand
0137   0000             ; ----------------
0138   0000             ; ? ->  HL  -> ?
0139   0000             ; ? ->  BC  -> ?
0140   0000             ; ? ->  SP  -> ?
0141   0000             ;
0142   0000             ; handle PCM command for channel 'ch' (PCM id < 0x100)
0143   0000             ; = 157 cycles
0144   0000             
0145   0000                         macro handlePCMCommand ch
0146   0000~            
0147   0000~                        LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
0148   0000~                        LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
0149   0000~            
0150   0000~                        LD      A, C                    ; A = new prio              ' 4     |
0151   0000~                        CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
0152   0000~                        JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
0153   0000~            
0154   0000~                        wait96                          ; sync                      ' 96    |
0155   0000~                        JP      .end                    ;                           ' 10    | 106 (157)
0156   0000~            
0157   0000~            .play_new
0158   0000~                        LD      A, B                    ; A = SFX id                ' 4     |
0159   0000~                        OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
0160   0000~                        JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
0161   0000~            
0162   0000~                        LD      C, 0                    ; reset prio for stop       ' 7     | +2
0163   0000~            
0164   0000~            .PCM_play                                   ;                           ' 69
0165   0000~                        LD      (HL), C                 ; set new prio              ' 7     | (76)
0166   0000~            
0167   0000~                        LD      H, (ID_TABLE>>10)       ;                           ' 7     |
0168   0000~                        LD      L, A                    ;                           ' 4     |
0169   0000~                        ADD     HL, HL                  ;                           ' 6     |
0170   0000~                        ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
0171   0000~                        LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
0172   0000~            
0173   0000~                        POP     HL                      ; copy params               ' 10    |
0174   0000~                        LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
0175   0000~                        POP     HL                      ;                           ' 10    | 52 (157)
0176   0000~                        LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
0177   0000~            
0178   0000~            .end
0179   0000                         endm
0180   0000             
0181   0000             
0182   0000             ; handlePCMCommandXGM
0183   0000             ; -------------------
0184   0000             ; XGM data ->  DE  -> XGM data
0185   0000             ; PCM prio ->  C   -> ?
0186   0000             ; ?        ->  HL  -> ?
0187   0000             ; ?        ->  SP  -> ?
0188   0000             ;
0189   0000             ; handle PCM command for channel 'ch' for XGM music (PCM id < 0x40)
0190   0000             ; = 142 cycles
0191   0000             
0192   0000                         macro handlePCMCommandXGM ch
0193   0000~            
0194   0000~                        LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
0195   0000~                        LD      A, C                    ; A = new prio              ' 4     |
0196   0000~                        CP      (HL)                    ; compare new and old prio  ' 7     | (31)
0197   0000~                        JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
0198   0000~            
0199   0000~                        INC     E                       ; next XGM command          ' 4     |
0200   0000~                        wait97                          ; sync                      ' 97    | 111 (142)
0201   0000~                        JP      .end                    ; done                      ' 10    |
0202   0000~            
0203   0000~            .play_new
0204   0000~                        LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
0205   0000~                        INC     E                       ; next XGM command          ' 4     |
0206   0000~                        OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
0207   0000~                        JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
0208   0000~            
0209   0000~                        LD      C, 0                    ; reset prio for stop       ' 7     | +2
0210   0000~            
0211   0000~            .PCM_play
0212   0000~                        LD      (HL), C                 ; set new prio              ' 7     | (65)
0213   0000~            
0214   0000~                        LD      H, (ID_TABLE>>8)        ;                           ' 7     |
0215   0000~                        ADD     A                       ;                           ' 4     |
0216   0000~                        ADD     A                       ;                           ' 4     | 25 (90)
0217   0000~                        LD      L, A                    ; HL point on new PCM addr  ' 4     |
0218   0000~                        LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
0219   0000~            
0220   0000~                        POP     HL                      ; copy params               ' 10    |
0221   0000~                        LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
0222   0000~                        POP     HL                      ;                           ' 10    | 52 (142)
0223   0000~                        LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
0224   0000~            
0225   0000~            .end                                        ;                           ' 142
0226   0000~            
0227   0000                         endm
0228   0000             
0229   0000             
0230   0000             ; prepareChannelAlt
0231   0000             ; -----------------
0232   0000             ; ? ->  HL  ->  point to the sample source (ROM)
0233   0000             ; ? ->  DE  ->  point to write buffer
0234   0000             ;
0235   0000             ; set bank and prepare registers to play PCM channel 'ch'
0236   0000             ; = 176 cycles
0237   0000             
0238   0000                         macro prepareChannelAlt ch
0239   0000~            
0240   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0241   0000~            
0242   0000~                        LD      A, L                    ; A = bit 8-15          ' 4     |
0243   0000~                        RLA                             ; C flag = bit 15       ' 4     |
0244   0000~                        LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0245   0000~                        RLA                             ; A = bit 15-22         ' 4     |
0246   0000~            
0247   0000~                        setBank_DE                      ; set bank              ' 105   | (137)
0248   0000~            
0249   0000~                        LD      H, L                    ;                       ' 4     |
0250   0000~                        SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
0251   0000~                        LD      L, 0                    ; HL = sample addr bank ' 7     |
0252   0000~            
0253   0000~                        LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
0254   0000~            
0255   0000                         endm
0256   0000             
0257   0000             ; prepareChannel
0258   0000             ; --------------
0259   0000             ; ? ->  SP  ->  point to the sample source (ROM)
0260   0000             ; ? ->  HL  ->  point to write buffer
0261   0000             ;
0262   0000             ; set bank and prepare registers to play PCM channel 'ch'
0263   0000             ; = 178 cycles
0264   0000             
0265   0000                         macro prepareChannel ch
0266   0000~            
0267   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
0268   0000~            
0269   0000~                        LD      A, L                    ; A = bit 8-15          ' 4     |
0270   0000~                        RLA                             ; C flag = bit 15       ' 4     |
0271   0000~                        LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
0272   0000~                        RLA                             ; A = bit 15-22         ' 4     |
0273   0000~            
0274   0000~                        setBank_DE                      ; set bank              ' 105   | (137)
0275   0000~            
0276   0000~                        LD      H, L                    ;                       ' 4     |
0277   0000~                        SET     7, H                    ; HL |= 0x8000          ' 8     | 25 (162)
0278   0000~                        LD      L, 0                    ; HL = sample addr bank ' 7     |
0279   0000~                        LD      SP, HL                  ; SP point on sample    ' 6     |
0280   0000~            
0281   0000~                        LD      HL, (WRITEBUF)          ; HL = write buffer     ' 16    | (178)
0282   0000~            
0283   0000                         endm
0284   0000             
0285   0000             
0286   0000             ; stopChannel
0287   0000             ; -----------
0288   0000             ; ? ->  HL  -> STATUS
0289   0000             ;
0290   0000             ; set null sample play for channel 'ch'
0291   0000             ; = 75 cycles
0292   0000             
0293   0000                         macro stopChannel ch
0294   0000~            
0295   0000~                        LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0296   0000~                        LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0297   0000~                        LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0298   0000~                        LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0299   0000~            
0300   0000~                        XOR     A                       ;                           ' 4     |
0301   0000~                        LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0302   0000~            
0303   0000                         endm
0304   0000             
0305   0000             
0306   0000             ; updateChannelData
0307   0000             ; -----------------
0308   0000             ; ? ->  HL  -> ?
0309   0000             ;
0310   0000             ; update sample address and sample lenght
0311   0000             ; check if sample is done and stop it if needed
0312   0000             ; = 153 cycles
0313   0000             
0314   0000                         macro updateChannelData ch
0315   0000~            
0316   0000~                        LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
0317   0000~                        INC     HL                      ;                       ' 6     | (38)
0318   0000~                        LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
0319   0000~            
0320   0000~                        LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
0321   0000~                        DEC     HL                      ;                       ' 6     | 22 (60)
0322   0000~            
0323   0000~                        LD      A, H                    ;                       ' 4     |
0324   0000~                        OR      L                       ;                       ' 4     | 18 (78)
0325   0000~                        JP      Z, .done                ; sample done ?         ' 10    |
0326   0000~            
0327   0000~                        LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
0328   0000~                        wait49                          ;                       ' 49    | 75 (153)
0329   0000~                        JP      .end                    ;                       ' 10    |
0330   0000~            
0331   0000~            .done
0332   0000~                        stopChannel ch                  ; stop channel          ' 75    | (153)
0333   0000~            
0334   0000~            .end
0335   0000~            
0336   0000                         endm
0337   0000             
0338   0000             
0339   0000             ; compareReadWrite
0340   0000             ; ----------------
0341   0000             ; read buffer  -> BC'
0342   0000             ; write buffer -> DE
0343   0000             ;                 ZF ->  Write == Read buffer
0344   0000             ;
0345   0000             ; compare read and write buffer
0346   0000             ; = 16 cycles
0347   0000             
0348   0000                         macro compareReadWrite
0349   0000~            
0350   0000~                        EXX                     ;                           ' 4     |
0351   0000~                        LD      A, B            ; A = read buffer high      ' 4     |
0352   0000~                        EXX                     ;                           ' 4     | 16
0353   0000~                        CP      D               ; compare write buffer high ' 4     |
0354   0000~            
0355   0000                         endm
0356   0000             
0357   0000             
0358   0000             ; readAndClear
0359   0000             ; ------------
0360   0000             ; point to sample source (ROM) ->  HL  ->  point to sample source (ROM)
0361   0000             ; point to write buffer        ->  DE  ->  point to write buffer
0362   0000             ; ?                            ->  PF  ->  0=done 1=not done
0363   0000             ;
0364   0000             ; read 1 sample from rom and write it in output buffer
0365   0000             ; = 19 cycles
0366   0000             
0367   0000                         macro readAndClear
0368   0000~            
0369   0000~                        LDI                     ;                           ' 16+3  | 19
0370   0000~            
0371   0000                         endm
0372   0000             
0373   0000             
0374   0000             ; readAndClear2
0375   0000             ; -------------
0376   0000             ; point to sample source (ROM) ->  HL  ->  point to sample source (ROM)
0377   0000             ; point to write buffer        ->  DE  ->  point to write buffer
0378   0000             ; ?                            ->  PF  ->  0=done 1=not done
0379   0000             ;
0380   0000             ; read 2 samples from rom and write them in write buffer
0381   0000             ; = 38 cycles
0382   0000             
0383   0000                         macro readAndClear2
0384   0000~            
0385   0000~                        LDI                     ;                           ' 16+3  |
0386   0000~                        LDI                     ;                           ' 16+3  | (38)
0387   0000~            
0388   0000                         endm
0389   0000             
0390   0000             
0391   0000             ; readAndMix2
0392   0000             ; -----------
0393   0000             ; point to sample source (ROM) ->  SP  ->  point to sample source (ROM)
0394   0000             ; point to write buffer        ->  HL  ->  point to write buffer
0395   0000             ; $80 ->  C
0396   0000             ;
0397   0000             ; read 2 samples and mix them in output buffer
0398   0000             ; = 80 (+22 when overflow)
0399   0000             
0400   0000                         macro readAndMix2
0401   0000~            
0402   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
0403   0000~            
0404   0000~                        LD      A, E            ; first sample              ' 4     |
0405   0000~                        ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
0406   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0407   0000~            
0408   0000~                        LD      A, C            ; fix overflow              ' 4     |
0409   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0410   0000~            
0411   0000~            .ok
0412   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0413   0000~                        INC     L               ;                           ' 4     | 11 (48)
0414   0000~            
0415   0000~                        LD      A, D            ; second sample             ' 4     |
0416   0000~                        ADD     (HL)            ; mix                       ' 7     | 21 (69)
0417   0000~                        JP      PO, .ok2        ; check overflow            ' 10    |
0418   0000~            
0419   0000~                        LD      A, C            ; fix overflow              ' 4     |
0420   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0421   0000~            
0422   0000~            .ok2
0423   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0424   0000~                        INC     L               ;                           ' 4     | 11 (80)
0425   0000~            
0426   0000                         endm                    ;                           ' 80 (+22)
0427   0000             
0428   0000             
0429   0000             ; readAndMix16WhilePlay3
0430   0000             ; ----------------------
0431   0000             ; point to sample source (ROM) ->  SP  ->  point to sample source (ROM)
0432   0000             ; point to write buffer        ->  HL  ->  point to write buffer
0433   0000             ; $80 ->  C
0434   0000             ;
0435   0000             ; read 16 samples and mix them in output buffer
0436   0000             ; = 2 samples + 240 cycles
0437   0000             
0438   0000                         macro readAndMix16WhilePlay3
0439   0000~            
0440   0000~                        sampleOutput            ;                           ' 36    | (36)
0441   0000~            
0442   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    |
0443   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    | 160 (196)
0444   0000~            
0445   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+6  | (212)
0446   0000~            
0447   0000~                        LD      A, E            ; first sample              ' 4     |
0448   0000~                        ADD     (HL)            ; mix with write buffer     ' 7     | 21 (233)
0449   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0450   0000~            
0451   0000~                        LD      A, C            ; fix overflow              ' 4     |
0452   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0453   0000~            
0454   0000~            .ok
0455   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0456   0000~                        INC     L               ;                           ' 4     | 11 (254-10)
0457   0000~            
0458   0000~                        sampleOutput            ; -10 --> too soon          ' 36    | (36-10)
0459   0000~            
0460   0000~                        LD      A, D            ; second sample             ' 4     |
0461   0000~                        ADD     (HL)            ; mix                       ' 7     | 21 (47)
0462   0000~                        JP      PO, .ok2        ; check overflow            ' 10    |
0463   0000~            
0464   0000~                        LD      A, C            ; fix overflow              ' 4     |
0465   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0466   0000~            
0467   0000~            .ok2
0468   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0469   0000~                        INC     L               ;                           ' 4     | 11 (58)
0470   0000~            
0471   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    |
0472   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    | 160 (218)
0473   0000~            
0474   0000~                        POP     DE              ; read 2 samples from ROM   ' 10+6  | (234)
0475   0000~            
0476   0000~                        LD      A, E            ; first sample              ' 4     |
0477   0000~                        ADD     (HL)            ; mix with write buffer     ' 7     | 21 (254+1)
0478   0000~                        JP      PO, .ok3        ; check overflow            ' 10    |
0479   0000~            
0480   0000~                        LD      A, C            ; fix overflow              ' 4     |
0481   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0482   0000~            
0483   0000~            .ok3
0484   0000~                        LD      (HL), A         ; store it in write sample  ' 7     | (254+8)
0485   0000~            
0486   0000~                        sampleOutput            ; +8 --> too late           ' 36    | (36+8)
0487   0000~            
0488   0000~                        INC     L               ;                           ' 4     | (48)
0489   0000~            
0490   0000~                        LD      A, D            ; second sample             ' 4     |
0491   0000~                        ADD     (HL)            ; mix                       ' 7     | 21 (69)
0492   0000~                        JP      PO, .ok4        ; check overflow            ' 10    |
0493   0000~            
0494   0000~                        LD      A, C            ; fix overflow              ' 4     |
0495   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0496   0000~            
0497   0000~            .ok4
0498   0000~                        LD      (HL), A         ; store it in write sample  ' 7     |
0499   0000~                        INC     L               ;                           ' 4     | 11 (80)
0500   0000~            
0501   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    |
0502   0000~                        readAndMix2             ; read and mix 2 samples    ' 80    | 160 (240)
0503   0000~            
0504   0000                         endm                    ;                           ' 240
0505   0000             
0506   0000             
0507   0000             ; readMixAndUnsign
0508   0000             ; ----------------
0509   0000             ; point to sample source (ROM) ->  HL  ->  point to sample source (ROM)
0510   0000             ; point to write buffer        ->  DE  ->  point to write buffer
0511   0000             ; $80 ->  C
0512   0000             ;
0513   0000             ; read 1 sample and mix it with output buffer, then unsign it
0514   0000             ; = 46 (+11 when overflow)
0515   0000             
0516   0000                         macro readMixAndUnsign
0517   0000~            
0518   0000~                        LD      A, (DE)         ; read value in write buf   ' 7     |
0519   0000~                        ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
0520   0000~                        JP      PO, .ok         ; check overflow            ' 10    |
0521   0000~            
0522   0000~                        LD      A, C            ; fix overflow              ' 4     |
0523   0000~                        ADC     $FF             ; A = $7F/$80               ' 7     | +11
0524   0000~            
0525   0000~            .ok
0526   0000~                        ADD     C               ; unsign                    ' 4     |
0527   0000~                        LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
0528   0000~                        INC     E               ;                           ' 4     |
0529   0000~                        INC     L               ; next                      ' 4     |
0530   0000~            
0531   0000                         endm                    ;                           ' 46 (+11)
0532   0000             
0533   0000             
0534   0000             ; sampleOutput
0535   0000             ; ------------
0536   0000             ; YMPORT0     -> HL'
0537   0000             ; YMPORT1     -> DE'
0538   0000             ; read buffer -> BC' ->  read buffer
0539   0000             ;
0540   0000             ; output a sample to the DAC
0541   0000             ; = 36 cycles
0542   0000             
0543   0000                         macro sampleOutput
0544   0000~            
0545   0000~                        EXX                     ;                           ' 4     | 4
0546   0000~            
0547   0000~                        LD      A, (BC)         ; read sample from buffer   ' 7     |
0548   0000~                        INC     BC              ; increment read address    ' 6     |
0549   0000~                        RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0550   0000~                        LD      (DE), A         ; play sample               ' 7     |
0551   0000~            
0552   0000~                        EXX                     ;                           ' 4     | (36)
0553   0000~            
0554   0000                         endm
0555   0000             
0556   0000             
0557   0000             ; sampleOutputSafe
0558   0000             ; ----------------
0559   0000             ; YMPORT0     -> HL'
0560   0000             ; YMPORT1     -> DE'
0561   0000             ; read buffer -> BC' ->  read buffer
0562   0000             ;
0563   0000             ; output a sample to the DAC
0564   0000             ; = 46 cycles
0565   0000             
0566   0000                         macro sampleOutputSafe
0567   0000~            
0568   0000~                        EXX                     ;                           ' 4     | 4
0569   0000~            
0570   0000~                        LD      (HL), $2A       ; prepare DAC write         ' 10    |
0571   0000~                        LD      A, (BC)         ; read sample from buffer   ' 7     |
0572   0000~                        INC     BC              ; increment read address    ' 6     | 38 (42)
0573   0000~                        RES     2, B            ; read_address &= 0x03FF    ' 8     |
0574   0000~                        LD      (DE), A         ; play sample               ' 7     |
0575   0000~            
0576   0000~                        EXX                     ;                           ' 4     | (46)
0577   0000~            
0578   0000                         endm
0579   0000             
0580   0000             
0581   0000             ; waitYMReadyFast
0582   0000             ; ---------------
0583   0000             ; YMPORT0   -> HL
0584   0000             ;
0585   0000             ; wait until YM ready
0586   0000             ; = 22 cycles minimum (22 * X)
0587   0000             
0588   0000                         macro waitYMReadyFast
0589   0000~            
0590   0000~            .wait
0591   0000~                        BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
0592   0000~                        JP      NZ, .wait       ; wait while busy           ' 10    |
0593   0000~            
0594   0000                         endm
0595   0000             
0596   0000             
0597   0000             ; waitYMReady
0598   0000             ; -----------
0599   0000             ; YMPORT0   -> HL'
0600   0000             ;
0601   0000             ; wait until YM ready
0602   0000             ; = 30 cycles minimum (8 + (22 * X))
0603   0000             
0604   0000                         macro waitYMReady
0605   0000~            
0606   0000~                        EXX                     ;                           ' 4     | (4)
0607   0000~            
0608   0000~            .wait
0609   0000~                        BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
0610   0000~                        JP      NZ, .wait       ; wait while busy           ' 10    |
0611   0000~            
0612   0000~                        EXX                     ;                           ' 4     | (30)
0613   0000~            
0614   0000                         endm
0615   0000             
0616   0000             
0617   0000             ; ###########################       init       ##############################
0618   0000             
0619   0000                         ORG     $0000
0620   0000             
0621   0000             init
0622   0000 F3                      DI                      ; disable ints
0623   0001 31 00 16                LD      SP, STACK       ; setup stack
0624   0004 ED 56                   IM      $01             ; set int mode 1
0625   0006 AF                      XOR     A
0626   0007 32 02 01                LD      (STATUS), A     ; driver not ready
0627   000A 32 00 01                LD      (COMMAND), A    ; command cleared
0628   000D C3 00 02                JP      start           ; jump to start
0629   0010             
0630   0010             
0631   0010             ; ###########################       main       ##############################
0632   0010             
0633   0010 00                      BLOCK   $0200-$
0634   0200             
0635   0200             start
0636   0200             
0637   0200 21 04 01                LD      HL, PARAMS
0638   0203 3E 00                   LD      A, $00
0639   0205 06 40                   LD      B, $40
0640   0207             
0641   0207             cp_loop
0642   0207 77                      LD      (HL), A         ; clear parameters
0643   0208 23                      INC     HL
0644   0209 10 FC                   DJNZ    cp_loop
0645   020B             
0646   020B 21 64 01                LD      HL, YM_RR_OFF
0647   020E 3E FF                   LD      A, $FF
0648   0210 06 18                   LD      B, (6 * 4)
0649   0212             
0650   0212             off_loop
0651   0212 77                      LD      (HL), A         ; clear off settings
0652   0213 23                      INC     HL
0653   0214 10 FC                   DJNZ    off_loop
0654   0216             
0655   0216 21 7C 01                LD      HL, PSG_ENV_OFF
0656   0219             
0657   0219 36 9F                   LD      (HL), $9F       ; PSG channel 0 off
0658   021B 23                      INC     HL
0659   021C 36 BF                   LD      (HL), $BF       ; PSG channel 1 off
0660   021E 23                      INC     HL
0661   021F 36 DF                   LD      (HL), $DF       ; PSG channel 2 off
0662   0221 23                      INC     HL
0663   0222 36 FF                   LD      (HL), $FF       ; PSG channel 3 off
0664   0224             
0665   0224 21 64 01                LD      HL, YM_RR_OFF
0666   0227 11 44 01                LD      DE, YM_RR_SAV
0667   022A 01 1C 00                LD      BC, (6 * 4) + 4
0668   022D ED B0                   LDIR                    ; copy off settings to sav settings
0669   022F             
0670   022F 21 00 18                LD      HL, PCM_BUFFER
0671   0232 3E 80                   LD      A, $80
0672   0234 06 00                   LD      B, $00          ; for 256 * 4 bytes to clear
0673   0236             
0674   0236             cb_loop
0675   0236 77                      LD      (HL), A         ; initialise buffers to silent
0676   0237 23                      INC     HL
0677   0238 77                      LD      (HL), A
0678   0239 23                      INC     HL
0679   023A 77                      LD      (HL), A
0680   023B 23                      INC     HL
0681   023C 77                      LD      (HL), A
0682   023D 23                      INC     HL
0683   023E 10 F6                   DJNZ    cb_loop
0684   0240             
0685   0240 3E 00                   LD      A, $00
0686   0242             
0687   0242 21 60 01                LD      HL, YM_2B_SAV
0688   0245 77                      LD      (HL), A         ; DAC disabled by default
0689   0246 21 61 01                LD      HL, YM_2B_CNT
0690   0249 77                      LD      (HL), A         ; DAC disabled by default
0691   024A             
0692   024A 21 12 01                LD      HL, MODIFYING_F
0693   024D 77                      LD      (HL), A         ; clear modifying variable flag
0694   024E 21 13 01                LD      HL, PENDING_FRM
0695   0251 77                      LD      (HL), A         ; clear frame to process counter
0696   0252             
0697   0252 CD BB 14                CALL    initDAC         ; prepare DAC for output
0698   0255             
0699   0255 21 00 18                LD      HL, PCM_BUFFER0 ; initialise write and read buffer
0700   0258 22 38 01                LD      (WRITEBUF), HL
0701   025B 21 00 19                LD      HL, PCM_BUFFER1
0702   025E 22 3A 01                LD      (READBUF), HL
0703   0261             
0704   0261 44 4D                   LD      BC, HL          ; BC' point to read buffer
0705   0263 21 00 40                LD      HL, YMPORT0     ; HL' point to YMPORT0
0706   0266 11 01 40                LD      DE, YMPORT1     ; DE' point to YMPORT1
0707   0269 D9                      EXX
0708   026A             
0709   026A                         stopChannel 0           ; stop all channels
0709   026A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0709   026D 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0709   0270 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0709   0273 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0709   0276 AF          >            XOR     A                       ;                           ' 4     |
0709   0277 32 14 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0710   027A                         stopChannel 1
0710   027A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0710   027D 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0710   0280 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0710   0283 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0710   0286 AF          >            XOR     A                       ;                           ' 4     |
0710   0287 32 1C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0711   028A                         stopChannel 2
0711   028A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0711   028D 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0711   0290 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0711   0293 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0711   0296 AF          >            XOR     A                       ;                           ' 4     |
0711   0297 32 24 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0712   029A                         stopChannel 3
0712   029A 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
0712   029D 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
0712   02A0 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
0712   02A3 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
0712   02A6 AF          >            XOR     A                       ;                           ' 4     |
0712   02A7 32 2C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
0713   02AA             
0714   02AA 3E 80                   LD      A, STATREADY
0715   02AC 32 02 01                LD      (STATUS), A     ; driver ready
0716   02AF             
0717   02AF             main_loop
0718   02AF             
0719   02AF             ;    LD  A, (VCOUNTER)
0720   02AF             ;    LD  (DEBUG_1), A
0721   02AF             
0722   02AF             
0723   02AF             ; prepare XGM buffer
0724   02AF             ; ------------------
0725   02AF             
0726   02AF             ; $00
0727   02AF             
0728   02AF             
0729   02AF                         sampleOutput                ;                       ' 36    | 36
0729   02AF D9          >            EXX                     ;                           ' 4     | 4
0729   02B0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0729   02B1 03          >            INC     BC              ; increment read address    ' 6     |
0729   02B2 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0729   02B4 12          >            LD      (DE), A         ; play sample               ' 7     |
0729   02B5 D9          >            EXX                     ;                           ' 4     | (36)
0730   02B6             
0731   02B6 11 00 17                LD      DE, XGM_BUFFER      ; DE point to XGM buf   ' 10    |
0732   02B9 3A 02 01                LD      A, (STATUS)         ; A = STATUS            ' 13    |
0733   02BC CB 77                   BIT     XGM_PLAY_SFT, A     ; is XGM playing ?      ' 8     | 41 (77)
0734   02BE C2 CA 02                JP      NZ, has_xgm         ; go to prepare buf     ' 10    |
0735   02C1             
0736   02C1                         wait146                     ; sync                  ' 146   |
0736   02C1 3E 09       >            LD      A, w            ; 7-2
0736   02C3 3D          >            DEC     A               ; 4
0736   02C4 20 FD       >            JR      NZ, .loop       ; 12
0737   02C6 AF                      XOR     A                   ; A = 0                 ' 4     | 160 (237)
0738   02C7 C3 D8 04                JP      end_prep_xgm        ; preparation done      ' 10    |
0739   02CA             
0740   02CA             has_xgm
0741   02CA 2A 34 01                LD      HL, (XGM_ADDR)      ; XGM addr (b0-b15)     ' 16    |
0742   02CD 7C                      LD      A, H                ; A = XGM addr (b8-b15) ' 4     |
0743   02CE 17                      RLA                         ; CF = XGM addr b15     ' 4     | 146 (223)
0744   02CF 3A 36 01                LD      A, (XGM_ADDR+2)     ; A = sample addr (H)   ' 13    |
0745   02D2 17                      RLA                         ; sample addr (b22-b15) ' 4     |
0746   02D3                         setBank_BC                  ; setBank               ' 105   |
0746   02D3 01 00 60    >            LD  BC, BANKREG         ; BC = BANKREG              ' 10
0746   02D6 02          >            LD  (BC), A             ; #1 (bit 15)               ' 7
0746   02D7 1F          >            RRA                     ;                           ' 4
0746   02D8 02          >            LD  (BC), A             ; #2 (bit 16)               ' 7
0746   02D9 1F          >            RRA                     ;                           ' 4
0746   02DA 02          >            LD  (BC), A             ; #3 (bit 17)               ' 7
0746   02DB 1F          >            RRA                     ;                           ' 4
0746   02DC 02          >            LD  (BC), A             ; #4 (bit 18)               ' 7
0746   02DD 1F          >            RRA                     ;                           ' 4
0746   02DE 02          >            LD  (BC), A             ; #5 (bit 19)               ' 7
0746   02DF 1F          >            RRA                     ;                           ' 4
0746   02E0 02          >            LD  (BC), A             ; #6 (bit 20)               ' 7
0746   02E1 1F          >            RRA                     ;                           ' 4
0746   02E2 02          >            LD  (BC), A             ; #7 (bit 21)               ' 7
0746   02E3 1F          >            RRA                     ;                           ' 4
0746   02E4 02          >            LD  (BC), A             ; #8 (bit 22)               ' 7
0746   02E5 1F          >            RRA                     ;                           ' 4
0746   02E6 02          >            LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0747   02E7             
0748   02E7 7C                      LD      A, H                ; save H                ' 4     |
0749   02E8 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0750   02EA 06 00                   LD      B, $0               ; B = 0                 ' 7     | 30 (254-1)
0751   02EC 4E                      LD      C, (HL)             ; BC = bytes to process ' 7     |
0752   02ED 67                      LD      H, A                ; restore H             ' 4     |
0753   02EE             
0754   02EE             ; $00+X
0755   02EE                         sampleOutput                ;                       ' 36    | (36-1)
0755   02EE D9          >            EXX                     ;                           ' 4     | 4
0755   02EF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0755   02F0 03          >            INC     BC              ; increment read address    ' 6     |
0755   02F1 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0755   02F3 12          >            LD      (DE), A         ; play sample               ' 7     |
0755   02F4 D9          >            EXX                     ;                           ' 4     | (36)
0756   02F5             
0757   02F5 7D                      LD      A, L                ; A = addr low          ' 4     |
0758   02F6 81                      ADD     C                   ; compute new addr (L)  ' 4     |
0759   02F7 32 34 01                LD      (XGM_ADDR+0), A     ; store new addr (L)    ' 13    | 28 (63)
0760   02FA 38 1A                   JR      C, .split           ; carry --> separate    ' 7     |
0761   02FC             
0762   02FC             .no_split
0763   02FC                         wait104                     ; sync                  ' 104   | (167)
0763   02FC 3E 05       >            LD      A, w            ; 7-2
0763   02FE 3D          >            DEC     A               ; 4
0763   02FF 20 FD       >            JR      NZ, .loop       ; 12
0763   0301 ED 4F       >            LD      R, A
0763   0303 ED 4F       >            LD      R, A
0763   0305 00          >            NOP
0764   0306             
0765   0306 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0766   0308 23                      INC     HL                  ; HL = start frame data ' 6     |
0767   0309 AF                      XOR     A                   ; no second part        ' 4     |
0768   030A FD 67                   LD      IYH, A              ; IYH = sec part size   ' 8     | 44 (211)
0769   030C 00                      NOP                         ;                       ' 4     |
0770   030D 0D                      DEC     C                   ; first part size = 0 ? ' 4     |
0771   030E CA F5 03                JP      Z, .second_part     ; go to second part     ' 10    |
0772   0311             
0773   0311                         wait12                      ; sync                  ' 12    | 22 (233)
0773   0311 18 00       >            JR      .loop
0774   0313 C3 54 03                JP      .first_part_pre     ; start filling         ' 10    |
0775   0316             
0776   0316             .split
0777   0316 FD 67                   LD      IYH, A              ; IYH = sec part size   ' 8     |
0778   0318 91                      SUB     C                   ;                       ' 4     |
0779   0319 ED 44                   NEG                         ;                       ' 8     | 34 (97)
0780   031B 3D                      DEC     A                   ; A = (C - IYH) - 1     ' 4     |
0781   031C C2 3A 03                JP      NZ, .first_part_ok  ; not zero --> do it    ' 10    |
0782   031F             
0783   031F 7C                      LD      A, H                ; A = addr med (M)      ' 4     |
0784   0320 C6 01                   ADD     $1                  ; inc with CF set       ' 7     |
0785   0322 32 35 01                LD      (XGM_ADDR+1), A     ; store new addr (M)    ' 13    |
0786   0325 3A 36 01                LD      A, (XGM_ADDR+2)     ; load sample addr (H)  ' 13    |
0787   0328 88                      ADC     B                   ; inc                   ' 4     | 68 (164)
0788   0329 32 36 01                LD      (XGM_ADDR+2), A     ; store sample addr (H) ' 13    |
0789   032C CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0790   032E 23                      INC     HL                  ; HL = start frame data ' 6     |
0791   032F             
0792   032F                         wait36                      ; sync                  ' 36    |
0792   032F ED 4F       >            LD      R, A
0792   0331 ED 4F       >            LD      R, A
0792   0333 ED 4F       >            LD      R, A
0792   0335 ED 4F       >            LD      R, A
0793   0337 C3 F5 03                JP      .second_part        ; go second part        ' 10    | 65 (211)
0794   033A             
0795   033A             .first_part_ok
0796   033A 4F                      LD      C, A                ; C = first part size   ' 4     |
0797   033B 7C                      LD      A, H                ; A = addr med (M)      ' 4     |
0798   033C C6 01                   ADD     $1                  ; inc with CF set       ' 7     |
0799   033E 32 35 01                LD      (XGM_ADDR+1), A     ; store new addr (M)    ' 13    |
0800   0341 3A 36 01                LD      A, (XGM_ADDR+2)     ; load sample addr (H)  ' 13    | 72 (169)
0801   0344 88                      ADC     B                   ; inc                   ' 4     |
0802   0345 32 36 01                LD      (XGM_ADDR+2), A     ; store sample addr (H) ' 13    |
0803   0348 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     |
0804   034A 23                      INC     HL                  ; HL = start frame data ' 6     |
0805   034B             
0806   034B                         wait64                      ; sync                  ' 64    | (233)
0806   034B 3E 03       >            LD      A, w            ; 7-2
0806   034D 3D          >            DEC     A               ; 4
0806   034E 20 FD       >            JR      NZ, .loop       ; 12
0806   0350 3E 00       >            LD      A, $0
0806   0352 3E 00       >            LD      A, $0
0807   0354             
0808   0354             .first_part_pre                         ;                       ' 233
0809   0354 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0810   0356 B9                      CP      C                   ; C < block size        ' 4     | 21 (254)
0811   0357 D2 80 03                JP      NC, .first_part_end ; go to last bytes      ' 10    |
0812   035A             
0813   035A             .first_part
0814   035A             ; $00+X
0815   035A                         sampleOutput                ;                       ' 36    | 36
0815   035A D9          >            EXX                     ;                           ' 4     | 4
0815   035B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0815   035C 03          >            INC     BC              ; increment read address    ' 6     |
0815   035D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0815   035F 12          >            LD      (DE), A         ; play sample               ' 7     |
0815   0360 D9          >            EXX                     ;                           ' 4     | (36)
0816   0361             
0817   0361 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0818   0363 ED A0                   LDI                         ; 11 bytes at once      ' 16+1  |
0819   0365 ED A0                   LDI                         ;                       ' 16+1  |
0820   0367 ED A0                   LDI                         ;                       ' 16+1  |
0821   0369 ED A0                   LDI                         ;                       ' 16+1  |
0822   036B ED A0                   LDI                         ;                       ' 16+1  | 187 (223)
0823   036D ED A0                   LDI                         ;                       ' 16+1  |
0824   036F ED A0                   LDI                         ;                       ' 16+1  |
0825   0371 ED A0                   LDI                         ;                       ' 16+1  |
0826   0373 ED A0                   LDI                         ;                       ' 16+1  |
0827   0375 ED A0                   LDI                         ;                       ' 16+1  |
0828   0377             
0829   0377                         wait10                      ; sync                  ' 10    |
0829   0377 C3 7A 03    >            JP      .loop
0830   037A 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0831   037C B9                      CP      C                   ; remaining > 11        ' 4     | 31 (254)
0832   037D DA 5A 03                JP      C, .first_part      ; continu block fill    ' 10    |
0833   0380             
0834   0380             .first_part_end
0835   0380             ; $00+X
0836   0380                         sampleOutput                ;                       ' 36    | 36
0836   0380 D9          >            EXX                     ;                           ' 4     | 4
0836   0381 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0836   0382 03          >            INC     BC              ; increment read address    ' 6     |
0836   0383 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0836   0385 12          >            LD      (DE), A         ; play sample               ' 7     |
0836   0386 D9          >            EXX                     ;                           ' 4     | (36)
0837   0387             
0838   0387 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0839   0389 E2 D4 03                JP      PO, .fst_part_d0    ;                       ' 10    | 27 (63)
0840   038C ED A0                   LDI                         ;                       ' 16+1  |
0841   038E E2 DA 03                JP      PO, .fst_part_d1    ;                       ' 10    | 27 (90)
0842   0391 ED A0                   LDI                         ;                       ' 16+1  |
0843   0393 E2 E0 03                JP      PO, .fst_part_d2    ;                       ' 10    | 27 (117)
0844   0396 ED A0                   LDI                         ;                       ' 16+1  |
0845   0398 E2 E6 03                JP      PO, .fst_part_d3    ;                       ' 10    | 27 (144)
0846   039B ED A0                   LDI                         ;                       ' 16+1  |
0847   039D E2 EC 03                JP      PO, .fst_part_d4    ;                       ' 10    | 27 (171)
0848   03A0 ED A0                   LDI                         ;                       ' 16+1  |
0849   03A2 E2 F2 03                JP      PO, .fst_part_d5    ;                       ' 10    | 27 (198)
0850   03A5             
0851   03A5                         wait56                      ; sync                  ' 56    | (254)
0851   03A5 3E 02       >            LD      A, w            ; 7-2
0851   03A7 3D          >            DEC     A               ; 4
0851   03A8 20 FD       >            JR      NZ, .loop       ; 12
0851   03AA ED 4F       >            LD      R, A
0851   03AC ED 4F       >            LD      R, A
0851   03AE 00          >            NOP
0852   03AF             
0853   03AF             ; $00+X
0854   03AF                         sampleOutput                ;                       ' 36    | 36
0854   03AF D9          >            EXX                     ;                           ' 4     | 4
0854   03B0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0854   03B1 03          >            INC     BC              ; increment read address    ' 6     |
0854   03B2 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0854   03B4 12          >            LD      (DE), A         ; play sample               ' 7     |
0854   03B5 D9          >            EXX                     ;                           ' 4     | (36)
0855   03B6             
0856   03B6 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0857   03B8 E2 D4 03                JP      PO, .fst_part_d0    ;                       ' 10    | 27 (63)
0858   03BB ED A0                   LDI                         ;                       ' 16+1  |
0859   03BD E2 DA 03                JP      PO, .fst_part_d1    ;                       ' 10    | 27 (90)
0860   03C0 ED A0                   LDI                         ;                       ' 16+1  |
0861   03C2 E2 E0 03                JP      PO, .fst_part_d2    ;                       ' 10    | 27 (117)
0862   03C5 ED A0                   LDI                         ;                       ' 16+1  |
0863   03C7 E2 E6 03                JP      PO, .fst_part_d3    ;                       ' 10    | 27 (144)
0864   03CA ED A0                   LDI                         ;                       ' 16+1  |
0865   03CC E2 EC 03                JP      PO, .fst_part_d4    ;                       ' 10    | 27 (171)
0866   03CF ED A0                   LDI                         ;                       ' 16+1  |
0867   03D1 C3 F2 03                JP      .fst_part_d5        ;                       ' 10    | 27 (198)
0868   03D4             
0869   03D4             .fst_part_d0
0870   03D4                         wait27                      ; sync                  ' 27    | (90)
0870   03D4 ED 4F       >            LD      R, A
0870   03D6 ED 4F       >            LD      R, A
0870   03D8 ED 4F       >            LD      R, A
0871   03DA             .fst_part_d1
0872   03DA                         wait27                      ; sync                  ' 27    | (117)
0872   03DA ED 4F       >            LD      R, A
0872   03DC ED 4F       >            LD      R, A
0872   03DE ED 4F       >            LD      R, A
0873   03E0             .fst_part_d2
0874   03E0                         wait27                      ; sync                  ' 27    | (144)
0874   03E0 ED 4F       >            LD      R, A
0874   03E2 ED 4F       >            LD      R, A
0874   03E4 ED 4F       >            LD      R, A
0875   03E6             .fst_part_d3
0876   03E6                         wait27                      ; sync                  ' 27    | (171)
0876   03E6 ED 4F       >            LD      R, A
0876   03E8 ED 4F       >            LD      R, A
0876   03EA ED 4F       >            LD      R, A
0877   03EC             .fst_part_d4
0878   03EC                         wait27                      ; sync                  ' 27    | (198)
0878   03EC ED 4F       >            LD      R, A
0878   03EE ED 4F       >            LD      R, A
0878   03F0 ED 4F       >            LD      R, A
0879   03F2             .fst_part_d5
0880   03F2                         wait13                      ; sync                  ' 13    | (211)
0880   03F2 ED 4F       >            LD      R, A
0880   03F4 00          >            NOP
0881   03F5             
0882   03F5             .second_part                            ;                       ' 211
0883   03F5 00                      NOP                         ; sync                  ' 4
0884   03F6 FD 7C                   LD      A, IYH              ; A = second part size  ' 8     |
0885   03F8 B7                      OR      A                   ;                       ' 4     | 26 (237)
0886   03F9 CA D8 04                JP      Z, end_prep_xgm     ; done                  ' 10    |
0887   03FC             
0888   03FC                         wait17                      ; sync                  ' 17    | 254
0888   03FC C3 FF 03    >            JP      .loop
0888   03FF 3E 00       >            LD      A, $0
0889   0401             
0890   0401             ; $00+X
0891   0401                         sampleOutput                ;                       ' 36    | 36
0891   0401 D9          >            EXX                     ;                           ' 4     | 4
0891   0402 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0891   0403 03          >            INC     BC              ; increment read address    ' 6     |
0891   0404 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0891   0406 12          >            LD      (DE), A         ; play sample               ' 7     |
0891   0407 D9          >            EXX                     ;                           ' 4     | (36)
0892   0408             
0893   0408 2A 34 01                LD      HL, (XGM_ADDR)      ; XGM addr (b0-b15)     ' 16    |
0894   040B 7C                      LD      A, H                ; A = XGM addr (b8-b15) ' 4     |
0895   040C 17                      RLA                         ; CF = XGM addr b15     ' 4     | 146 (182)
0896   040D 3A 36 01                LD      A, (XGM_ADDR+2)     ; A = sample addr (H)   ' 13    |
0897   0410 17                      RLA                         ; sample addr (b22-b15) ' 4     |
0898   0411                         setBank_BC                  ; setBank               ' 105   |
0898   0411 01 00 60    >            LD  BC, BANKREG         ; BC = BANKREG              ' 10
0898   0414 02          >            LD  (BC), A             ; #1 (bit 15)               ' 7
0898   0415 1F          >            RRA                     ;                           ' 4
0898   0416 02          >            LD  (BC), A             ; #2 (bit 16)               ' 7
0898   0417 1F          >            RRA                     ;                           ' 4
0898   0418 02          >            LD  (BC), A             ; #3 (bit 17)               ' 7
0898   0419 1F          >            RRA                     ;                           ' 4
0898   041A 02          >            LD  (BC), A             ; #4 (bit 18)               ' 7
0898   041B 1F          >            RRA                     ;                           ' 4
0898   041C 02          >            LD  (BC), A             ; #5 (bit 19)               ' 7
0898   041D 1F          >            RRA                     ;                           ' 4
0898   041E 02          >            LD  (BC), A             ; #6 (bit 20)               ' 7
0898   041F 1F          >            RRA                     ;                           ' 4
0898   0420 02          >            LD  (BC), A             ; #7 (bit 21)               ' 7
0898   0421 1F          >            RRA                     ;                           ' 4
0898   0422 02          >            LD  (BC), A             ; #8 (bit 22)               ' 7
0898   0423 1F          >            RRA                     ;                           ' 4
0898   0424 02          >            LD  (BC), A             ; #9 (bit 23 = 0)           ' 7
0899   0425             
0900   0425 CB FC                   SET     7, H                ; HL = XGM addr bank    ' 8     | 15 (197)
0901   0427 2E 00                   LD      L, 0                ;                       ' 7     |
0902   0429             
0903   0429                         wait21                      ; sync                  ' 21    | (218)
0903   0429 18 00       >            JR      .loop
0903   042B ED 4F       >            LD      R, A
0904   042D             
0905   042D 06 00                   LD      B, 0                ; B = 0                 ' 7     |
0906   042F FD 4C                   LD      C, IYH              ; BC = second part size ' 8     |
0907   0431 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     | 36 (254)
0908   0433 B9                      CP      C                   ; C < block size        ' 4     |
0909   0434 D2 5D 04                JP      NC, .sec_part_end   ; go to last bytes      ' 10    |
0910   0437             
0911   0437             ; $00+X
0912   0437             .sec_part_loop
0913   0437                         sampleOutput                ;                       ' 36    | 36
0913   0437 D9          >            EXX                     ;                           ' 4     | 4
0913   0438 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0913   0439 03          >            INC     BC              ; increment read address    ' 6     |
0913   043A CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0913   043C 12          >            LD      (DE), A         ; play sample               ' 7     |
0913   043D D9          >            EXX                     ;                           ' 4     | (36)
0914   043E             
0915   043E ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0916   0440 ED A0                   LDI                         ; 11 bytes at once      ' 16+1  |
0917   0442 ED A0                   LDI                         ;                       ' 16+1  |
0918   0444 ED A0                   LDI                         ;                       ' 16+1  |
0919   0446 ED A0                   LDI                         ;                       ' 16+1  |
0920   0448 ED A0                   LDI                         ;                       ' 16+1  | 187 (223)
0921   044A ED A0                   LDI                         ;                       ' 16+1  |
0922   044C ED A0                   LDI                         ;                       ' 16+1  |
0923   044E ED A0                   LDI                         ;                       ' 16+1  |
0924   0450 ED A0                   LDI                         ;                       ' 16+1  |
0925   0452 ED A0                   LDI                         ;                       ' 16+1  |
0926   0454             
0927   0454                         wait10                      ; sync                  ' 10    |
0927   0454 C3 57 04    >            JP      .loop
0928   0457 3E 0B                   LD      A, 11               ; A = block fill size   ' 7     |
0929   0459 B9                      CP      C                   ; remaining > 11        ' 4     | 31 (254)
0930   045A DA 37 04                JP      C, .sec_part_loop   ; continu block fill    ' 10    |
0931   045D             
0932   045D             .sec_part_end
0933   045D             ; $00+X
0934   045D                         sampleOutput                ;                       ' 36    | 36
0934   045D D9          >            EXX                     ;                           ' 4     | 4
0934   045E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0934   045F 03          >            INC     BC              ; increment read address    ' 6     |
0934   0460 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0934   0462 12          >            LD      (DE), A         ; play sample               ' 7     |
0934   0463 D9          >            EXX                     ;                           ' 4     | (36)
0935   0464             
0936   0464 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0937   0466 E2 B1 04                JP      PO, .sec_part_d0    ;                       ' 10    | 27 (63)
0938   0469 ED A0                   LDI                         ;                       ' 16+1  |
0939   046B E2 B7 04                JP      PO, .sec_part_d1    ;                       ' 10    | 27 (90)
0940   046E ED A0                   LDI                         ;                       ' 16+1  |
0941   0470 E2 BD 04                JP      PO, .sec_part_d2    ;                       ' 10    | 27 (117)
0942   0473 ED A0                   LDI                         ;                       ' 16+1  |
0943   0475 E2 C3 04                JP      PO, .sec_part_d3    ;                       ' 10    | 27 (144)
0944   0478 ED A0                   LDI                         ;                       ' 16+1  |
0945   047A E2 C9 04                JP      PO, .sec_part_d4    ;                       ' 10    | 27 (171)
0946   047D ED A0                   LDI                         ;                       ' 16+1  |
0947   047F E2 CF 04                JP      PO, .sec_part_d5    ;                       ' 10    | 27 (198)
0948   0482             
0949   0482                         wait56                      ; sync                  ' 56    | (254)
0949   0482 3E 02       >            LD      A, w            ; 7-2
0949   0484 3D          >            DEC     A               ; 4
0949   0485 20 FD       >            JR      NZ, .loop       ; 12
0949   0487 ED 4F       >            LD      R, A
0949   0489 ED 4F       >            LD      R, A
0949   048B 00          >            NOP
0950   048C             
0951   048C             ; $00+X
0952   048C                         sampleOutput                ;                       ' 36    | 36
0952   048C D9          >            EXX                     ;                           ' 4     | 4
0952   048D 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0952   048E 03          >            INC     BC              ; increment read address    ' 6     |
0952   048F CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0952   0491 12          >            LD      (DE), A         ; play sample               ' 7     |
0952   0492 D9          >            EXX                     ;                           ' 4     | (36)
0953   0493             
0954   0493 ED A0                   LDI                         ; fill XGM buffer       ' 16+1  |
0955   0495 E2 B1 04                JP      PO, .sec_part_d0    ;                       ' 10    | 27 (63)
0956   0498 ED A0                   LDI                         ;                       ' 16+1  |
0957   049A E2 B7 04                JP      PO, .sec_part_d1    ;                       ' 10    | 27 (90)
0958   049D ED A0                   LDI                         ;                       ' 16+1  |
0959   049F E2 BD 04                JP      PO, .sec_part_d2    ;                       ' 10    | 27 (117)
0960   04A2 ED A0                   LDI                         ;                       ' 16+1  |
0961   04A4 E2 C3 04                JP      PO, .sec_part_d3    ;                       ' 10    | 27 (144)
0962   04A7 ED A0                   LDI                         ;                       ' 16+1  |
0963   04A9 E2 C9 04                JP      PO, .sec_part_d4    ;                       ' 10    | 27 (171)
0964   04AC ED A0                   LDI                         ;                       ' 16+1  |
0965   04AE C3 CF 04                JP      .sec_part_d5        ;                       ' 10    | 27 (198)
0966   04B1             
0967   04B1             .sec_part_d0
0968   04B1                         wait27                      ; sync                  '       | (90)
0968   04B1 ED 4F       >            LD      R, A
0968   04B3 ED 4F       >            LD      R, A
0968   04B5 ED 4F       >            LD      R, A
0969   04B7             .sec_part_d1
0970   04B7                         wait27                      ; sync                  '       | (117)
0970   04B7 ED 4F       >            LD      R, A
0970   04B9 ED 4F       >            LD      R, A
0970   04BB ED 4F       >            LD      R, A
0971   04BD             .sec_part_d2
0972   04BD                         wait27                      ; sync                  '       | (144)
0972   04BD ED 4F       >            LD      R, A
0972   04BF ED 4F       >            LD      R, A
0972   04C1 ED 4F       >            LD      R, A
0973   04C3             .sec_part_d3
0974   04C3                         wait27                      ; sync                  '       | (171)
0974   04C3 ED 4F       >            LD      R, A
0974   04C5 ED 4F       >            LD      R, A
0974   04C7 ED 4F       >            LD      R, A
0975   04C9             .sec_part_d4
0976   04C9                         wait27                      ; sync                  '       | (198)
0976   04C9 ED 4F       >            LD      R, A
0976   04CB ED 4F       >            LD      R, A
0976   04CD ED 4F       >            LD      R, A
0977   04CF             .sec_part_d5
0978   04CF                         wait35                      ; sync                  ' 35    |
0978   04CF 18 00       >            JR      .loop
0978   04D1 ED 4F       >            LD      R, A
0978   04D3 3E 00       >            LD      A, $0
0978   04D5 3E 00       >            LD      A, $0
0979   04D7 AF                      XOR     A                   ; A = 0                 ' 4     | 39 (237)
0980   04D8             
0981   04D8             end_prep_xgm                            ;                       ' 237
0982   04D8 12                      LD      (DE), A             ; XGM buf end with 0    ' 7     |
0983   04D9                         wait10                      ; sync                  ' 10    | 17 (254)
0983   04D9 C3 DC 04    >            JP      .loop
0984   04DC             
0985   04DC             
0986   04DC             ; XGM PREP DONE
0987   04DC             ; -------------
0988   04DC             
0989   04DC             ; $01+x
0990   04DC                         sampleOutput                ;                       ' 36    | (36)
0990   04DC D9          >            EXX                     ;                           ' 4     | 4
0990   04DD 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
0990   04DE 03          >            INC     BC              ; increment read address    ' 6     |
0990   04DF CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
0990   04E1 12          >            LD      (DE), A         ; play sample               ' 7     |
0990   04E2 D9          >            EXX                     ;                           ' 4     | (36)
0991   04E3             
0992   04E3 3A 02 01                LD      A, (STATUS)         ; A = STATUS            ' 13    |
0993   04E6 CB 77                   BIT     XGM_PLAY_SFT, A     ; XGM playing ?         ' 8     | 31 (67)
0994   04E8 C2 F7 04                JP      NZ, .inc            ; count elapsed         ' 10    |
0995   04EB             
0996   04EB                         wait71                      ; sync                  ' 71    | 81 (148)
0996   04EB 3E 03       >            LD      A, w            ; 7-2
0996   04ED 3D          >            DEC     A               ; 4
0996   04EE 20 FD       >            JR      NZ, .loop       ; 12
0996   04F0 18 00       >            JR      .loop
0996   04F2 ED 4F       >            LD      R, A
0997   04F4 C3 08 05                JP      .noinc              ; preparation done      ' 10    |
0998   04F7             
0999   04F7             .inc
1000   04F7 21 94 01                LD      HL, ELAPSED         ;                       ' 10    | (77)
1001   04FA             
1002   04FA 7E                      LD      A, (HL)             ;                       ' 7     |
1003   04FB C6 01                   ADD     A, #1               ;                       ' 7     |
1004   04FD 77                      LD      (HL), A             ;                       ' 7     |
1005   04FE 2C                      INC     L                   ;                       ' 4     |
1006   04FF 7E                      LD      A, (HL)             ;                       ' 7     |
1007   0500 CE 00                   ADC     A, #0               ; inc elapsed frame     ' 7     | 71 (148)
1008   0502 77                      LD      (HL), A             ; (24 bit counter)      ' 7     |
1009   0503 2C                      INC     L                   ;                       ' 4     |
1010   0504 7E                      LD      A, (HL)             ;                       ' 7     |
1011   0505 CE 00                   ADC     A, #0               ;                       ' 7     |
1012   0507 77                      LD      (HL), A             ;                       ' 7     |
1013   0508             
1014   0508             .noinc
1015   0508                         wait60                      ; sync                  ' 60    | (208)
1015   0508 3E 03       >            LD      A, w            ; 7-2
1015   050A 3D          >            DEC     A               ; 4
1015   050B 20 FD       >            JR      NZ, .loop       ; 12
1015   050D C3 10 05    >            JP      .loop
1016   0510             
1017   0510 ED 5B 38 01             LD      DE, (WRITEBUF)      ; DE = write buf        ' 20    |
1018   0514                         compareReadWrite            ; PCM buffer full ?     ' 16    | 46 (254)
1018   0514 D9          >            EXX                     ;                           ' 4     |
1018   0515 78          >            LD      A, B            ; A = read buffer high      ' 4     |
1018   0516 D9          >            EXX                     ;                           ' 4     | 16
1018   0517 BA          >            CP      D               ; compare write buffer high ' 4     |
1019   0518 CA EC 09                JP      Z, sync_frame       ; go to sync directly   ' 10    |
1020   051B             
1021   051B             pcm_mix
1022   051B             
1023   051B             ; PCM channel 0
1024   051B             ; -------------
1025   051B             
1026   051B             ; $02+X
1027   051B                         sampleOutput                ;                       ' 36    |
1027   051B D9          >            EXX                     ;                           ' 4     | 4
1027   051C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1027   051D 03          >            INC     BC              ; increment read address    ' 6     |
1027   051E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1027   0520 12          >            LD      (DE), A         ; play sample               ' 7     |
1027   0521 D9          >            EXX                     ;                           ' 4     | (36)
1028   0522                         prepareChannelAlt 0         ;                       ' 176   |
1028   0522 2A 16 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1028   0525 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1028   0526 17          >            RLA                             ; C flag = bit 15       ' 4     |
1028   0527 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1028   0528 17          >            RLA                             ; A = bit 15-22         ' 4     |
1028   0529 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1028   052C 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1028   052D 1F          >            RRA                     ;                           ' 4
1028   052E 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1028   052F 1F          >            RRA                     ;                           ' 4
1028   0530 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1028   0531 1F          >            RRA                     ;                           ' 4
1028   0532 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1028   0533 1F          >            RRA                     ;                           ' 4
1028   0534 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1028   0535 1F          >            RRA                     ;                           ' 4
1028   0536 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1028   0537 1F          >            RRA                     ;                           ' 4
1028   0538 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1028   0539 1F          >            RRA                     ;                           ' 4
1028   053A 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1028   053B 1F          >            RRA                     ;                           ' 4
1028   053C 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1028   053D 65          >            LD      H, L                    ;                       ' 4     |
1028   053E CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
1028   0540 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1028   0542 ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
1029   0546 01 F2 00                LD      BC, 242             ; prepare loop counter  ' 10    | 254
1030   0549                         wait32                      ; sync                  ' 32    |
1030   0549 3E 00       >            LD      A, $0
1030   054B 00          >            NOP
1030   054C ED 4F       >            LD      R, A
1030   054E 18 00       >            JR      .loop
1031   0550             
1032   0550             ; $03-$18+X
1033   0550             .loop_ch0
1034   0550                         sampleOutput                ;                       ' 36    |
1034   0550 D9          >            EXX                     ;                           ' 4     | 4
1034   0551 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1034   0552 03          >            INC     BC              ; increment read address    ' 6     |
1034   0553 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1034   0555 12          >            LD      (DE), A         ; play sample               ' 7     |
1034   0556 D9          >            EXX                     ;                           ' 4     | (36)
1035   0557                         readAndClear2               ;                       ' 38    |
1035   0557 ED A0       >            LDI                     ;                           ' 16+3  |
1035   0559 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1036   055B                         readAndClear2               ; process 11 samples    ' 38    |
1036   055B ED A0       >            LDI                     ;                           ' 16+3  |
1036   055D ED A0       >            LDI                     ;                           ' 16+3  | (38)
1037   055F                         readAndClear2               ;                       ' 38    | 254-1
1037   055F ED A0       >            LDI                     ;                           ' 16+3  |
1037   0561 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1038   0563                         readAndClear2               ;                       ' 38    |
1038   0563 ED A0       >            LDI                     ;                           ' 16+3  |
1038   0565 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1039   0567                         readAndClear2               ;                       ' 38    |
1039   0567 ED A0       >            LDI                     ;                           ' 16+3  |
1039   0569 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1040   056B                         readAndClear                ;                       ' 19    |
1040   056B ED A0       >            LDI                     ;                           ' 16+3  | 19
1041   056D                         wait8                       ; sync                  ' 8     |
1041   056D 00          >            NOP
1041   056E 00          >            NOP
1042   056F             
1043   056F                         sampleOutput                ; -1 --> a bit early    ' 36    |
1043   056F D9          >            EXX                     ;                           ' 4     | 4
1043   0570 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1043   0571 03          >            INC     BC              ; increment read address    ' 6     |
1043   0572 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1043   0574 12          >            LD      (DE), A         ; play sample               ' 7     |
1043   0575 D9          >            EXX                     ;                           ' 4     | (36)
1044   0576                         readAndClear2               ;                       ' 38    |
1044   0576 ED A0       >            LDI                     ;                           ' 16+3  |
1044   0578 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1045   057A                         readAndClear2               ; process 11 samples    ' 38    |
1045   057A ED A0       >            LDI                     ;                           ' 16+3  |
1045   057C ED A0       >            LDI                     ;                           ' 16+3  | (38)
1046   057E                         readAndClear2               ;                       ' 38    | 254+1
1046   057E ED A0       >            LDI                     ;                           ' 16+3  |
1046   0580 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1047   0582                         readAndClear2               ;                       ' 38    |
1047   0582 ED A0       >            LDI                     ;                           ' 16+3  |
1047   0584 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1048   0586                         readAndClear2               ;                       ' 38    |
1048   0586 ED A0       >            LDI                     ;                           ' 16+3  |
1048   0588 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1049   058A                         readAndClear                ;                       ' 19    |
1049   058A ED A0       >            LDI                     ;                           ' 16+3  | 19
1050   058C EA 50 05                JP      PE, .loop_ch0       ;                       ' 10    |
1051   058F             
1052   058F             ; $19+X
1053   058F                         sampleOutput                ;                       ' 36    |
1053   058F D9          >            EXX                     ;                           ' 4     | 4
1053   0590 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1053   0591 03          >            INC     BC              ; increment read address    ' 6     |
1053   0592 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1053   0594 12          >            LD      (DE), A         ; play sample               ' 7     |
1053   0595 D9          >            EXX                     ;                           ' 4     | (36)
1054   0596                         readAndClear2               ;                       ' 38    |
1054   0596 ED A0       >            LDI                     ;                           ' 16+3  |
1054   0598 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1055   059A                         readAndClear2               ; process 10 samples    ' 38    |
1055   059A ED A0       >            LDI                     ;                           ' 16+3  |
1055   059C ED A0       >            LDI                     ;                           ' 16+3  | (38)
1056   059E                         readAndClear2               ;                       ' 38    | 254+10
1056   059E ED A0       >            LDI                     ;                           ' 16+3  |
1056   05A0 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1057   05A2                         readAndClear2               ;                       ' 38    |
1057   05A2 ED A0       >            LDI                     ;                           ' 16+3  |
1057   05A4 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1058   05A6                         readAndClear2               ;                       ' 38    |
1058   05A6 ED A0       >            LDI                     ;                           ' 16+3  |
1058   05A8 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1059   05AA                         readAndClear2               ;                       ' 38    |
1059   05AA ED A0       >            LDI                     ;                           ' 16+3  |
1059   05AC ED A0       >            LDI                     ;                           ' 16+3  | (38)
1060   05AE             
1061   05AE             ; $1A+X
1062   05AE                         sampleOutput                ; +10 --> too late      ' 36+10 |
1062   05AE D9          >            EXX                     ;                           ' 4     | 4
1062   05AF 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1062   05B0 03          >            INC     BC              ; increment read address    ' 6     |
1062   05B1 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1062   05B3 12          >            LD      (DE), A         ; play sample               ' 7     |
1062   05B4 D9          >            EXX                     ;                           ' 4     | (36)
1063   05B5                         readAndClear2               ;                       ' 38    |
1063   05B5 ED A0       >            LDI                     ;                           ' 16+3  |
1063   05B7 ED A0       >            LDI                     ;                           ' 16+3  | (38)
1064   05B9                         updateChannelData 0         ; update channel data   ' 153   | 254
1064   05B9 2A 16 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1064   05BC 23          >            INC     HL                      ;                       ' 6     | (38)
1064   05BD 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1064   05C0 2A 18 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1064   05C3 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1064   05C4 7C          >            LD      A, H                    ;                       ' 4     |
1064   05C5 B5          >            OR      L                       ;                       ' 4     | 18 (78)
1064   05C6 CA DA 05    >            JP      Z, .done                ; sample done ?         ' 10    |
1064   05C9 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1064   05CC ED 4F       >            LD      R, A
1064   05CE ED 4F       >            LD      R, A
1064   05D0 ED 4F       >            LD      R, A
1064   05D2 ED 4F       >            LD      R, A
1064   05D4 ED 4F       >            LD      R, A
1064   05D6 00          >            NOP
1064   05D7 C3 EA 05    >            JP      .end                    ;                       ' 10    |
1064   05DA 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1064   05DD 22 16 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1064   05E0 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1064   05E3 22 18 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1064   05E6 AF          >            XOR     A                       ;                           ' 4     |
1064   05E7 32 14 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1065   05EA                         wait17                      ; sync                  ' 17    |
1065   05EA C3 ED 05    >            JP      .loop
1065   05ED 3E 00       >            LD      A, $0
1066   05EF             
1067   05EF             
1068   05EF             ;    LD  A, (VCOUNTER)
1069   05EF             ;    LD  (DEBUG_2), A
1070   05EF             
1071   05EF             ; PCM channel 1
1072   05EF             ; -------------
1073   05EF             
1074   05EF             ; $1B+X
1075   05EF                         sampleOutput                ;                       ' 36    |
1075   05EF D9          >            EXX                     ;                           ' 4     | 4
1075   05F0 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1075   05F1 03          >            INC     BC              ; increment read address    ' 6     |
1075   05F2 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1075   05F4 12          >            LD      (DE), A         ; play sample               ' 7     |
1075   05F5 D9          >            EXX                     ;                           ' 4     | (36)
1076   05F6                         prepareChannel 1            ;                       ' 178   | 254
1076   05F6 2A 1E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1076   05F9 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1076   05FA 17          >            RLA                             ; C flag = bit 15       ' 4     |
1076   05FB 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1076   05FC 17          >            RLA                             ; A = bit 15-22         ' 4     |
1076   05FD 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1076   0600 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1076   0601 1F          >            RRA                     ;                           ' 4
1076   0602 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1076   0603 1F          >            RRA                     ;                           ' 4
1076   0604 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1076   0605 1F          >            RRA                     ;                           ' 4
1076   0606 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1076   0607 1F          >            RRA                     ;                           ' 4
1076   0608 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1076   0609 1F          >            RRA                     ;                           ' 4
1076   060A 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1076   060B 1F          >            RRA                     ;                           ' 4
1076   060C 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1076   060D 1F          >            RRA                     ;                           ' 4
1076   060E 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1076   060F 1F          >            RRA                     ;                           ' 4
1076   0610 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1076   0611 65          >            LD      H, L                    ;                       ' 4     |
1076   0612 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 25 (162)
1076   0614 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1076   0616 F9          >            LD      SP, HL                  ; SP point on sample    ' 6     |
1076   0617 2A 38 01    >            LD      HL, (WRITEBUF)          ; HL = write buffer     ' 16    | (178)
1077   061A 01 80 10                LD      BC, $1080           ; prepare loop counter  ' 10    |
1078   061D                         wait30                      ; sync                  ' 30    |
1078   061D 18 00       >            JR      .loop
1078   061F ED 4F       >            LD      R, A
1078   0621 ED 4F       >            LD      R, A
1079   0623             
1080   0623             ; $1C-4B+X
1081   0623             .loop_ch1
1082   0623                         readAndMix16WhilePlay3      ;                       ' 240   |
1082   0623 D9          >            EXX                     ;                           ' 4     | 4
1082   0624 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1082   0625 03          >            INC     BC              ; increment read address    ' 6     |
1082   0626 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1082   0628 12          >            LD      (DE), A         ; play sample               ' 7     |
1082   0629 D9          >            EXX                     ;                           ' 4     | (36)
1082   062A D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1082   062B 7B          >            LD      A, E            ; first sample              ' 4     |
1082   062C 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1082   062D E2 33 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1082   0630 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   0631 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   0633 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   0634 2C          >            INC     L               ;                           ' 4     | 11 (48)
1082   0635 7A          >            LD      A, D            ; second sample             ' 4     |
1082   0636 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1082   0637 E2 3D 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1082   063A 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   063B CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   063D 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   063E 2C          >            INC     L               ;                           ' 4     | 11 (80)
1082   063F D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1082   0640 7B          >            LD      A, E            ; first sample              ' 4     |
1082   0641 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1082   0642 E2 48 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1082   0645 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   0646 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   0648 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   0649 2C          >            INC     L               ;                           ' 4     | 11 (48)
1082   064A 7A          >            LD      A, D            ; second sample             ' 4     |
1082   064B 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1082   064C E2 52 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1082   064F 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   0650 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   0652 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   0653 2C          >            INC     L               ;                           ' 4     | 11 (80)
1082   0654 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (212)
1082   0655 7B          >            LD      A, E            ; first sample              ' 4     |
1082   0656 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (233)
1082   0657 E2 5D 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1082   065A 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   065B CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   065D 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   065E 2C          >            INC     L               ;                           ' 4     | 11 (254-10)
1082   065F D9          >            EXX                     ;                           ' 4     | 4
1082   0660 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1082   0661 03          >            INC     BC              ; increment read address    ' 6     |
1082   0662 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1082   0664 12          >            LD      (DE), A         ; play sample               ' 7     |
1082   0665 D9          >            EXX                     ;                           ' 4     | (36)
1082   0666 7A          >            LD      A, D            ; second sample             ' 4     |
1082   0667 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (47)
1082   0668 E2 6E 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1082   066B 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   066C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   066E 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   066F 2C          >            INC     L               ;                           ' 4     | 11 (58)
1082   0670 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1082   0671 7B          >            LD      A, E            ; first sample              ' 4     |
1082   0672 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1082   0673 E2 79 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1082   0676 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   0677 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   0679 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   067A 2C          >            INC     L               ;                           ' 4     | 11 (48)
1082   067B 7A          >            LD      A, D            ; second sample             ' 4     |
1082   067C 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1082   067D E2 83 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1082   0680 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   0681 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   0683 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   0684 2C          >            INC     L               ;                           ' 4     | 11 (80)
1082   0685 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1082   0686 7B          >            LD      A, E            ; first sample              ' 4     |
1082   0687 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1082   0688 E2 8E 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1082   068B 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   068C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   068E 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   068F 2C          >            INC     L               ;                           ' 4     | 11 (48)
1082   0690 7A          >            LD      A, D            ; second sample             ' 4     |
1082   0691 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1082   0692 E2 98 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1082   0695 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   0696 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   0698 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   0699 2C          >            INC     L               ;                           ' 4     | 11 (80)
1082   069A D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (234)
1082   069B 7B          >            LD      A, E            ; first sample              ' 4     |
1082   069C 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (254+1)
1082   069D E2 A3 06    >            JP      PO, .ok3        ; check overflow            ' 10    |
1082   06A0 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   06A1 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   06A3 77          >            LD      (HL), A         ; store it in write sample  ' 7     | (254+8)
1082   06A4 D9          >            EXX                     ;                           ' 4     | 4
1082   06A5 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1082   06A6 03          >            INC     BC              ; increment read address    ' 6     |
1082   06A7 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1082   06A9 12          >            LD      (DE), A         ; play sample               ' 7     |
1082   06AA D9          >            EXX                     ;                           ' 4     | (36)
1082   06AB 2C          >            INC     L               ;                           ' 4     | (48)
1082   06AC 7A          >            LD      A, D            ; second sample             ' 4     |
1082   06AD 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1082   06AE E2 B4 06    >            JP      PO, .ok4        ; check overflow            ' 10    |
1082   06B1 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   06B2 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   06B4 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   06B5 2C          >            INC     L               ;                           ' 4     | 11 (80)
1082   06B6 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1082   06B7 7B          >            LD      A, E            ; first sample              ' 4     |
1082   06B8 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1082   06B9 E2 BF 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1082   06BC 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   06BD CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   06BF 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   06C0 2C          >            INC     L               ;                           ' 4     | 11 (48)
1082   06C1 7A          >            LD      A, D            ; second sample             ' 4     |
1082   06C2 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1082   06C3 E2 C9 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1082   06C6 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   06C7 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   06C9 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   06CA 2C          >            INC     L               ;                           ' 4     | 11 (80)
1082   06CB D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1082   06CC 7B          >            LD      A, E            ; first sample              ' 4     |
1082   06CD 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1082   06CE E2 D4 06    >            JP      PO, .ok         ; check overflow            ' 10    |
1082   06D1 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   06D2 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   06D4 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   06D5 2C          >            INC     L               ;                           ' 4     | 11 (48)
1082   06D6 7A          >            LD      A, D            ; second sample             ' 4     |
1082   06D7 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1082   06D8 E2 DE 06    >            JP      PO, .ok2        ; check overflow            ' 10    |
1082   06DB 79          >            LD      A, C            ; fix overflow              ' 4     |
1082   06DC CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1082   06DE 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1082   06DF 2C          >            INC     L               ;                           ' 4     | 11 (80)
1083   06E0 05                      DEC     B                   ;                       ' 4     | 254*3
1084   06E1 C2 23 06                JP      NZ, .loop_ch1       ;                       ' 10    |
1085   06E4             
1086   06E4             ; $4C+X
1087   06E4                         sampleOutput                ;                       ' 36    |
1087   06E4 D9          >            EXX                     ;                           ' 4     | 4
1087   06E5 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1087   06E6 03          >            INC     BC              ; increment read address    ' 6     |
1087   06E7 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1087   06E9 12          >            LD      (DE), A         ; play sample               ' 7     |
1087   06EA D9          >            EXX                     ;                           ' 4     | (36)
1088   06EB                         updateChannelData 1         ; update channel data   ' 153   | 254
1088   06EB 2A 1E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1088   06EE 23          >            INC     HL                      ;                       ' 6     | (38)
1088   06EF 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1088   06F2 2A 20 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1088   06F5 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1088   06F6 7C          >            LD      A, H                    ;                       ' 4     |
1088   06F7 B5          >            OR      L                       ;                       ' 4     | 18 (78)
1088   06F8 CA 0C 07    >            JP      Z, .done                ; sample done ?         ' 10    |
1088   06FB 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1088   06FE ED 4F       >            LD      R, A
1088   0700 ED 4F       >            LD      R, A
1088   0702 ED 4F       >            LD      R, A
1088   0704 ED 4F       >            LD      R, A
1088   0706 ED 4F       >            LD      R, A
1088   0708 00          >            NOP
1088   0709 C3 1C 07    >            JP      .end                    ;                       ' 10    |
1088   070C 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1088   070F 22 1E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1088   0712 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1088   0715 22 20 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1088   0718 AF          >            XOR     A                       ;                           ' 4     |
1088   0719 32 1C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1089   071C                         wait65                      ; sync                  ' 65    |
1089   071C 3E 03       >            LD      A, w            ; 7-2
1089   071E 3D          >            DEC     A               ; 4
1089   071F 20 FD       >            JR      NZ, .loop       ; 12
1089   0721 00          >            NOP
1089   0722 00          >            NOP
1089   0723 3E 00       >            LD      A, $0
1090   0725             
1091   0725             
1092   0725             ;    LD  A, (VCOUNTER)
1093   0725             ;    LD  (DEBUG_3), A
1094   0725             
1095   0725             ; PCM channel 2
1096   0725             ; -------------
1097   0725             
1098   0725             ; $4D+X
1099   0725                         sampleOutput                ;                       ' 36    |
1099   0725 D9          >            EXX                     ;                           ' 4     | 4
1099   0726 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1099   0727 03          >            INC     BC              ; increment read address    ' 6     |
1099   0728 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1099   072A 12          >            LD      (DE), A         ; play sample               ' 7     |
1099   072B D9          >            EXX                     ;                           ' 4     | (36)
1100   072C                         prepareChannel 2            ;                       ' 178   | 254
1100   072C 2A 26 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1100   072F 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1100   0730 17          >            RLA                             ; C flag = bit 15       ' 4     |
1100   0731 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1100   0732 17          >            RLA                             ; A = bit 15-22         ' 4     |
1100   0733 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1100   0736 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1100   0737 1F          >            RRA                     ;                           ' 4
1100   0738 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1100   0739 1F          >            RRA                     ;                           ' 4
1100   073A 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1100   073B 1F          >            RRA                     ;                           ' 4
1100   073C 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1100   073D 1F          >            RRA                     ;                           ' 4
1100   073E 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1100   073F 1F          >            RRA                     ;                           ' 4
1100   0740 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1100   0741 1F          >            RRA                     ;                           ' 4
1100   0742 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1100   0743 1F          >            RRA                     ;                           ' 4
1100   0744 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1100   0745 1F          >            RRA                     ;                           ' 4
1100   0746 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1100   0747 65          >            LD      H, L                    ;                       ' 4     |
1100   0748 CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 25 (162)
1100   074A 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1100   074C F9          >            LD      SP, HL                  ; SP point on sample    ' 6     |
1100   074D 2A 38 01    >            LD      HL, (WRITEBUF)          ; HL = write buffer     ' 16    | (178)
1101   0750 01 80 10                LD      BC, $1080           ; prepare loop counter  ' 10    |
1102   0753                         wait30                      ; sync                  ' 30    |
1102   0753 18 00       >            JR      .loop
1102   0755 ED 4F       >            LD      R, A
1102   0757 ED 4F       >            LD      R, A
1103   0759             
1104   0759             ; $4E-7D+X
1105   0759             .loop_ch2
1106   0759                         readAndMix16WhilePlay3      ;                       ' 240   |
1106   0759 D9          >            EXX                     ;                           ' 4     | 4
1106   075A 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1106   075B 03          >            INC     BC              ; increment read address    ' 6     |
1106   075C CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1106   075E 12          >            LD      (DE), A         ; play sample               ' 7     |
1106   075F D9          >            EXX                     ;                           ' 4     | (36)
1106   0760 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1106   0761 7B          >            LD      A, E            ; first sample              ' 4     |
1106   0762 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1106   0763 E2 69 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1106   0766 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   0767 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   0769 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   076A 2C          >            INC     L               ;                           ' 4     | 11 (48)
1106   076B 7A          >            LD      A, D            ; second sample             ' 4     |
1106   076C 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1106   076D E2 73 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1106   0770 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   0771 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   0773 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   0774 2C          >            INC     L               ;                           ' 4     | 11 (80)
1106   0775 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1106   0776 7B          >            LD      A, E            ; first sample              ' 4     |
1106   0777 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1106   0778 E2 7E 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1106   077B 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   077C CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   077E 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   077F 2C          >            INC     L               ;                           ' 4     | 11 (48)
1106   0780 7A          >            LD      A, D            ; second sample             ' 4     |
1106   0781 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1106   0782 E2 88 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1106   0785 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   0786 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   0788 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   0789 2C          >            INC     L               ;                           ' 4     | 11 (80)
1106   078A D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (212)
1106   078B 7B          >            LD      A, E            ; first sample              ' 4     |
1106   078C 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (233)
1106   078D E2 93 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1106   0790 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   0791 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   0793 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   0794 2C          >            INC     L               ;                           ' 4     | 11 (254-10)
1106   0795 D9          >            EXX                     ;                           ' 4     | 4
1106   0796 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1106   0797 03          >            INC     BC              ; increment read address    ' 6     |
1106   0798 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1106   079A 12          >            LD      (DE), A         ; play sample               ' 7     |
1106   079B D9          >            EXX                     ;                           ' 4     | (36)
1106   079C 7A          >            LD      A, D            ; second sample             ' 4     |
1106   079D 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (47)
1106   079E E2 A4 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1106   07A1 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   07A2 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   07A4 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   07A5 2C          >            INC     L               ;                           ' 4     | 11 (58)
1106   07A6 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1106   07A7 7B          >            LD      A, E            ; first sample              ' 4     |
1106   07A8 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1106   07A9 E2 AF 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1106   07AC 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   07AD CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   07AF 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   07B0 2C          >            INC     L               ;                           ' 4     | 11 (48)
1106   07B1 7A          >            LD      A, D            ; second sample             ' 4     |
1106   07B2 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1106   07B3 E2 B9 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1106   07B6 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   07B7 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   07B9 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   07BA 2C          >            INC     L               ;                           ' 4     | 11 (80)
1106   07BB D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1106   07BC 7B          >            LD      A, E            ; first sample              ' 4     |
1106   07BD 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1106   07BE E2 C4 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1106   07C1 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   07C2 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   07C4 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   07C5 2C          >            INC     L               ;                           ' 4     | 11 (48)
1106   07C6 7A          >            LD      A, D            ; second sample             ' 4     |
1106   07C7 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1106   07C8 E2 CE 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1106   07CB 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   07CC CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   07CE 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   07CF 2C          >            INC     L               ;                           ' 4     | 11 (80)
1106   07D0 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (234)
1106   07D1 7B          >            LD      A, E            ; first sample              ' 4     |
1106   07D2 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (254+1)
1106   07D3 E2 D9 07    >            JP      PO, .ok3        ; check overflow            ' 10    |
1106   07D6 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   07D7 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   07D9 77          >            LD      (HL), A         ; store it in write sample  ' 7     | (254+8)
1106   07DA D9          >            EXX                     ;                           ' 4     | 4
1106   07DB 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1106   07DC 03          >            INC     BC              ; increment read address    ' 6     |
1106   07DD CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1106   07DF 12          >            LD      (DE), A         ; play sample               ' 7     |
1106   07E0 D9          >            EXX                     ;                           ' 4     | (36)
1106   07E1 2C          >            INC     L               ;                           ' 4     | (48)
1106   07E2 7A          >            LD      A, D            ; second sample             ' 4     |
1106   07E3 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1106   07E4 E2 EA 07    >            JP      PO, .ok4        ; check overflow            ' 10    |
1106   07E7 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   07E8 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   07EA 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   07EB 2C          >            INC     L               ;                           ' 4     | 11 (80)
1106   07EC D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1106   07ED 7B          >            LD      A, E            ; first sample              ' 4     |
1106   07EE 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1106   07EF E2 F5 07    >            JP      PO, .ok         ; check overflow            ' 10    |
1106   07F2 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   07F3 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   07F5 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   07F6 2C          >            INC     L               ;                           ' 4     | 11 (48)
1106   07F7 7A          >            LD      A, D            ; second sample             ' 4     |
1106   07F8 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1106   07F9 E2 FF 07    >            JP      PO, .ok2        ; check overflow            ' 10    |
1106   07FC 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   07FD CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   07FF 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   0800 2C          >            INC     L               ;                           ' 4     | 11 (80)
1106   0801 D1          >            POP     DE              ; read 2 samples from ROM   ' 10+6  | (16)
1106   0802 7B          >            LD      A, E            ; first sample              ' 4     |
1106   0803 86          >            ADD     (HL)            ; mix with write buffer     ' 7     | 21 (37)
1106   0804 E2 0A 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1106   0807 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   0808 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   080A 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   080B 2C          >            INC     L               ;                           ' 4     | 11 (48)
1106   080C 7A          >            LD      A, D            ; second sample             ' 4     |
1106   080D 86          >            ADD     (HL)            ; mix                       ' 7     | 21 (69)
1106   080E E2 14 08    >            JP      PO, .ok2        ; check overflow            ' 10    |
1106   0811 79          >            LD      A, C            ; fix overflow              ' 4     |
1106   0812 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1106   0814 77          >            LD      (HL), A         ; store it in write sample  ' 7     |
1106   0815 2C          >            INC     L               ;                           ' 4     | 11 (80)
1107   0816 05                      DEC     B                   ;                       ' 4     | 254*3
1108   0817 C2 59 07                JP      NZ, .loop_ch2       ;                       ' 10    |
1109   081A             
1110   081A             ; $7E+X
1111   081A                         sampleOutput                ;                       ' 36    |
1111   081A D9          >            EXX                     ;                           ' 4     | 4
1111   081B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1111   081C 03          >            INC     BC              ; increment read address    ' 6     |
1111   081D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1111   081F 12          >            LD      (DE), A         ; play sample               ' 7     |
1111   0820 D9          >            EXX                     ;                           ' 4     | (36)
1112   0821                         updateChannelData 2         ; update channel data   ' 153   | 254
1112   0821 2A 26 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1112   0824 23          >            INC     HL                      ;                       ' 6     | (38)
1112   0825 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1112   0828 2A 28 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1112   082B 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1112   082C 7C          >            LD      A, H                    ;                       ' 4     |
1112   082D B5          >            OR      L                       ;                       ' 4     | 18 (78)
1112   082E CA 42 08    >            JP      Z, .done                ; sample done ?         ' 10    |
1112   0831 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1112   0834 ED 4F       >            LD      R, A
1112   0836 ED 4F       >            LD      R, A
1112   0838 ED 4F       >            LD      R, A
1112   083A ED 4F       >            LD      R, A
1112   083C ED 4F       >            LD      R, A
1112   083E 00          >            NOP
1112   083F C3 52 08    >            JP      .end                    ;                       ' 10    |
1112   0842 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1112   0845 22 26 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1112   0848 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1112   084B 22 28 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1112   084E AF          >            XOR     A                       ;                           ' 4     |
1112   084F 32 24 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1113   0852                         wait65                      ; sync                  ' 65    |
1113   0852 3E 03       >            LD      A, w            ; 7-2
1113   0854 3D          >            DEC     A               ; 4
1113   0855 20 FD       >            JR      NZ, .loop       ; 12
1113   0857 00          >            NOP
1113   0858 00          >            NOP
1113   0859 3E 00       >            LD      A, $0
1114   085B             
1115   085B             
1116   085B             ;    LD  A, (VCOUNTER)
1117   085B             ;    LD  (DEBUG_4), A
1118   085B             
1119   085B             ; PCM channel 3
1120   085B             ; -------------
1121   085B             
1122   085B             ; $7F+X
1123   085B                         sampleOutput                ;                       ' 36    |
1123   085B D9          >            EXX                     ;                           ' 4     | 4
1123   085C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1123   085D 03          >            INC     BC              ; increment read address    ' 6     |
1123   085E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1123   0860 12          >            LD      (DE), A         ; play sample               ' 7     |
1123   0861 D9          >            EXX                     ;                           ' 4     | (36)
1124   0862                         prepareChannelAlt 3         ;                       ' 176   | 254
1124   0862 2A 2E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; HL = sample addr (HM) ' 16    | (16)
1124   0865 7D          >            LD      A, L                    ; A = bit 8-15          ' 4     |
1124   0866 17          >            RLA                             ; C flag = bit 15       ' 4     |
1124   0867 7C          >            LD      A, H                    ; A = bit 16-23         ' 4     | 16 (32)
1124   0868 17          >            RLA                             ; A = bit 15-22         ' 4     |
1124   0869 11 00 60    >            LD  DE, BANKREG         ; DE = BANKREG              ' 10
1124   086C 12          >            LD  (DE), A             ; #1 (bit 15)               ' 7
1124   086D 1F          >            RRA                     ;                           ' 4
1124   086E 12          >            LD  (DE), A             ; #2 (bit 16)               ' 7
1124   086F 1F          >            RRA                     ;                           ' 4
1124   0870 12          >            LD  (DE), A             ; #3 (bit 17)               ' 7
1124   0871 1F          >            RRA                     ;                           ' 4
1124   0872 12          >            LD  (DE), A             ; #4 (bit 18)               ' 7
1124   0873 1F          >            RRA                     ;                           ' 4
1124   0874 12          >            LD  (DE), A             ; #5 (bit 19)               ' 7
1124   0875 1F          >            RRA                     ;                           ' 4
1124   0876 12          >            LD  (DE), A             ; #6 (bit 20)               ' 7
1124   0877 1F          >            RRA                     ;                           ' 4
1124   0878 12          >            LD  (DE), A             ; #7 (bit 21)               ' 7
1124   0879 1F          >            RRA                     ;                           ' 4
1124   087A 12          >            LD  (DE), A             ; #8 (bit 22)               ' 7
1124   087B 1F          >            RRA                     ;                           ' 4
1124   087C 12          >            LD  (DE), A             ; #9 (bit 23 = 0)           ' 7
1124   087D 65          >            LD      H, L                    ;                       ' 4     |
1124   087E CB FC       >            SET     7, H                    ; HL |= 0x8000          ' 8     | 19 (156)
1124   0880 2E 00       >            LD      L, 0                    ; HL = sample addr bank ' 7     |
1124   0882 ED 5B 38 01 >            LD      DE, (WRITEBUF)          ; DE = write buffer     ' 20    | (176)
1125   0886 01 80 1C                LD      BC, $1C80           ; prepare loop counter  ' 10    |
1126   0889                         wait32                      ; sync                  ' 32    |
1126   0889 3E 00       >            LD      A, $0
1126   088B 00          >            NOP
1126   088C ED 4F       >            LD      R, A
1126   088E 18 00       >            JR      .loop
1127   0890             
1128   0890             ; $80-$B7+X
1129   0890             .loop_ch3
1130   0890                         sampleOutput                ;                       ' 36    |
1130   0890 D9          >            EXX                     ;                           ' 4     | 4
1130   0891 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1130   0892 03          >            INC     BC              ; increment read address    ' 6     |
1130   0893 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1130   0895 12          >            LD      (DE), A         ; play sample               ' 7     |
1130   0896 D9          >            EXX                     ;                           ' 4     | (36)
1131   0897                         readMixAndUnsign            ; mix/unsign 9 samples  ' 46    |
1131   0897 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1131   0898 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1131   0899 E2 9F 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1131   089C 79          >            LD      A, C            ; fix overflow              ' 4     |
1131   089D CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1131   089F 81          >            ADD     C               ; unsign                    ' 4     |
1131   08A0 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1131   08A1 1C          >            INC     E               ;                           ' 4     |
1131   08A2 2C          >            INC     L               ; next                      ' 4     |
1132   08A3                         readMixAndUnsign            ;                       ' 46    |
1132   08A3 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1132   08A4 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1132   08A5 E2 AB 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1132   08A8 79          >            LD      A, C            ; fix overflow              ' 4     |
1132   08A9 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1132   08AB 81          >            ADD     C               ; unsign                    ' 4     |
1132   08AC 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1132   08AD 1C          >            INC     E               ;                           ' 4     |
1132   08AE 2C          >            INC     L               ; next                      ' 4     |
1133   08AF                         readMixAndUnsign            ;                       ' 46    | 254+12
1133   08AF 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1133   08B0 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1133   08B1 E2 B7 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1133   08B4 79          >            LD      A, C            ; fix overflow              ' 4     |
1133   08B5 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1133   08B7 81          >            ADD     C               ; unsign                    ' 4     |
1133   08B8 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1133   08B9 1C          >            INC     E               ;                           ' 4     |
1133   08BA 2C          >            INC     L               ; next                      ' 4     |
1134   08BB                         readMixAndUnsign            ;                       ' 46    |
1134   08BB 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1134   08BC 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1134   08BD E2 C3 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1134   08C0 79          >            LD      A, C            ; fix overflow              ' 4     |
1134   08C1 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1134   08C3 81          >            ADD     C               ; unsign                    ' 4     |
1134   08C4 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1134   08C5 1C          >            INC     E               ;                           ' 4     |
1134   08C6 2C          >            INC     L               ; next                      ' 4     |
1135   08C7                         readMixAndUnsign            ;                       ' 46    |
1135   08C7 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1135   08C8 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1135   08C9 E2 CF 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1135   08CC 79          >            LD      A, C            ; fix overflow              ' 4     |
1135   08CD CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1135   08CF 81          >            ADD     C               ; unsign                    ' 4     |
1135   08D0 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1135   08D1 1C          >            INC     E               ;                           ' 4     |
1135   08D2 2C          >            INC     L               ; next                      ' 4     |
1136   08D3             
1137   08D3                         sampleOutput                ; +12 --> late          ' 36    |
1137   08D3 D9          >            EXX                     ;                           ' 4     | 4
1137   08D4 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1137   08D5 03          >            INC     BC              ; increment read address    ' 6     |
1137   08D6 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1137   08D8 12          >            LD      (DE), A         ; play sample               ' 7     |
1137   08D9 D9          >            EXX                     ;                           ' 4     | (36)
1138   08DA                         readMixAndUnsign            ;                       ' 46    |
1138   08DA 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1138   08DB 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1138   08DC E2 E2 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1138   08DF 79          >            LD      A, C            ; fix overflow              ' 4     |
1138   08E0 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1138   08E2 81          >            ADD     C               ; unsign                    ' 4     |
1138   08E3 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1138   08E4 1C          >            INC     E               ;                           ' 4     |
1138   08E5 2C          >            INC     L               ; next                      ' 4     |
1139   08E6                         readMixAndUnsign            ;                       ' 46    |
1139   08E6 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1139   08E7 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1139   08E8 E2 EE 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1139   08EB 79          >            LD      A, C            ; fix overflow              ' 4     |
1139   08EC CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1139   08EE 81          >            ADD     C               ; unsign                    ' 4     |
1139   08EF 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1139   08F0 1C          >            INC     E               ;                           ' 4     |
1139   08F1 2C          >            INC     L               ; next                      ' 4     |
1140   08F2                         readMixAndUnsign            ;                       ' 46    | 254
1140   08F2 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1140   08F3 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1140   08F4 E2 FA 08    >            JP      PO, .ok         ; check overflow            ' 10    |
1140   08F7 79          >            LD      A, C            ; fix overflow              ' 4     |
1140   08F8 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1140   08FA 81          >            ADD     C               ; unsign                    ' 4     |
1140   08FB 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1140   08FC 1C          >            INC     E               ;                           ' 4     |
1140   08FD 2C          >            INC     L               ; next                      ' 4     |
1141   08FE                         readMixAndUnsign            ;                       ' 46    |
1141   08FE 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1141   08FF 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1141   0900 E2 06 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1141   0903 79          >            LD      A, C            ; fix overflow              ' 4     |
1141   0904 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1141   0906 81          >            ADD     C               ; unsign                    ' 4     |
1141   0907 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1141   0908 1C          >            INC     E               ;                           ' 4     |
1141   0909 2C          >            INC     L               ; next                      ' 4     |
1142   090A                         wait8                       ; sync                  ' 8     |
1142   090A 00          >            NOP
1142   090B 00          >            NOP
1143   090C 05                      DEC     B                   ;                       ' 4     |
1144   090D C2 90 08                JP      NZ, .loop_ch3       ;                       ' 10    |
1145   0910             
1146   0910             ; $B8+X
1147   0910                         sampleOutput                ;                       ' 36    |
1147   0910 D9          >            EXX                     ;                           ' 4     | 4
1147   0911 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1147   0912 03          >            INC     BC              ; increment read address    ' 6     |
1147   0913 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1147   0915 12          >            LD      (DE), A         ; play sample               ' 7     |
1147   0916 D9          >            EXX                     ;                           ' 4     | (36)
1148   0917                         readMixAndUnsign            ;                       ' 46    |
1148   0917 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1148   0918 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1148   0919 E2 1F 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1148   091C 79          >            LD      A, C            ; fix overflow              ' 4     |
1148   091D CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1148   091F 81          >            ADD     C               ; unsign                    ' 4     |
1148   0920 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1148   0921 1C          >            INC     E               ;                           ' 4     |
1148   0922 2C          >            INC     L               ; next                      ' 4     |
1149   0923                         readMixAndUnsign            ;                       ' 46    | 254
1149   0923 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1149   0924 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1149   0925 E2 2B 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1149   0928 79          >            LD      A, C            ; fix overflow              ' 4     |
1149   0929 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1149   092B 81          >            ADD     C               ; unsign                    ' 4     |
1149   092C 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1149   092D 1C          >            INC     E               ;                           ' 4     |
1149   092E 2C          >            INC     L               ; next                      ' 4     |
1150   092F                         readMixAndUnsign            ;                       ' 46    |
1150   092F 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1150   0930 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1150   0931 E2 37 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1150   0934 79          >            LD      A, C            ; fix overflow              ' 4     |
1150   0935 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1150   0937 81          >            ADD     C               ; unsign                    ' 4     |
1150   0938 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1150   0939 1C          >            INC     E               ;                           ' 4     |
1150   093A 2C          >            INC     L               ; next                      ' 4     |
1151   093B                         readMixAndUnsign            ;                       ' 46    |
1151   093B 1A          >            LD      A, (DE)         ; read value in write buf   ' 7     |
1151   093C 86          >            ADD     (HL)            ; mix with source sample    ' 7+3   | (27)
1151   093D E2 43 09    >            JP      PO, .ok         ; check overflow            ' 10    |
1151   0940 79          >            LD      A, C            ; fix overflow              ' 4     |
1151   0941 CE FF       >            ADC     $FF             ; A = $7F/$80               ' 7     | +11
1151   0943 81          >            ADD     C               ; unsign                    ' 4     |
1151   0944 12          >            LD      (DE), A         ; write sample in buffer    ' 7     | 19 (46)
1151   0945 1C          >            INC     E               ;                           ' 4     |
1151   0946 2C          >            INC     L               ; next                      ' 4     |
1152   0947                         wait34                      ;                       ' 34    |
1152   0947 3E 02       >            LD      A, w            ; 7-2
1152   0949 3D          >            DEC     A               ; 4
1152   094A 20 FD       >            JR      NZ, .loop       ; 12
1153   094C             
1154   094C             ; $B9+X
1155   094C                         sampleOutput                ;                       ' 36    |
1155   094C D9          >            EXX                     ;                           ' 4     | 4
1155   094D 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1155   094E 03          >            INC     BC              ; increment read address    ' 6     |
1155   094F CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1155   0951 12          >            LD      (DE), A         ; play sample               ' 7     |
1155   0952 D9          >            EXX                     ;                           ' 4     | (36)
1156   0953                         updateChannelData 3         ; update channel data   ' 153   | 254
1156   0953 2A 2E 01    >            LD      HL, (PCM_ADDR+(ch*8))   ; increment address     ' 16    |
1156   0956 23          >            INC     HL                      ;                       ' 6     | (38)
1156   0957 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ;                       ' 16    |
1156   095A 2A 30 01    >            LD      HL, (PCM_LEN+(ch*8))    ; decrement lenght      ' 16    |
1156   095D 2B          >            DEC     HL                      ;                       ' 6     | 22 (60)
1156   095E 7C          >            LD      A, H                    ;                       ' 4     |
1156   095F B5          >            OR      L                       ;                       ' 4     | 18 (78)
1156   0960 CA 74 09    >            JP      Z, .done                ; sample done ?         ' 10    |
1156   0963 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new sample len    ' 16    |
1156   0966 ED 4F       >            LD      R, A
1156   0968 ED 4F       >            LD      R, A
1156   096A ED 4F       >            LD      R, A
1156   096C ED 4F       >            LD      R, A
1156   096E ED 4F       >            LD      R, A
1156   0970 00          >            NOP
1156   0971 C3 84 09    >            JP      .end                    ;                       ' 10    |
1156   0974 2A 00 1C    >            LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
1156   0977 22 2E 01    >            LD      (PCM_ADDR+(ch*8)), HL   ; set new PCM addr          ' 16    |
1156   097A 21 01 00    >            LD      HL, $0001               ; HL = null PCM len         ' 10    | (58)
1156   097D 22 30 01    >            LD      (PCM_LEN+(ch*8)), HL    ; set new PCM addr          ' 16    |
1156   0980 AF          >            XOR     A                       ;                           ' 4     |
1156   0981 32 2C 01    >            LD      (PCM_PRIO+(ch*8)), A    ; clear prio                ' 13    | 17 (75)
1157   0984                         wait65                      ; sync                  ' 65    |
1157   0984 3E 03       >            LD      A, w            ; 7-2
1157   0986 3D          >            DEC     A               ; 4
1157   0987 20 FD       >            JR      NZ, .loop       ; 12
1157   0989 00          >            NOP
1157   098A 00          >            NOP
1157   098B 3E 00       >            LD      A, $0
1158   098D             
1159   098D             
1160   098D             ;    LD  A, (VCOUNTER)
1161   098D             ;    LD  (DEBUG_5), A
1162   098D             
1163   098D             ; next write buffer
1164   098D             ; -----------------
1165   098D             
1166   098D             ; $BA+X
1167   098D             next_write_buf
1168   098D                         sampleOutput                ;                       ' 36    | 36
1168   098D D9          >            EXX                     ;                           ' 4     | 4
1168   098E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1168   098F 03          >            INC     BC              ; increment read address    ' 6     |
1168   0990 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1168   0992 12          >            LD      (DE), A         ; play sample               ' 7     |
1168   0993 D9          >            EXX                     ;                           ' 4     | (36)
1169   0994             
1170   0994 3A 02 01                LD      A, (STATUS)         ; A = (STATUS)          ' 13    |
1171   0997 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1172   099A 36 2B                   LD      (HL), $2B           ; register = DAC enable ' 10    | 54 (90)
1173   099C 2C                      INC     L                   ; HL point on YM port1  ' 4     |
1174   099D E6 0F                   AND     $0F                 ; PCM is playing ?      ' 7     |
1175   099F C2 B2 09                JP      NZ, .still_pcm      ;                       ' 10    |
1176   09A2             
1177   09A2 3A 61 01                LD      A, (YM_2B_CNT)      ;                       ' 13    |
1178   09A5 B7                      OR      A                   ;                       ' 4     | 27 (117)
1179   09A6 CA C3 09                JP      Z, .no_pcm          ; DAC enabled expired ? ' 10    |
1180   09A9             
1181   09A9 3D                      DEC     A                   ; decrement expiration  ' 4     |
1182   09AA 32 61 01                LD      (YM_2B_CNT), A      ;                       ' 13    |
1183   09AD 3E 80                   LD      A, $80              ; DAC enabled           ' 7     | 34 (151)
1184   09AF C3 CA 09                JP      .set_dac            ; assume still PCM      ' 10    |
1185   09B2             
1186   09B2             .still_pcm                              ;                       ' 90
1187   09B2                         wait7                       ; sync                  ' 7     |
1187   09B2 3E 00       >            LD      A, $0
1188   09B4 3E 03                   LD      A, 3                ; set DAC ON expiration ' 7     | 27 (117)
1189   09B6 32 61 01                LD      (YM_2B_CNT), A      ; 4 frames to expire    ' 13    |
1190   09B9             
1191   09B9                         wait17                      ; sync                  ' 17    |
1191   09B9 C3 BC 09    >            JP      .loop
1191   09BC 3E 00       >            LD      A, $0
1192   09BE 3E 80                   LD      A, $80              ; DAC enabled           ' 7     | 34 (151)
1193   09C0 C3 CA 09                JP      .set_dac            ; assume still PCM      ' 10    |
1194   09C3             
1195   09C3             .no_pcm                                 ;                       ' 117
1196   09C3                         wait21                      ; sync                  ' 21    |
1196   09C3 18 00       >            JR      .loop
1196   09C5 ED 4F       >            LD      R, A
1197   09C7 3A 60 01                LD      A, (YM_2B_SAV)      ; use current DAC on    ' 13    | 34 (151)
1198   09CA             
1199   09CA             .set_dac                                ;                       ' 151
1200   09CA 77                      LD      (HL), A             ; set DAC enabled       ' 7     |
1201   09CB 2D                      DEC     L                   ; HL point on YM port0  ' 4     | 11 (162)
1202   09CC             
1203   09CC D9                      EXX                         ;                       ' 4     |
1204   09CD 78                      LD      A, B                ; A = read buffer high  ' 4     |
1205   09CE 32 3B 01                LD      (READBUF+1), A      ; save current read buf ' 13    | 25 (187)
1206   09D1 D9                      EXX                         ;                       ' 4     |
1207   09D2             
1208   09D2 BA                      CP      D                   ; prepare DAC write     ' 4     |
1209   09D3 36 2A                   LD      (HL), 0x2A          ; write buf == read buf ' 10    | 24 (211)
1210   09D5 CA E2 09                JP      Z, .continu_pcm     ; continu to fill pcm   ' 10    |
1211   09D8             
1212   09D8 14                      INC     D                   ; inc write addr        ' 4     |
1213   09D9 CB 92                   RES     2, D                ; write addr &= 0x03FF  ' 8     | 42 (254-1)
1214   09DB ED 53 38 01             LD      (WRITEBUF), DE      ; save new write addr   ' 20    |
1215   09DF C3 EC 09                JP      sync_frame          ;                       ' 10    |
1216   09E2             
1217   09E2             .continu_pcm
1218   09E2 14                      INC     D                   ; inc write addr        ' 4     |
1219   09E3 CB 92                   RES     2, D                ; write addr &= 0x03FF  ' 8     | 42 (254-1)
1220   09E5 ED 53 38 01             LD      (WRITEBUF), DE      ; save new write addr   ' 20    |
1221   09E9 C3 1B 05                JP      pcm_mix             ; do pcm mix again      ' 10    |
1222   09EC             
1223   09EC             ; sync
1224   09EC             ; ----
1225   09EC             
1226   09EC             ; $BB+X
1227   09EC             sync_frame                              ; DE point on write buf
1228   09EC             
1229   09EC             ;    LD  A, (VCOUNTER)
1230   09EC             ;    LD  (DEBUG_6), A
1231   09EC             
1232   09EC             sync_frame_loop
1233   09EC                         sampleOutput                ;                       ' 36    | (36)
1233   09EC D9          >            EXX                     ;                           ' 4     | 4
1233   09ED 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1233   09EE 03          >            INC     BC              ; increment read address    ' 6     |
1233   09EF CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1233   09F1 12          >            LD      (DE), A         ; play sample               ' 7     |
1233   09F2 D9          >            EXX                     ;                           ' 4     | (36)
1234   09F3             
1235   09F3                         wait62                      ; sync                  ' 62    | (98)
1235   09F3 3E 03       >            LD      A, w            ; 7-2
1235   09F5 3D          >            DEC     A               ; 4
1235   09F6 20 FD       >            JR      NZ, .loop       ; 12
1235   09F8 18 00       >            JR      .loop
1236   09FA             
1237   09FA 2A 80 01                LD      HL, (IDLE_LOOP)     ;                       ' 16    |
1238   09FD 23                      INC     HL                  ; increment idle loop   ' 6     | 38 (136)
1239   09FE 22 80 01                LD      (IDLE_LOOP), HL     ;                       ' 16    |
1240   0A01             
1241   0A01 3A 13 01                LD      A, (PENDING_FRM)    ; A = frame to process  ' 13    |
1242   0A04 B7                      OR      A                   ; something to do ?     ' 4     | 27 (163)
1243   0A05 C2 30 0A                JP      NZ, .do_xgm         ; do the XGM frame      ' 10    |
1244   0A08             
1245   0A08 3A 11 01                LD      A, (PROTECT_ARG)    ; get BUS protect state ' 13    |
1246   0A0B B7                      OR      A                   ; protecting ?          ' 4     | 27 (190)
1247   0A0C C2 20 0A                JP      NZ, .wait_dma       ; wait for it           ' 10    |
1248   0A0F             
1249   0A0F D9                      EXX                         ;                       ' 4     |
1250   0A10 78                      LD      A, B                ; A = read buffer high  ' 4     |
1251   0A11 32 3B 01                LD      (READBUF+1), A      ; save current read buf ' 13    | 25 (215)
1252   0A14 D9                      EXX                         ;                       ' 4     |
1253   0A15             
1254   0A15 C6 01                   ADD     $1                  ;                       ' 7     |
1255   0A17 CB 97                   RES     2, A                ; read pos &= 0x03FF    ' 8     |
1256   0A19 BA                      CP      D                   ; pcm buffer empty ?    ' 4     | 29 (244)
1257   0A1A CA 2D 0A                JP      Z, .do_pcm          ; fill pcm              ' 10    |
1258   0A1D             
1259   0A1D C3 EC 09                JP      sync_frame_loop     ; wait for a frame      ' 10    | (254)
1260   0A20             
1261   0A20             .wait_dma                               ;                       ' 190
1262   0A20 2A 82 01                LD      HL, (WAIT_LOOP)     ;                       ' 16    |
1263   0A23 23                      INC     HL                  ; increment wait loop   ' 6     | 38 (228)
1264   0A24 22 82 01                LD      (WAIT_LOOP), HL     ;                       ' 16    |
1265   0A27             
1266   0A27                         wait16                      ; sync                  ' 16    |
1266   0A27 18 00       >            JR      .loop
1266   0A29 00          >            NOP
1267   0A2A C3 EC 09                JP      sync_frame          ; wait for a frame      ' 10    | 26 (254)
1268   0A2D             
1269   0A2D             .do_pcm                                 ;                       ' 244
1270   0A2D C3 1B 05                JP      pcm_mix             ; do pcm mix again      ' 10    | (254)
1271   0A30             
1272   0A30             .do_xgm                                 ;                       ' 163
1273   0A30                         wait81                      ; sync                  ' 81    |
1273   0A30 3E 04       >            LD      A, w            ; 7-2
1273   0A32 3D          >            DEC     A               ; 4
1273   0A33 20 FD       >            JR      NZ, .loop       ; 12
1273   0A35 00          >            NOP
1273   0A36 00          >            NOP
1273   0A37 3E 00       >            LD      A, $0
1274   0A39 11 00 17                LD      DE, XGM_BUFFER      ; DE point to XGM buf   ' 10    | 91 (254)
1275   0A3C             
1276   0A3C             
1277   0A3C             ;    LD  A, (VCOUNTER)
1278   0A3C             ;    LD  (DEBUG_7), A
1279   0A3C             
1280   0A3C             ; execute XGM command
1281   0A3C             ; -------------------
1282   0A3C             
1283   0A3C             ; $BC+X+Y
1284   0A3C             execute_xgm
1285   0A3C                         sampleOutput                ;                       ' 36    | (36)
1285   0A3C D9          >            EXX                     ;                           ' 4     | 4
1285   0A3D 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1285   0A3E 03          >            INC     BC              ; increment read address    ' 6     |
1285   0A3F CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1285   0A41 12          >            LD      (DE), A         ; play sample               ' 7     |
1285   0A42 D9          >            EXX                     ;                           ' 4     | (36)
1286   0A43             
1287   0A43 1A                      LD      A, (DE)             ; A = command           ' 7     |
1288   0A44 32 49 0A                LD      (.ld_hl_xx + 1), A  ; set jump address      ' 13    |
1289   0A47 1C                      INC     E                   ; next command          ' 4     | 44 (80)
1290   0A48             .ld_hl_xx                               ;                       '       |
1291   0A48 2A 00 16                LD      HL, (JUMP_TABLE)    ; LD HL, (jt)           ' 16    |
1292   0A4B E9                      JP      (HL)                ;                       ' 4     |
1293   0A4C             
1294   0A4C             
1295   0A4C             ; next frame command
1296   0A4C             ; ------------------
1297   0A4C             
1298   0A4C             com_next_frame                          ; 00                    ' 80
1299   0A4C C3 49 12                JP      xgm_done            ; XGM frame done        ' 10    | (90)
1300   0A4F             
1301   0A4F             
1302   0A4F             ; PSG command
1303   0A4F             ; -----------
1304   0A4F             
1305   0A4F             com_psg_tone_w0                         ; 10                    ' 80
1306   0A4F                         wait126                     ; sync                  ' 126   |
1306   0A4F 3E 07       >            LD      A, w            ; 7-2
1306   0A51 3D          >            DEC     A               ; 4
1306   0A52 20 FD       >            JR      NZ, .loop       ; 12
1306   0A54 18 00       >            JR      .loop
1307   0A56 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 146 (226)
1308   0A59 C3 C6 0A                JP      psg_tone_write0     ;                       ' 10    |
1309   0A5C             
1310   0A5C             com_psg_tone_w1                         ; 11                    ' 80
1311   0A5C                         wait108                     ; sync                  ' 108   |
1311   0A5C 3E 06       >            LD      A, w            ; 7-2
1311   0A5E 3D          >            DEC     A               ; 4
1311   0A5F 20 FD       >            JR      NZ, .loop       ; 12
1311   0A61 C3 64 0A    >            JP      .loop
1312   0A64 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 128 (208)
1313   0A67 C3 C3 0A                JP      psg_tone_write1     ;                       ' 10    |
1314   0A6A             
1315   0A6A             com_psg_tone_w2                         ; 12                    ' 80
1316   0A6A                         wait90                      ; sync                  ' 90    |
1316   0A6A 3E 05       >            LD      A, w            ; 7-2
1316   0A6C 3D          >            DEC     A               ; 4
1316   0A6D 20 FD       >            JR      NZ, .loop       ; 12
1316   0A6F 00          >            NOP
1316   0A70 00          >            NOP
1317   0A71 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 110 (190)
1318   0A74 C3 C0 0A                JP      psg_tone_write2     ;                       ' 10    |
1319   0A77             
1320   0A77             com_psg_tone_w3                         ; 13                    ' 80
1321   0A77                         wait72                      ; sync                  ' 72    |
1321   0A77 3E 03       >            LD      A, w            ; 7-2
1321   0A79 3D          >            DEC     A               ; 4
1321   0A7A 20 FD       >            JR      NZ, .loop       ; 12
1321   0A7C ED 4F       >            LD      R, A
1321   0A7E ED 4F       >            LD      R, A
1321   0A80 00          >            NOP
1322   0A81 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 92 (172)
1323   0A84 C3 BD 0A                JP      psg_tone_write3     ;                       ' 10    |
1324   0A87             
1325   0A87             com_psg_tone_w4                         ; 14                    ' 80
1326   0A87                         wait54                      ; sync                  ' 54    |
1326   0A87 3E 03       >            LD      A, w            ; 7-2
1326   0A89 3D          >            DEC     A               ; 4
1326   0A8A 20 FD       >            JR      NZ, .loop       ; 12
1326   0A8C 00          >            NOP
1327   0A8D 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 74 (154)
1328   0A90 C3 BA 0A                JP      psg_tone_write4     ;                       ' 10    |
1329   0A93             
1330   0A93             com_psg_tone_w5                         ; 15                    ' 80
1331   0A93                         wait36                      ; sync                  ' 36    |
1331   0A93 ED 4F       >            LD      R, A
1331   0A95 ED 4F       >            LD      R, A
1331   0A97 ED 4F       >            LD      R, A
1331   0A99 ED 4F       >            LD      R, A
1332   0A9B 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 56 (136)
1333   0A9E C3 B7 0A                JP      psg_tone_write5     ;                       ' 10    |
1334   0AA1             
1335   0AA1             com_psg_tone_w6                         ; 16                    ' 80
1336   0AA1                         wait18                      ; sync                  ' 18    |
1336   0AA1 ED 4F       >            LD      R, A
1336   0AA3 ED 4F       >            LD      R, A
1337   0AA5 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 38 (118)
1338   0AA8 C3 B4 0A                JP      psg_tone_write6     ;                       ' 10    |
1339   0AAB             
1340   0AAB             com_psg_tone_w7                         ; 17                    ' 80
1341   0AAB 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 20 (100)
1342   0AAE C3 B1 0A                JP      psg_tone_write7     ;                       ' 10    |
1343   0AB1             
1344   0AB1             
1345   0AB1             psg_tone_write7                         ;                       ' 100
1346   0AB1 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1347   0AB2 1C                      INC     E                   ; next data             ' 4     | 18 (118)
1348   0AB3 77                      LD      (HL), A             ; write to PSG          ' 7     |
1349   0AB4             
1350   0AB4             psg_tone_write6
1351   0AB4 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1352   0AB5 1C                      INC     E                   ; next data             ' 4     | 18 (136)
1353   0AB6 77                      LD      (HL), A             ; write to PSG          ' 7     |
1354   0AB7             
1355   0AB7             psg_tone_write5
1356   0AB7 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1357   0AB8 1C                      INC     E                   ; next data             ' 4     | 18 (154)
1358   0AB9 77                      LD      (HL), A             ; write to PSG          ' 7     |
1359   0ABA             
1360   0ABA             psg_tone_write4
1361   0ABA 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1362   0ABB 1C                      INC     E                   ; next data             ' 4     | 18 (172)
1363   0ABC 77                      LD      (HL), A             ; write to PSG          ' 7     |
1364   0ABD             
1365   0ABD             psg_tone_write3
1366   0ABD 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1367   0ABE 1C                      INC     E                   ; next data             ' 4     | 18 (190)
1368   0ABF 77                      LD      (HL), A             ; write to PSG          ' 7     |
1369   0AC0             
1370   0AC0             psg_tone_write2
1371   0AC0 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1372   0AC1 1C                      INC     E                   ; next data             ' 4     | 18 (208)
1373   0AC2 77                      LD      (HL), A             ; write to PSG          ' 7     |
1374   0AC3             
1375   0AC3             psg_tone_write1
1376   0AC3 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1377   0AC4 1C                      INC     E                   ; next data             ' 4     | 18 (226)
1378   0AC5 77                      LD      (HL), A             ; write to PSG          ' 7     |
1379   0AC6             
1380   0AC6             psg_tone_write0
1381   0AC6 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1382   0AC7 1C                      INC     E                   ; next data             ' 4     | 18 (244)
1383   0AC8 77                      LD      (HL), A             ; write to PSG          ' 7     |
1384   0AC9             
1385   0AC9 C3 3C 0A                JP      execute_xgm         ;                       ' 10    | (254)
1386   0ACC             
1387   0ACC             
1388   0ACC             com_psg_env_w0                          ; 18                    ' 80
1389   0ACC                         wait72                      ; sync                  ' 72    |
1389   0ACC 3E 03       >            LD      A, w            ; 7-2
1389   0ACE 3D          >            DEC     A               ; 4
1389   0ACF 20 FD       >            JR      NZ, .loop       ; 12
1389   0AD1 ED 4F       >            LD      R, A
1389   0AD3 ED 4F       >            LD      R, A
1389   0AD5 00          >            NOP
1390   0AD6 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 102 (182)
1391   0AD9 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1392   0ADC C3 40 0B                JP      psg_env_write0      ;                       ' 10    |
1393   0ADF             
1394   0ADF             com_psg_env_w1                          ; 18                    ' 80
1395   0ADF                         wait10                      ; sync                  ' 10    |
1395   0ADF C3 E2 0A    >            JP      .loop
1396   0AE2 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 40 (120)
1397   0AE5 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1398   0AE8 C3 33 0B                JP      psg_env_write1      ;                       ' 10    |
1399   0AEB             
1400   0AEB             com_psg_env_w2                          ; 18                    ' 80
1401   0AEB                         wait154                     ; sync                  ' 154   |
1401   0AEB 3E 09       >            LD      A, w            ; 7-2
1401   0AED 3D          >            DEC     A               ; 4
1401   0AEE 20 FD       >            JR      NZ, .loop       ; 12
1401   0AF0 00          >            NOP
1401   0AF1 00          >            NOP
1402   0AF2 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 174 (254)
1403   0AF5 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1404   0AF8             
1405   0AF8                         sampleOutput                ;                       ' 36    | (36)
1405   0AF8 D9          >            EXX                     ;                           ' 4     | 4
1405   0AF9 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1405   0AFA 03          >            INC     BC              ; increment read address    ' 6     |
1405   0AFB CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1405   0AFD 12          >            LD      (DE), A         ; play sample               ' 7     |
1405   0AFE D9          >            EXX                     ;                           ' 4     | (36)
1406   0AFF             
1407   0AFF                         wait12                      ; sync                  ' 12    |
1407   0AFF 18 00       >            JR      .loop
1408   0B01 C3 26 0B                JP      psg_env_write2      ;                       ' 10    | 22 (58)
1409   0B04             
1410   0B04             com_psg_env_w3                          ; 18                    ' 80
1411   0B04                         wait110                     ; sync                  ' 110   |
1411   0B04 3E 06       >            LD      A, w            ; 7-2
1411   0B06 3D          >            DEC     A               ; 4
1411   0B07 20 FD       >            JR      NZ, .loop       ; 12
1411   0B09 18 00       >            JR      .loop
1412   0B0B 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG port  ' 10    | 130 (210)
1413   0B0E 01 5C 01                LD      BC, PSG_ENV_SAV     ; BC point on PSG save  ' 10    |
1414   0B11             
1415   0B11             psg_env_write3
1416   0B11 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1417   0B12 07                      RLCA                        ;                       ' 4     |
1418   0B13 07                      RLCA                        ;                       ' 4     |
1419   0B14 07                      RLCA                        ;                       ' 4     |
1420   0B15 E6 03                   AND     $3                  ; A = channel number    ' 7     | 41 (254-3)
1421   0B17 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     |
1422   0B19 4F                      LD      C, A                ; BC point on save      ' 4     |
1423   0B1A                         wait4                       ; sync                  ' 4     |
1423   0B1A 00          >            NOP
1424   0B1B             
1425   0B1B                         sampleOutput                ;                       ' 36    | (36-3)
1425   0B1B D9          >            EXX                     ;                           ' 4     | 4
1425   0B1C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1425   0B1D 03          >            INC     BC              ; increment read address    ' 6     |
1425   0B1E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
1425   0B20 12          >            LD      (DE), A         ; play sample               ' 7     |
1425   0B21 D9          >            EXX                     ;                           ' 4     | (36)
1426   0B22             
1427   0B22 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1428   0B23 1C                      INC     E                   ; next data             ' 4     | 25 (58)
1429   0B24 77                      LD      (HL), A             ; write to PSG          ' 7     |
1430   0B25 02                      LD      (BC), A             ; write to save         ' 7     |
1431   0B26             
1432   0B26             psg_env_write2                          ;                       ' 58
1433   0B26 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1434   0B27 07                      RLCA                        ;                       ' 4     |
1435   0B28 07                      RLCA                        ;                       ' 4     |
1436   0B29 07                      RLCA                        ;                       ' 4     |
1437   0B2A E6 03                   AND     $3                  ; A = channel number    ' 7     |
1438   0B2C C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (120)
1439   0B2E 4F                      LD      C, A                ; BC point on save      ' 4     |
1440   0B2F 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1441   0B30 1C                      INC     E                   ; next data             ' 4     |
1442   0B31 77                      LD      (HL), A             ; write to PSG          ' 7     |
1443   0B32 02                      LD      (BC), A             ; write to save         ' 7     |
1444   0B33             
1445   0B33             psg_env_write1
1446   0B33 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1447   0B34 07                      RLCA                        ;                       ' 4     |
1448   0B35 07                      RLCA                        ;                       ' 4     |
1449   0B36 07                      RLCA                        ;                       ' 4     |
1450   0B37 E6 03                   AND     $3                  ; A = channel number    ' 7     |
1451   0B39 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (182)
1452   0B3B 4F                      LD      C, A                ; BC point on save      ' 4     |
1453   0B3C 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1454   0B3D 1C                      INC     E                   ; next data             ' 4     |
1455   0B3E 77                      LD      (HL), A             ; write to PSG          ' 7     |
1456   0B3F 02                      LD      (BC), A             ; write to save         ' 7     |
1457   0B40             
1458   0B40             psg_env_write0
1459   0B40 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1460   0B41 07                      RLCA                        ;                       ' 4     |
1461   0B42 07                      RLCA                        ;                       ' 4     |
1462   0B43 07                      RLCA                        ;                       ' 4     |
1463   0B44 E6 03                   AND     $3                  ; A = channel number    ' 7     |
1464   0B46 C6 5C                   ADD    (PSG_ENV_SAV & $FF)  ; add offset            ' 7     | 62 (244)
1465   0B48 4F                      LD      C, A                ; BC point on save      ' 4     |
1466   0B49 1A                      LD      A, (DE)             ; A = PSG data          ' 7     |
1467   0B4A 1C                      INC     E                   ; next data             ' 4     |
1468   0B4B 77                      LD      (HL), A             ; write to PSG          ' 7     |
1469   0B4C 02                      LD      (BC), A             ; write to save         ' 7     |
1470   0B4D             
1471   0B4D C3 3C 0A                JP      execute_xgm         ;                       ' 10    | (254)
1472   0B50             
1473   0B50             
1474   0B50             ; YM port0 command
1475   0B50             ; ----------------
1476   0B50             
1477   0B50             com_ym_port0_w0                         ; 20                    ' 80
1478   0B50                         wait36                      ; sync                  ' 36    |
1478   0B50 ED 4F       >            LD      R, A
1478   0B52 ED 4F       >            LD      R, A
1478   0B54 ED 4F       >            LD      R, A
1478   0B56 ED 4F       >            LD      R, A
1479   0B58 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 66 (146)
1480   0B5B 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1481   0B5E C3 50 0D                JP      ym_port_write0      ;                       ' 10    |
1482   0B61             
1483   0B61             com_ym_port0_w1                         ; 21                    ' 80
1484   0B61 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1485   0B64 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 30 (110)
1486   0B67 C3 4A 0D                JP      ym_port_write1      ;                       ' 10    |
1487   0B6A             
1488   0B6A             com_ym_port0_w2                         ; 22                    ' 80
1489   0B6A                         wait52                      ; sync                  ' 52    |
1489   0B6A 3E 02       >            LD      A, w            ; 7-2
1489   0B6C 3D          >            DEC     A               ; 4
1489   0B6D 20 FD       >            JR      NZ, .loop       ; 12
1489   0B6F ED 4F       >            LD      R, A
1489   0B71 ED 4F       >            LD      R, A
1490   0B73 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1491   0B76 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1492   0B79 C3 47 0E                JP      ym_port_write2      ;                       ' 10    |
1493   0B7C             
1494   0B7C             com_ym_port0_w3                         ; 23                    ' 80
1495   0B7C 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1496   0B7F 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1497   0B81 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1498   0B82 C3 26 0D                JP      com_ym_port_w3      ; execute               ' 10    |
1499   0B85             
1500   0B85             com_ym_port0_w4                         ; 24                    ' 80
1501   0B85                         wait144                     ; sync                  ' 144   |
1501   0B85 3E 08       >            LD      A, w            ; 7-2
1501   0B87 3D          >            DEC     A               ; 4
1501   0B88 20 FD       >            JR      NZ, .loop       ; 12
1501   0B8A 3E 00       >            LD      A, $0
1501   0B8C 3E 00       >            LD      A, $0
1502   0B8E 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 178 (254+4)
1503   0B91 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1504   0B94 D9                      EXX                         ;                       ' 4     |
1505   0B95 C3 25 0E                JP      ym_port_write4      ;                       ' 10    |
1506   0B98             
1507   0B98             com_ym_port0_w5                         ; 25                    ' 80
1508   0B98                         wait52                      ; sync                  ' 52    |
1508   0B98 3E 02       >            LD      A, w            ; 7-2
1508   0B9A 3D          >            DEC     A               ; 4
1508   0B9B 20 FD       >            JR      NZ, .loop       ; 12
1508   0B9D ED 4F       >            LD      R, A
1508   0B9F ED 4F       >            LD      R, A
1509   0BA1 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1510   0BA4 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1511   0BA7 C3 12 0E                JP      ym_port_write5      ;                       ' 10    |
1512   0BAA             
1513   0BAA             com_ym_port0_w6                         ; 26                    ' 80
1514   0BAA 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1515   0BAD 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1516   0BAF 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1517   0BB0 C3 2F 0D                JP      com_ym_port_w6      ; execute               ' 10    |
1518   0BB3             
1519   0BB3             com_ym_port0_w7                         ; 27                    ' 80
1520   0BB3                         wait144                     ; sync                  ' 144   |
1520   0BB3 3E 08       >            LD      A, w            ; 7-2
1520   0BB5 3D          >            DEC     A               ; 4
1520   0BB6 20 FD       >            JR      NZ, .loop       ; 12
1520   0BB8 3E 00       >            LD      A, $0
1520   0BBA 3E 00       >            LD      A, $0
1521   0BBC 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 178 (254+4)
1522   0BBF 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1523   0BC2 D9                      EXX                         ;                       ' 4     |
1524   0BC3 C3 F0 0D                JP      ym_port_write7      ;                       ' 10    |
1525   0BC6             
1526   0BC6             com_ym_port0_w8                         ; 28                    ' 80
1527   0BC6                         wait52                      ; sync                  ' 52    |
1527   0BC6 3E 02       >            LD      A, w            ; 7-2
1527   0BC8 3D          >            DEC     A               ; 4
1527   0BC9 20 FD       >            JR      NZ, .loop       ; 12
1527   0BCB ED 4F       >            LD      R, A
1527   0BCD ED 4F       >            LD      R, A
1528   0BCF 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1529   0BD2 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1530   0BD5 C3 DD 0D                JP      ym_port_write8      ;                       ' 10    |
1531   0BD8             
1532   0BD8             com_ym_port0_w9                         ; 29                    ' 80
1533   0BD8 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1534   0BDB 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1535   0BDD 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1536   0BDE C3 38 0D                JP      com_ym_port_w9      ; execute               ' 10    |
1537   0BE1             
1538   0BE1             com_ym_port0_wA                         ; 2A                    ' 80
1539   0BE1                         wait144                     ; sync                  ' 144   |
1539   0BE1 3E 08       >            LD      A, w            ; 7-2
1539   0BE3 3D          >            DEC     A               ; 4
1539   0BE4 20 FD       >            JR      NZ, .loop       ; 12
1539   0BE6 3E 00       >            LD      A, $0
1539   0BE8 3E 00       >            LD      A, $0
1540   0BEA 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 178 (254+4)
1541   0BED 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1542   0BF0 D9                      EXX                         ;                       ' 4     |
1543   0BF1 C3 BB 0D                JP      ym_port_writeA      ;                       ' 10    |
1544   0BF4             
1545   0BF4             com_ym_port0_wB                         ; 2B                    ' 80
1546   0BF4                         wait52                      ; sync                  ' 52    |
1546   0BF4 3E 02       >            LD      A, w            ; 7-2
1546   0BF6 3D          >            DEC     A               ; 4
1546   0BF7 20 FD       >            JR      NZ, .loop       ; 12
1546   0BF9 ED 4F       >            LD      R, A
1546   0BFB ED 4F       >            LD      R, A
1547   0BFD 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 82 (162)
1548   0C00 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1549   0C03 C3 A8 0D                JP      ym_port_writeB      ;                       ' 10    |
1550   0C06             
1551   0C06             com_ym_port0_wC                         ; 2C                    ' 80
1552   0C06 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1553   0C09 44 4D                   LD      BC, HL              ; BC point on YM port0  ' 10    |
1554   0C0B 03                      INC     BC                  ; BC point on YM port1  ' 6     | 36 (116)
1555   0C0C C3 41 0D                JP      com_ym_port_wC      ; execute               ' 10    |
1556   0C0F             
1557   0C0F             com_ym_port0_wD                         ; 2D                    ' 80
1558   0C0F                         wait144                     ; sync                  ' 144   |
1558   0C0F 3E 08       >            LD      A, w            ; 7-2
1558   0C11 3D          >            DEC     A               ; 4
1558   0C12 20 FD       >            JR      NZ, .loop       ; 12
1558   0C14 3E 00       >            LD      A, $0
1558   0C16 3E 00       >            LD      A, $0
1559   0C18 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1560   0C1B 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1561   0C1E C3 85 0D                JP      ym_port_writeD      ;                       ' 10    |
1562   0C21             
1563   0C21             com_ym_port0_wE                         ; 2E                    ' 80
1564   0C21                         wait36                      ; sync                  ' 36    |
1564   0C21 ED 4F       >            LD      R, A
1564   0C23 ED 4F       >            LD      R, A
1564   0C25 ED 4F       >            LD      R, A
1564   0C27 ED 4F       >            LD      R, A
1565   0C29 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 66 (146)
1566   0C2C 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1567   0C2F C3 6F 0D                JP      ym_port_writeE      ;                       ' 10    |
1568   0C32             
1569   0C32             com_ym_port0_wF                         ; 2F                    ' 80
1570   0C32 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1571   0C35 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 30 (110)
1572   0C38 C3 69 0D                JP      ym_port_writeF      ;                       ' 10    |
1573   0C3B             
1574   0C3B             
1575   0C3B             ; YM port2 command
1576   0C3B             ; ----------------
1577   0C3B             
1578   0C3B             com_ym_port2_w0                         ; 30                    ' 80
1579   0C3B                         wait36                      ; sync                  ' 36    |
1579   0C3B ED 4F       >            LD      R, A
1579   0C3D ED 4F       >            LD      R, A
1579   0C3F ED 4F       >            LD      R, A
1579   0C41 ED 4F       >            LD      R, A
1580   0C43 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 66 (146)
1581   0C46 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1582   0C49 C3 50 0D                JP      ym_port_write0      ;                       ' 10    |
1583   0C4C             
1584   0C4C             com_ym_port2_w1                         ; 31                    ' 80
1585   0C4C 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1586   0C4F 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    | 30 (110)
1587   0C52 C3 4A 0D                JP      ym_port_write1      ;                       ' 10    |
1588   0C55             
1589   0C55             com_ym_port2_w2                         ; 32                    ' 80
1590   0C55                         wait52                      ; sync                  ' 52    |
1590   0C55 3E 02       >            LD      A, w            ; 7-2
1590   0C57 3D          >            DEC     A               ; 4
1590   0C58 20 FD       >            JR      NZ, .loop       ; 12
1590   0C5A ED 4F       >            LD      R, A
1590   0C5C ED 4F       >            LD      R, A
1591   0C5E 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1592   0C61 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1593   0C64 C3 47 0E                JP      ym_port_write2      ;                       ' 10    |
1594   0C67             
1595   0C67             com_ym_port2_w3                         ; 33                    ' 80
1596   0C67 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1597   0C6A 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1598   0C6C 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1599   0C6D C3 26 0D                JP      com_ym_port_w3      ; execute               ' 10    |
1600   0C70             
1601   0C70             com_ym_port2_w4                         ; 34                    ' 80
1602   0C70                         wait144                     ; sync                  ' 144   |
1602   0C70 3E 08       >            LD      A, w            ; 7-2
1602   0C72 3D          >            DEC     A               ; 4
1602   0C73 20 FD       >            JR      NZ, .loop       ; 12
1602   0C75 3E 00       >            LD      A, $0
1602   0C77 3E 00       >            LD      A, $0
1603   0C79 21 02 40                LD      HL, YMPORT2         ; HL point on YM port0  ' 10    | 178 (254+4)
1604   0C7C 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1605   0C7F D9                      EXX                         ;                       ' 4     |
1606   0C80 C3 25 0E                JP      ym_port_write4      ;                       ' 10    |
1607   0C83             
1608   0C83             com_ym_port2_w5                         ; 35                    ' 80
1609   0C83                         wait52                      ; sync                  ' 52    |
1609   0C83 3E 02       >            LD      A, w            ; 7-2
1609   0C85 3D          >            DEC     A               ; 4
1609   0C86 20 FD       >            JR      NZ, .loop       ; 12
1609   0C88 ED 4F       >            LD      R, A
1609   0C8A ED 4F       >            LD      R, A
1610   0C8C 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1611   0C8F 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1612   0C92 C3 12 0E                JP      ym_port_write5      ;                       ' 10    |
1613   0C95             
1614   0C95             com_ym_port2_w6                         ; 36                    ' 80
1615   0C95 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1616   0C98 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1617   0C9A 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1618   0C9B C3 2F 0D                JP      com_ym_port_w6      ; execute               ' 10    |
1619   0C9E             
1620   0C9E             com_ym_port2_w7                         ; 37                    ' 80
1621   0C9E                         wait144                     ; sync                  ' 144   |
1621   0C9E 3E 08       >            LD      A, w            ; 7-2
1621   0CA0 3D          >            DEC     A               ; 4
1621   0CA1 20 FD       >            JR      NZ, .loop       ; 12
1621   0CA3 3E 00       >            LD      A, $0
1621   0CA5 3E 00       >            LD      A, $0
1622   0CA7 21 02 40                LD      HL, YMPORT2         ; HL point on YM port0  ' 10    | 178 (254+4)
1623   0CAA 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1624   0CAD D9                      EXX                         ;                       ' 4     |
1625   0CAE C3 F0 0D                JP      ym_port_write7      ;                       ' 10    |
1626   0CB1             
1627   0CB1             com_ym_port2_w8                         ; 38                    ' 80
1628   0CB1                         wait52                      ; sync                  ' 52    |
1628   0CB1 3E 02       >            LD      A, w            ; 7-2
1628   0CB3 3D          >            DEC     A               ; 4
1628   0CB4 20 FD       >            JR      NZ, .loop       ; 12
1628   0CB6 ED 4F       >            LD      R, A
1628   0CB8 ED 4F       >            LD      R, A
1629   0CBA 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1630   0CBD 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1631   0CC0 C3 DD 0D                JP      ym_port_write8      ;                       ' 10    |
1632   0CC3             
1633   0CC3             com_ym_port2_w9                         ; 39                    ' 80
1634   0CC3 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1635   0CC6 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1636   0CC8 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1637   0CC9 C3 38 0D                JP      com_ym_port_w9      ; execute               ' 10    |
1638   0CCC             
1639   0CCC             com_ym_port2_wA                         ; 3A                    ' 80
1640   0CCC                         wait144                     ; sync                  ' 144   |
1640   0CCC 3E 08       >            LD      A, w            ; 7-2
1640   0CCE 3D          >            DEC     A               ; 4
1640   0CCF 20 FD       >            JR      NZ, .loop       ; 12
1640   0CD1 3E 00       >            LD      A, $0
1640   0CD3 3E 00       >            LD      A, $0
1641   0CD5 21 02 40                LD      HL, YMPORT2         ; HL point on YM port0  ' 10    | 178 (254+4)
1642   0CD8 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1643   0CDB D9                      EXX                         ;                       ' 4     |
1644   0CDC C3 BB 0D                JP      ym_port_writeA      ;                       ' 10    |
1645   0CDF             
1646   0CDF             com_ym_port2_wB                         ; 3B                    ' 80
1647   0CDF                         wait52                      ; sync                  ' 52    |
1647   0CDF 3E 02       >            LD      A, w            ; 7-2
1647   0CE1 3D          >            DEC     A               ; 4
1647   0CE2 20 FD       >            JR      NZ, .loop       ; 12
1647   0CE4 ED 4F       >            LD      R, A
1647   0CE6 ED 4F       >            LD      R, A
1648   0CE8 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 82 (162)
1649   0CEB 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1650   0CEE C3 A8 0D                JP      ym_port_writeB      ;                       ' 10    |
1651   0CF1             
1652   0CF1             com_ym_port2_wC                         ; 3C                    ' 80
1653   0CF1 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1654   0CF4 44 4D                   LD      BC, HL              ; BC point on YM port2  ' 10    |
1655   0CF6 03                      INC     BC                  ; BC point on YM port3  ' 6     | 36 (116)
1656   0CF7 C3 41 0D                JP      com_ym_port_wC      ; execute               ' 10    |
1657   0CFA             
1658   0CFA             com_ym_port2_wD                         ; 3D                    ' 80
1659   0CFA                         wait144                     ; sync                  ' 144   |
1659   0CFA 3E 08       >            LD      A, w            ; 7-2
1659   0CFC 3D          >            DEC     A               ; 4
1659   0CFD 20 FD       >            JR      NZ, .loop       ; 12
1659   0CFF 3E 00       >            LD      A, $0
1659   0D01 3E 00       >            LD      A, $0
1660   0D03 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 174 (254)
1661   0D06 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1662   0D09 C3 85 0D                JP      ym_port_writeD      ;                       ' 10    |
1663   0D0C             
1664   0D0C             com_ym_port2_wE                         ; 3E                    ' 80
1665   0D0C                         wait36                      ; sync                  ' 36    |
1665   0D0C ED 4F       >            LD      R, A
1665   0D0E ED 4F       >            LD      R, A
1665   0D10 ED 4F       >            LD      R, A
1665   0D12 ED 4F       >            LD      R, A
1666   0D14 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    | 66 (146)
1667   0D17 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    |
1668   0D1A C3 6F 0D                JP      ym_port_writeE      ;                       ' 10    |
1669   0D1D             
1670   0D1D             com_ym_port2_wF                         ; 3F                    ' 80
1671   0D1D 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2  ' 10    |
1672   0D20 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3  ' 10    | 30 (110)
1673   0D23 C3 69 0D                JP      ym_port_writeF      ;                       ' 10    |
1674   0D26             
1675   0D26             
1676   0D26             com_ym_port_w3                          ;                       ' 116
1677   0D26 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1678   0D27 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1679   0D28 1C                      INC     E                   ; next data             ' 4     |
1680   0D29 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1681   0D2A 1C                      INC     E                   ; next data             ' 4     |
1682   0D2B 02                      LD      (BC), A             ; write data to YM      ' 7     |
1683   0D2C C3 47 0E                JP      ym_port_write2      ;                       ' 10    | (162)
1684   0D2F             
1685   0D2F             com_ym_port_w6                          ;                       ' 116
1686   0D2F 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1687   0D30 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1688   0D31 1C                      INC     E                   ; next data             ' 4     |
1689   0D32 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1690   0D33 1C                      INC     E                   ; next data             ' 4     |
1691   0D34 02                      LD      (BC), A             ; write data to YM      ' 7     |
1692   0D35 C3 12 0E                JP      ym_port_write5      ;                       ' 10    | (162)
1693   0D38             
1694   0D38             com_ym_port_w9                          ;                       ' 116
1695   0D38 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1696   0D39 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1697   0D3A 1C                      INC     E                   ; next data             ' 4     |
1698   0D3B 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1699   0D3C 1C                      INC     E                   ; next data             ' 4     |
1700   0D3D 02                      LD      (BC), A             ; write data to YM      ' 7     |
1701   0D3E C3 DD 0D                JP      ym_port_write8      ;                       ' 10    | (162)
1702   0D41             
1703   0D41             com_ym_port_wC                          ;                       ' 116
1704   0D41 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1705   0D42 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1706   0D43 1C                      INC     E                   ; next data             ' 4     |
1707   0D44 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (152)
1708   0D45 1C                      INC     E                   ; next data             ' 4     |
1709   0D46 02                      LD      (BC), A             ; write data to YM      ' 7     |
1710   0D47 C3 A8 0D                JP      ym_port_writeB      ;                       ' 10    | (162)
1711   0D4A             
1712   0D4A             
1713   0D4A             ym_port_write1                          ;                       ' 110
1714   0D4A 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1715   0D4B 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1716   0D4C 1C                      INC     E                   ; next data             ' 4     |
1717   0D4D 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (146)
1718   0D4E 1C                      INC     E                   ; next data             ' 4     |
1719   0D4F 02                      LD      (BC), A             ; write data to YM      ' 7     |
1720   0D50             
1721   0D50             ym_port_write0
1722   0D50 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1723   0D51                         waitYMReady                 ; wait YM to be ready   ' 30    |
1723   0D51 D9          >            EXX                     ;                           ' 4     | (4)
1723   0D52 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1723   0D54 C2 52 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1723   0D57 D9          >            EXX                     ;                           ' 4     | (30)
1724   0D58 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (212)
1725   0D59 1C                      INC     E                   ; next data             ' 4     |
1726   0D5A 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1727   0D5B 1C                      INC     E                   ; next data             ' 4     |
1728   0D5C 02                      LD      (BC), A             ; write to YM           ' 7     |
1729   0D5D             
1730   0D5D D9                      EXX                         ; switch to HL' (port0) ' 4     |
1731   0D5E             .wait                                   ;                       '       |
1732   0D5E CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1733   0D60 C2 5E 0D                JP      NZ, .wait           ; wait while busy       ' 10    | 40 (252)
1734   0D63                                                     ;                       '       |
1735   0D63 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1736   0D65 D9                      EXX                         ; switch back           ' 4     |
1737   0D66             
1738   0D66 C3 3C 0A                JP      execute_xgm         ; +8 cycles here        ' 10    | (254+8)
1739   0D69             
1740   0D69             ym_port_writeF                          ;                       ' 110
1741   0D69 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1742   0D6A 77                      LD      (HL), A             ; write reg num to YM   ' 7     |
1743   0D6B 1C                      INC     E                   ; next data             ' 4     |
1744   0D6C 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     | 36 (146)
1745   0D6D 1C                      INC     E                   ; next data             ' 4     |
1746   0D6E 02                      LD      (BC), A             ; write data to YM      ' 7     |
1747   0D6F             
1748   0D6F             ym_port_writeE
1749   0D6F 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1750   0D70                         waitYMReady                 ; wait YM to be ready   ' 30    |
1750   0D70 D9          >            EXX                     ;                           ' 4     | (4)
1750   0D71 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1750   0D73 C2 71 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1750   0D76 D9          >            EXX                     ;                           ' 4     | (30)
1751   0D77 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (212)
1752   0D78 1C                      INC     E                   ; next data             ' 4     |
1753   0D79 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1754   0D7A 1C                      INC     E                   ; next data             ' 4     |
1755   0D7B 02                      LD      (BC), A             ; write to YM           ' 7     |
1756   0D7C             
1757   0D7C                         wait12                      ; sync                  ' 12    |
1757   0D7C 18 00       >            JR      .loop
1758   0D7E                         waitYMReady                 ; wait YM to be ready   ' 30    | 42 (254)
1758   0D7E D9          >            EXX                     ;                           ' 4     | (4)
1758   0D7F CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1758   0D81 C2 7F 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1758   0D84 D9          >            EXX                     ;                           ' 4     | (30)
1759   0D85             
1760   0D85             ym_port_writeD
1761   0D85                         sampleOutputSafe            ;                       ' 46    | (46)
1761   0D85 D9          >            EXX                     ;                           ' 4     | 4
1761   0D86 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
1761   0D88 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1761   0D89 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1761   0D8A CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1761   0D8C 12          >            LD      (DE), A         ; play sample               ' 7     |
1761   0D8D D9          >            EXX                     ;                           ' 4     | (46)
1762   0D8E             
1763   0D8E 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1764   0D8F                         waitYMReady                 ; wait YM to be ready   ' 30    |
1764   0D8F D9          >            EXX                     ;                           ' 4     | (4)
1764   0D90 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1764   0D92 C2 90 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1764   0D95 D9          >            EXX                     ;                           ' 4     | (30)
1765   0D96 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1766   0D97 1C                      INC     E                   ; next data             ' 4     |
1767   0D98 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1768   0D99 1C                      INC     E                   ; next data             ' 4     |
1769   0D9A 02                      LD      (BC), A             ; write to YM           ' 7     |
1770   0D9B             
1771   0D9B             ;ym_port_writeC
1772   0D9B 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1773   0D9C                         waitYMReady                 ; wait YM to be ready   ' 30    |
1773   0D9C D9          >            EXX                     ;                           ' 4     | (4)
1773   0D9D CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1773   0D9F C2 9D 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1773   0DA2 D9          >            EXX                     ;                           ' 4     | (30)
1774   0DA3 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1775   0DA4 1C                      INC     E                   ; next data             ' 4     |
1776   0DA5 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1777   0DA6 1C                      INC     E                   ; next data             ' 4     |
1778   0DA7 02                      LD      (BC), A             ; write to YM           ' 7     |
1779   0DA8             
1780   0DA8             ym_port_writeB
1781   0DA8 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1782   0DA9                         waitYMReady                 ; wait YM to be ready   ' 30    |
1782   0DA9 D9          >            EXX                     ;                           ' 4     | (4)
1782   0DAA CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1782   0DAC C2 AA 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1782   0DAF D9          >            EXX                     ;                           ' 4     | (30)
1783   0DB0 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1784   0DB1 1C                      INC     E                   ; next data             ' 4     |
1785   0DB2 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1786   0DB3 1C                      INC     E                   ; next data             ' 4     |
1787   0DB4 02                      LD      (BC), A             ; write to YM           ' 7     |
1788   0DB5             
1789   0DB5 D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1790   0DB6             .wait                                   ;                       '       |
1791   0DB6 CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1792   0DB8 C2 B6 0D                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1793   0DBB             
1794   0DBB             ym_port_writeA                          ;                       ' 4
1795   0DBB 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1796   0DBD 0A                      LD      A, (BC)             ;                       ' 7     |
1797   0DBE 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1798   0DBF CB 90                   RES     2, B                ;                       ' 8     |
1799   0DC1 12                      LD      (DE), A             ;                       ' 7     |
1800   0DC2 D9                      EXX                         ;                       ' 4     |
1801   0DC3             
1802   0DC3 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1803   0DC4                         waitYMReady                 ; wait YM to be ready   ' 30    |
1803   0DC4 D9          >            EXX                     ;                           ' 4     | (4)
1803   0DC5 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1803   0DC7 C2 C5 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1803   0DCA D9          >            EXX                     ;                           ' 4     | (30)
1804   0DCB 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1805   0DCC 1C                      INC     E                   ; next data             ' 4     |
1806   0DCD 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1807   0DCE 1C                      INC     E                   ; next data             ' 4     |
1808   0DCF 02                      LD      (BC), A             ; write to YM           ' 7     |
1809   0DD0             
1810   0DD0             ;ym_port_write9
1811   0DD0 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1812   0DD1                         waitYMReady                 ; wait YM to be ready   ' 30    |
1812   0DD1 D9          >            EXX                     ;                           ' 4     | (4)
1812   0DD2 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1812   0DD4 C2 D2 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1812   0DD7 D9          >            EXX                     ;                           ' 4     | (30)
1813   0DD8 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1814   0DD9 1C                      INC     E                   ; next data             ' 4     |
1815   0DDA 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1816   0DDB 1C                      INC     E                   ; next data             ' 4     |
1817   0DDC 02                      LD      (BC), A             ; write to YM           ' 7     |
1818   0DDD             
1819   0DDD             ym_port_write8
1820   0DDD 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1821   0DDE                         waitYMReady                 ; wait YM to be ready   ' 30    |
1821   0DDE D9          >            EXX                     ;                           ' 4     | (4)
1821   0DDF CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1821   0DE1 C2 DF 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1821   0DE4 D9          >            EXX                     ;                           ' 4     | (30)
1822   0DE5 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1823   0DE6 1C                      INC     E                   ; next data             ' 4     |
1824   0DE7 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1825   0DE8 1C                      INC     E                   ; next data             ' 4     |
1826   0DE9 02                      LD      (BC), A             ; write to YM           ' 7     |
1827   0DEA             
1828   0DEA D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1829   0DEB             .wait                                   ;                       '       |
1830   0DEB CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1831   0DED C2 EB 0D                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1832   0DF0             
1833   0DF0             ym_port_write7                          ;                       ' 4
1834   0DF0 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1835   0DF2 0A                      LD      A, (BC)             ;                       ' 7     |
1836   0DF3 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1837   0DF4 CB 90                   RES     2, B                ;                       ' 8     |
1838   0DF6 12                      LD      (DE), A             ;                       ' 7     |
1839   0DF7 D9                      EXX                         ;                       ' 4     |
1840   0DF8             
1841   0DF8 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1842   0DF9                         waitYMReady                 ; wait YM to be ready   ' 30    |
1842   0DF9 D9          >            EXX                     ;                           ' 4     | (4)
1842   0DFA CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1842   0DFC C2 FA 0D    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1842   0DFF D9          >            EXX                     ;                           ' 4     | (30)
1843   0E00 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1844   0E01 1C                      INC     E                   ; next data             ' 4     |
1845   0E02 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1846   0E03 1C                      INC     E                   ; next data             ' 4     |
1847   0E04 02                      LD      (BC), A             ; write to YM           ' 7     |
1848   0E05             
1849   0E05             ;ym_port_write6
1850   0E05 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1851   0E06                         waitYMReady                 ; wait YM to be ready   ' 30    |
1851   0E06 D9          >            EXX                     ;                           ' 4     | (4)
1851   0E07 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1851   0E09 C2 07 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1851   0E0C D9          >            EXX                     ;                           ' 4     | (30)
1852   0E0D 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1853   0E0E 1C                      INC     E                   ; next data             ' 4     |
1854   0E0F 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1855   0E10 1C                      INC     E                   ; next data             ' 4     |
1856   0E11 02                      LD      (BC), A             ; write to YM           ' 7     |
1857   0E12             
1858   0E12             ym_port_write5
1859   0E12 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1860   0E13                         waitYMReady                 ; wait YM to be ready   ' 30    |
1860   0E13 D9          >            EXX                     ;                           ' 4     | (4)
1860   0E14 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1860   0E16 C2 14 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1860   0E19 D9          >            EXX                     ;                           ' 4     | (30)
1861   0E1A 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1862   0E1B 1C                      INC     E                   ; next data             ' 4     |
1863   0E1C 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1864   0E1D 1C                      INC     E                   ; next data             ' 4     |
1865   0E1E 02                      LD      (BC), A             ; write to YM           ' 7     |
1866   0E1F             
1867   0E1F D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1868   0E20             .wait                                   ;                       '       |
1869   0E20 CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1870   0E22 C2 20 0E                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1871   0E25             
1872   0E25             ym_port_write4                          ;                       ' 4
1873   0E25 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1874   0E27 0A                      LD      A, (BC)             ;                       ' 7     |
1875   0E28 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1876   0E29 CB 90                   RES     2, B                ;                       ' 8     |
1877   0E2B 12                      LD      (DE), A             ;                       ' 7     |
1878   0E2C D9                      EXX                         ;                       ' 4     |
1879   0E2D             
1880   0E2D 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1881   0E2E                         waitYMReady                 ; wait YM to be ready   ' 30    |
1881   0E2E D9          >            EXX                     ;                           ' 4     | (4)
1881   0E2F CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1881   0E31 C2 2F 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1881   0E34 D9          >            EXX                     ;                           ' 4     | (30)
1882   0E35 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (112)
1883   0E36 1C                      INC     E                   ; next data             ' 4     |
1884   0E37 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1885   0E38 1C                      INC     E                   ; next data             ' 4     |
1886   0E39 02                      LD      (BC), A             ; write to YM           ' 7     |
1887   0E3A             
1888   0E3A             ;ym_port_write3
1889   0E3A 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1890   0E3B                         waitYMReady                 ; wait YM to be ready   ' 30    |
1890   0E3B D9          >            EXX                     ;                           ' 4     | (4)
1890   0E3C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1890   0E3E C2 3C 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1890   0E41 D9          >            EXX                     ;                           ' 4     | (30)
1891   0E42 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (178)
1892   0E43 1C                      INC     E                   ; next data             ' 4     |
1893   0E44 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1894   0E45 1C                      INC     E                   ; next data             ' 4     |
1895   0E46 02                      LD      (BC), A             ; write to YM           ' 7     |
1896   0E47             
1897   0E47             ym_port_write2
1898   0E47 1A                      LD      A, (DE)             ; A = YM reg num        ' 7     |
1899   0E48                         waitYMReady                 ; wait YM to be ready   ' 30    |
1899   0E48 D9          >            EXX                     ;                           ' 4     | (4)
1899   0E49 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1899   0E4B C2 49 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1899   0E4E D9          >            EXX                     ;                           ' 4     | (30)
1900   0E4F 77                      LD      (HL), A             ; write reg num to YM   ' 7     | 66 (244)
1901   0E50 1C                      INC     E                   ; next data             ' 4     |
1902   0E51 1A                      LD      A, (DE)             ; A = YM reg data       ' 7     |
1903   0E52 1C                      INC     E                   ; next data             ' 4     |
1904   0E53 02                      LD      (BC), A             ; write to YM           ' 7     |
1905   0E54             
1906   0E54 D9                      EXX                         ; switch to HL' (port0) ' 4     | (248)
1907   0E55             .wait                                   ;                       '       |
1908   0E55 CB 7E                   BIT     7, (HL)             ; test YM ready bit     ' 12    |
1909   0E57 C2 55 0E                JP      NZ, .wait           ; wait while busy       ' 10    | 22 (258+14)
1910   0E5A             
1911   0E5A 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1912   0E5C 0A                      LD      A, (BC)             ;                       ' 7     |
1913   0E5D 03                      INC     BC                  ; play sample           ' 6     | 42 (46)
1914   0E5E CB 90                   RES     2, B                ;                       ' 8     |
1915   0E60 12                      LD      (DE), A             ;                       ' 7     |
1916   0E61 D9                      EXX                         ;                       ' 4     |
1917   0E62             
1918   0E62                         wait24                      ; sync                  ' 24    | 54 (100)
1918   0E62 18 00       >            JR      .loop
1918   0E64 18 00       >            JR      .loop
1919   0E66                         waitYMReady                 ; wait YM to be ready   ' 30    |
1919   0E66 D9          >            EXX                     ;                           ' 4     | (4)
1919   0E67 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1919   0E69 C2 67 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1919   0E6C D9          >            EXX                     ;                           ' 4     | (30)
1920   0E6D             
1921   0E6D C3 4A 0D                JP      ym_port_write1      ; execute next          ' 10    | (110)
1922   0E70             
1923   0E70             
1924   0E70             ; YM KEY command
1925   0E70             ; --------------
1926   0E70             
1927   0E70             com_ym_key_w0                           ; 40                    ' 80
1928   0E70                         wait44                      ; sync                  ' 44    |
1928   0E70 3E 02       >            LD      A, w            ; 7-2
1928   0E72 3D          >            DEC     A               ; 4
1928   0E73 20 FD       >            JR      NZ, .loop       ; 12
1928   0E75 C3 78 0E    >            JP      .loop
1929   0E78 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1930   0E7B 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 84 (164)
1931   0E7E 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    |
1932   0E80 C3 EE 0E                JP      ym_key_write0       ;                       ' 10    |
1933   0E83             
1934   0E83             com_ym_key_w1                           ; 41                    ' 80
1935   0E83                         wait4                       ; sync                  ' 4     |
1935   0E83 00          >            NOP
1936   0E84 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1937   0E87 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    | 44 (124)
1938   0E8A 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    |
1939   0E8C C3 E6 0E                JP      ym_key_write1       ;                       ' 10    |
1940   0E8F             
1941   0E8F             com_ym_key_w2                           ; 43                    ' 80
1942   0E8F                         wait134                     ; sync                  ' 134   |
1942   0E8F 3E 08       >            LD      A, w            ; 7-2
1942   0E91 3D          >            DEC     A               ; 4
1942   0E92 20 FD       >            JR      NZ, .loop       ; 12
1942   0E94 00          >            NOP
1943   0E95 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1944   0E98 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1945   0E9B 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 174 (254)
1946   0E9D C3 21 0F                JP      ym_key_write2       ;                       ' 10    |
1947   0EA0             
1948   0EA0             com_ym_key_w3                           ; 44                    ' 80
1949   0EA0                         wait64                      ; sync                  ' 64    |
1949   0EA0 3E 03       >            LD      A, w            ; 7-2
1949   0EA2 3D          >            DEC     A               ; 4
1949   0EA3 20 FD       >            JR      NZ, .loop       ; 12
1949   0EA5 3E 00       >            LD      A, $0
1949   0EA7 3E 00       >            LD      A, $0
1950   0EA9 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1951   0EAC 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1952   0EAF 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 104 (184)
1953   0EB1 C3 12 0F                JP      ym_key_write3       ;                       ' 10    |
1954   0EB4             
1955   0EB4             com_ym_key_w4                           ; 45                    ' 80
1956   0EB4                         wait24                      ; sync                  ' 24    |
1956   0EB4 18 00       >            JR      .loop
1956   0EB6 18 00       >            JR      .loop
1957   0EB8 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    |
1958   0EBB 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1959   0EBE 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 64 (144)
1960   0EC0 C3 0A 0F                JP      ym_key_write4       ;                       ' 10    |
1961   0EC3             
1962   0EC3             com_ym_key_w5                           ; 46                    ' 80
1963   0EC3                         wait154                     ; sync                  ' 174   |
1963   0EC3 3E 09       >            LD      A, w            ; 7-2
1963   0EC5 3D          >            DEC     A               ; 4
1963   0EC6 20 FD       >            JR      NZ, .loop       ; 12
1963   0EC8 00          >            NOP
1963   0EC9 00          >            NOP
1964   0ECA 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0  ' 10    | 174 (254)
1965   0ECD 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1  ' 10    |
1966   0ED0             
1967   0ED0                         sampleOutputSafe            ;                       ' 46    | (46)
1967   0ED0 D9          >            EXX                     ;                           ' 4     | 4
1967   0ED1 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
1967   0ED3 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
1967   0ED4 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
1967   0ED5 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
1967   0ED7 12          >            LD      (DE), A         ; play sample               ' 7     |
1967   0ED8 D9          >            EXX                     ;                           ' 4     | (46)
1968   0ED9             
1969   0ED9                         wait16                      ; sync                  ' 16    |
1969   0ED9 18 00       >            JR      .loop
1969   0EDB 00          >            NOP
1970   0EDC                         waitYMReadyFast             ; wait YM to be ready   ' 22    |
1970   0EDC CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1970   0EDE C2 DC 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1971   0EE1 36 28                   LD      (HL), $28           ; set reg num to YM     ' 10    | 58 (104)
1972   0EE3 C3 02 0F                JP      ym_key_write5       ;                       ' 10    |
1973   0EE6             
1974   0EE6             
1975   0EE6             ym_key_write1                           ;                       ' 124
1976   0EE6 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1977   0EE7 1C                      INC     E                   ; next data             ' 4     |
1978   0EE8                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (164)
1978   0EE8 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1978   0EEA C2 E8 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1979   0EED 02                      LD      (BC), A             ; write to YM           ' 7     |
1980   0EEE             
1981   0EEE             ym_key_write0                           ;                       ' 164
1982   0EEE 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1983   0EEF 1C                      INC     E                   ; next data             ' 4     |
1984   0EF0                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (204)
1984   0EF0 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1984   0EF2 C2 F0 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1985   0EF5 02                      LD      (BC), A             ; write to YM           ' 7     |
1986   0EF6             
1987   0EF6                         wait8                       ; sync                  ' 8     |
1987   0EF6 00          >            NOP
1987   0EF7 00          >            NOP
1988   0EF8                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (244)
1988   0EF8 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1988   0EFA C2 F8 0E    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1989   0EFD 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
1990   0EFF             
1991   0EFF C3 3C 0A                JP      execute_xgm         ;                       ' 10    | (254)
1992   0F02             
1993   0F02             ym_key_write5                           ;                       ' 104
1994   0F02 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
1995   0F03 1C                      INC     E                   ; next data             ' 4     |
1996   0F04                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (144)
1996   0F04 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
1996   0F06 C2 04 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
1997   0F09 02                      LD      (BC), A             ; write to YM           ' 7     |
1998   0F0A             
1999   0F0A             ym_key_write4                           ;                       ' 144
2000   0F0A 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
2001   0F0B 1C                      INC     E                   ; next data             ' 4     |
2002   0F0C                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (184)
2002   0F0C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2002   0F0E C2 0C 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2003   0F11 02                      LD      (BC), A             ; write to YM           ' 7     |
2004   0F12             
2005   0F12             ym_key_write3                           ;                       ' 184
2006   0F12 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
2007   0F13 1C                      INC     E                   ; next data             ' 4     |
2008   0F14                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (224)
2008   0F14 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2008   0F16 C2 14 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2009   0F19 02                      LD      (BC), A             ; write to YM           ' 7     |
2010   0F1A             
2011   0F1A                         wait8                       ; sync                  ' 8     |
2011   0F1A 00          >            NOP
2011   0F1B 00          >            NOP
2012   0F1C                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 30 (254)
2012   0F1C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2012   0F1E C2 1C 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2013   0F21             
2014   0F21             ym_key_write2
2015   0F21                         sampleOutputSafe            ;                       ' 46    | (46)
2015   0F21 D9          >            EXX                     ;                           ' 4     | 4
2015   0F22 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
2015   0F24 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2015   0F25 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2015   0F26 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2015   0F28 12          >            LD      (DE), A         ; play sample               ' 7     |
2015   0F29 D9          >            EXX                     ;                           ' 4     | (46)
2016   0F2A             
2017   0F2A                         wait8                       ; sync                  ' 8     |
2017   0F2A 00          >            NOP
2017   0F2B 00          >            NOP
2018   0F2C                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (86)
2018   0F2C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2018   0F2E C2 2C 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2019   0F31 36 28                   LD      (HL), $28           ; restore write to key  ' 10    |
2020   0F33             
2021   0F33 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
2022   0F34 13                      INC     DE                  ; next data             ' 6     |
2023   0F35                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (126)
2023   0F35 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2023   0F37 C2 35 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2024   0F3A 02                      LD      (BC), A             ; write to YM           ' 7     |
2025   0F3B             
2026   0F3B             .write1
2027   0F3B 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
2028   0F3C 1C                      INC     E                   ; next data             ' 4     |
2029   0F3D                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (166)
2029   0F3D CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2029   0F3F C2 3D 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2030   0F42 02                      LD      (BC), A             ; write to YM           ' 7     |
2031   0F43             
2032   0F43             .write0
2033   0F43 1A                      LD      A, (DE)             ; A = YM key data       ' 7     |
2034   0F44 1C                      INC     E                   ; next data             ' 4     |
2035   0F45                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 40 (206)
2035   0F45 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2035   0F47 C2 45 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2036   0F4A 02                      LD      (BC), A             ; write to YM           ' 7     |
2037   0F4B             
2038   0F4B                         wait7                       ; sync                  ' 7     |
2038   0F4B 3E 00       >            LD      A, $0
2039   0F4D                         waitYMReadyFast             ; wait YM to be ready   ' 22    | 39 (245)
2039   0F4D CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2039   0F4F C2 4D 0F    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2040   0F52 36 2A                   LD      (HL), $2A           ; restore DAC write     ' 10    |
2041   0F54             
2042   0F54 C3 3C 0A                JP      execute_xgm         ;                       ' 10    | (254+1)
2043   0F57             
2044   0F57             
2045   0F57             ; PCM command
2046   0F57             ; -----------
2047   0F57             
2048   0F57             com_pcm_p0_ch0                          ; 50                    ' 80
2049   0F57 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2050   0F59 C3 A7 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2051   0F5C             
2052   0F5C             com_pcm_p1_ch0                          ; 54                    ' 80
2053   0F5C 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2054   0F5E C3 A7 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2055   0F61             
2056   0F61             com_pcm_p2_ch0                          ; 58                    ' 80
2057   0F61 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2058   0F63 C3 A7 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2059   0F66             
2060   0F66             com_pcm_p3_ch0                          ; 5C                    ' 80
2061   0F66 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2062   0F68 C3 A7 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2063   0F6B             
2064   0F6B             com_pcm_p0_ch1                          ; 51                    ' 80
2065   0F6B 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2066   0F6D C3 D6 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | 17 (97)
2067   0F70             
2068   0F70             com_pcm_p1_ch1                          ; 55                    ' 80
2069   0F70 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2070   0F72 C3 A7 0F                JP      com_pcm_ch0         ; execute PCM com       ' 10    | 17 (97)
2071   0F75             
2072   0F75             com_pcm_p2_ch1                          ; 59                    ' 80
2073   0F75 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2074   0F77 C3 D6 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | (119)
2075   0F7A             
2076   0F7A             com_pcm_p3_ch1                          ; 5D                    ' 80
2077   0F7A 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2078   0F7C C3 D6 0F                JP      com_pcm_ch1         ; execute PCM com       ' 10    | (119)
2079   0F7F             
2080   0F7F             com_pcm_p0_ch2                          ; 52                    ' 80
2081   0F7F 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2082   0F81 C3 05 10                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2083   0F84             
2084   0F84             com_pcm_p1_ch2                          ; 56                    ' 80
2085   0F84 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2086   0F86 C3 05 10                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2087   0F89             
2088   0F89             com_pcm_p2_ch2                          ; 5A                    ' 80
2089   0F89 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2090   0F8B C3 05 10                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2091   0F8E             
2092   0F8E             com_pcm_p3_ch2                          ; 5E                    ' 80
2093   0F8E 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2094   0F90 C3 05 10                JP      com_pcm_ch2         ; execute PCM com       ' 10    | (119)
2095   0F93             
2096   0F93             com_pcm_p0_ch3                          ; 53                    ' 80
2097   0F93 0E 00                   LD      C, 0                ; C = prio              ' 7     |
2098   0F95 C3 34 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2099   0F98             
2100   0F98             com_pcm_p1_ch3                          ; 57                    ' 80
2101   0F98 0E 01                   LD      C, 1                ; C = prio              ' 7     |
2102   0F9A C3 34 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2103   0F9D             
2104   0F9D             com_pcm_p2_ch3                          ; 5B                    ' 80
2105   0F9D 0E 02                   LD      C, 2                ; C = prio              ' 7     |
2106   0F9F C3 34 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2107   0FA2             
2108   0FA2             com_pcm_p3_ch3                          ; 5F                    ' 80
2109   0FA2 0E 03                   LD      C, 3                ; C = prio              ' 7     |
2110   0FA4 C3 34 10                JP      com_pcm_ch3         ; execute PCM com       ' 10    | (119)
2111   0FA7             
2112   0FA7             
2113   0FA7             com_pcm_ch0                             ;                       ' 97
2114   0FA7                         handlePCMCommandXGM 0       ; handle command        ' 142   |
2114   0FA7 21 14 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2114   0FAA 79          >            LD      A, C                    ; A = new prio              ' 4     |
2114   0FAB BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2114   0FAC D2 BC 0F    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2114   0FAF 1C          >            INC     E                       ; next XGM command          ' 4     |
2114   0FB0 3E 05       >            LD      A, w            ; 7-2
2114   0FB2 3D          >            DEC     A               ; 4
2114   0FB3 20 FD       >            JR      NZ, .loop       ; 12
2114   0FB5 00          >            NOP
2114   0FB6 00          >            NOP
2114   0FB7 3E 00       >            LD      A, $0
2114   0FB9 C3 D2 0F    >            JP      .end                    ; done                      ' 10    |
2114   0FBC 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2114   0FBD 1C          >            INC     E                       ; next XGM command          ' 4     |
2114   0FBE B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2114   0FBF 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2114   0FC1 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2114   0FC3 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2114   0FC4 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2114   0FC6 87          >            ADD     A                       ;                           ' 4     |
2114   0FC7 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2114   0FC8 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2114   0FC9 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2114   0FCA E1          >            POP     HL                      ; copy params               ' 10    |
2114   0FCB 22 16 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2114   0FCE E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2114   0FCF 22 18 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2115   0FD2                         wait4                       ; sync                  ' 4     | 156 (254-1)
2115   0FD2 00          >            NOP
2116   0FD3 C3 3C 0A                JP      execute_xgm         ;                       ' 10    |
2117   0FD6             
2118   0FD6             com_pcm_ch1                             ;                       ' 97
2119   0FD6                         handlePCMCommandXGM 1       ; handle command        ' 142   |
2119   0FD6 21 1C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2119   0FD9 79          >            LD      A, C                    ; A = new prio              ' 4     |
2119   0FDA BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2119   0FDB D2 EB 0F    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2119   0FDE 1C          >            INC     E                       ; next XGM command          ' 4     |
2119   0FDF 3E 05       >            LD      A, w            ; 7-2
2119   0FE1 3D          >            DEC     A               ; 4
2119   0FE2 20 FD       >            JR      NZ, .loop       ; 12
2119   0FE4 00          >            NOP
2119   0FE5 00          >            NOP
2119   0FE6 3E 00       >            LD      A, $0
2119   0FE8 C3 01 10    >            JP      .end                    ; done                      ' 10    |
2119   0FEB 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2119   0FEC 1C          >            INC     E                       ; next XGM command          ' 4     |
2119   0FED B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2119   0FEE 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2119   0FF0 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2119   0FF2 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2119   0FF3 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2119   0FF5 87          >            ADD     A                       ;                           ' 4     |
2119   0FF6 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2119   0FF7 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2119   0FF8 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2119   0FF9 E1          >            POP     HL                      ; copy params               ' 10    |
2119   0FFA 22 1E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2119   0FFD E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2119   0FFE 22 20 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2120   1001                         wait4                       ; sync                  ' 4     | 156 (254-1)
2120   1001 00          >            NOP
2121   1002 C3 3C 0A                JP      execute_xgm         ;                       ' 10    |
2122   1005             
2123   1005             com_pcm_ch2                             ;                       ' 97
2124   1005                         handlePCMCommandXGM 2       ; handle command        ' 142   |
2124   1005 21 24 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2124   1008 79          >            LD      A, C                    ; A = new prio              ' 4     |
2124   1009 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2124   100A D2 1A 10    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2124   100D 1C          >            INC     E                       ; next XGM command          ' 4     |
2124   100E 3E 05       >            LD      A, w            ; 7-2
2124   1010 3D          >            DEC     A               ; 4
2124   1011 20 FD       >            JR      NZ, .loop       ; 12
2124   1013 00          >            NOP
2124   1014 00          >            NOP
2124   1015 3E 00       >            LD      A, $0
2124   1017 C3 30 10    >            JP      .end                    ; done                      ' 10    |
2124   101A 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2124   101B 1C          >            INC     E                       ; next XGM command          ' 4     |
2124   101C B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2124   101D 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2124   101F 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2124   1021 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2124   1022 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2124   1024 87          >            ADD     A                       ;                           ' 4     |
2124   1025 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2124   1026 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2124   1027 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2124   1028 E1          >            POP     HL                      ; copy params               ' 10    |
2124   1029 22 26 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2124   102C E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2124   102D 22 28 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2125   1030                         wait4                       ; sync                  ' 4     | 156 (254-1)
2125   1030 00          >            NOP
2126   1031 C3 3C 0A                JP      execute_xgm         ;                       ' 10    |
2127   1034             
2128   1034             com_pcm_ch3                             ;                       ' 97
2129   1034                         handlePCMCommandXGM 3       ; handle command        ' 142   |
2129   1034 21 2C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    |
2129   1037 79          >            LD      A, C                    ; A = new prio              ' 4     |
2129   1038 BE          >            CP      (HL)                    ; compare new and old prio  ' 7     | (31)
2129   1039 D2 49 10    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2129   103C 1C          >            INC     E                       ; next XGM command          ' 4     |
2129   103D 3E 05       >            LD      A, w            ; 7-2
2129   103F 3D          >            DEC     A               ; 4
2129   1040 20 FD       >            JR      NZ, .loop       ; 12
2129   1042 00          >            NOP
2129   1043 00          >            NOP
2129   1044 3E 00       >            LD      A, $0
2129   1046 C3 5F 10    >            JP      .end                    ; done                      ' 10    |
2129   1049 1A          >            LD      A, (DE)                 ; A = PCM id (max = $3F)    ' 7     |
2129   104A 1C          >            INC     E                       ; next XGM command          ' 4     |
2129   104B B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 27 (58)
2129   104C 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2129   104E 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2129   1050 71          >            LD      (HL), C                 ; set new prio              ' 7     | (65)
2129   1051 26 1C       >            LD      H, (ID_TABLE>>8)        ;                           ' 7     |
2129   1053 87          >            ADD     A                       ;                           ' 4     |
2129   1054 87          >            ADD     A                       ;                           ' 4     | 25 (90)
2129   1055 6F          >            LD      L, A                    ; HL point on new PCM addr  ' 4     |
2129   1056 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2129   1057 E1          >            POP     HL                      ; copy params               ' 10    |
2129   1058 22 2E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2129   105B E1          >            POP     HL                      ;                           ' 10    | 52 (142)
2129   105C 22 30 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2130   105F                         wait4                       ; sync                  ' 4     | 156 (254-1)
2130   105F 00          >            NOP
2131   1060 C3 3C 0A                JP      execute_xgm         ;                       ' 10    |
2132   1063             
2133   1063             
2134   1063             
2135   1063             ; STATE command
2136   1063             ; -------------
2137   1063             
2138   1063             com_state_w0                            ; 60                    ' 80
2139   1063                         wait114                     ; sync                  ' 114   |
2139   1063 3E 07       >            LD      A, w            ; 7-2
2139   1065 3D          >            DEC     A               ; 4
2139   1066 20 FD       >            JR      NZ, .loop       ; 12
2140   1068 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 131 (211)
2141   106A C3 B0 11                JP      state_w0            ; execute               ' 10    |
2142   106D             
2143   106D             com_state_w1                            ; 61                    ' 80
2144   106D                         wait81                      ; sync                  ' 81    |
2144   106D 3E 04       >            LD      A, w            ; 7-2
2144   106F 3D          >            DEC     A               ; 4
2144   1070 20 FD       >            JR      NZ, .loop       ; 12
2144   1072 00          >            NOP
2144   1073 00          >            NOP
2144   1074 3E 00       >            LD      A, $0
2145   1076 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 98 (178)
2146   1078 C3 AA 11                JP      state_w1            ; execute               ' 10    |
2147   107B             
2148   107B             com_state_w2                            ; 62                    ' 80
2149   107B                         wait48                      ; sync                  ' 48    |
2149   107B ED 4F       >            LD      R, A
2149   107D ED 4F       >            LD      R, A
2149   107F ED 4F       >            LD      R, A
2149   1081 ED 4F       >            LD      R, A
2149   1083 18 00       >            JR      .loop
2150   1085 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 65 (145)
2151   1087 C3 A4 11                JP      state_w2            ; execute               ' 10    |
2152   108A             
2153   108A             com_state_w3                            ; 63                    ' 80
2154   108A                         wait15                      ; sync                  ' 15    |
2154   108A 00          >            NOP
2154   108B 00          >            NOP
2154   108C 3E 00       >            LD      A, $0
2155   108E 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 32 (112)
2156   1090 C3 9E 11                JP      state_w3            ; execute               ' 10    |
2157   1093             
2158   1093             com_state_w4                            ; 64                    ' 80
2159   1093                         wait174                     ; sync                  ' 174   | (254)
2159   1093 3E 0A       >            LD      A, w            ; 7-2
2159   1095 3D          >            DEC     A               ; 4
2159   1096 20 FD       >            JR      NZ, .loop       ; 12
2159   1098 18 00       >            JR      .loop
2160   109A                         sampleOutput                ; sample output         ' 36    | (36)
2160   109A D9          >            EXX                     ;                           ' 4     | 4
2160   109B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2160   109C 03          >            INC     BC              ; increment read address    ' 6     |
2160   109D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2160   109F 12          >            LD      (DE), A         ; play sample               ' 7     |
2160   10A0 D9          >            EXX                     ;                           ' 4     | (36)
2161   10A1             
2162   10A1                         wait26                      ; sync                  ' 26    |
2162   10A1 ED 4F       >            LD      R, A
2162   10A3 ED 4F       >            LD      R, A
2162   10A5 00          >            NOP
2162   10A6 00          >            NOP
2163   10A7 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 43 (79)
2164   10A9 C3 98 11                JP      state_w4            ; execute               ' 10    |
2165   10AC             
2166   10AC             com_state_w5                            ; 65                    ' 80
2167   10AC                         wait157                     ; sync                  ' 157   |
2167   10AC 3E 09       >            LD      A, w            ; 7-2
2167   10AE 3D          >            DEC     A               ; 4
2167   10AF 20 FD       >            JR      NZ, .loop       ; 12
2167   10B1 3E 00       >            LD      A, $0
2167   10B3 00          >            NOP
2168   10B4 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 174 (254)
2169   10B6 C3 88 11                JP      state_w5            ; execute               ' 10    |
2170   10B9             
2171   10B9             com_state_w6                            ; 66                    ' 80
2172   10B9                         wait124                     ; sync                  ' 124   |
2172   10B9 3E 07       >            LD      A, w            ; 7-2
2172   10BB 3D          >            DEC     A               ; 4
2172   10BC 20 FD       >            JR      NZ, .loop       ; 12
2172   10BE C3 C1 10    >            JP      .loop
2173   10C1 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 141 (221)
2174   10C3 C3 82 11                JP      state_w6            ; execute               ' 10    |
2175   10C6             
2176   10C6             com_state_w7                            ; 67                    ' 80
2177   10C6                         wait91                      ; sync                  ' 91    |
2177   10C6 3E 05       >            LD      A, w            ; 7-2
2177   10C8 3D          >            DEC     A               ; 4
2177   10C9 20 FD       >            JR      NZ, .loop       ; 12
2177   10CB ED 4F       >            LD      R, A
2178   10CD 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 108 (188)
2179   10CF C3 7C 11                JP      state_w7            ; execute               ' 10    |
2180   10D2             
2181   10D2             com_state_w8                            ; 68                    ' 80
2182   10D2                         wait58                      ; sync                  ' 58    |
2182   10D2 3E 03       >            LD      A, w            ; 7-2
2182   10D4 3D          >            DEC     A               ; 4
2182   10D5 20 FD       >            JR      NZ, .loop       ; 12
2182   10D7 00          >            NOP
2182   10D8 00          >            NOP
2183   10D9 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 75 (155)
2184   10DB C3 76 11                JP      state_w8            ; execute               ' 10    |
2185   10DE             
2186   10DE             com_state_w9                            ; 69                    ' 80
2187   10DE                         wait25                      ; sync                  ' 25    |
2187   10DE ED 4F       >            LD      R, A
2187   10E0 ED 4F       >            LD      R, A
2187   10E2 3E 00       >            LD      A, $0
2188   10E4 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 42 (122)
2189   10E6 C3 70 11                JP      state_w9            ; execute               ' 10    |
2190   10E9             
2191   10E9             com_state_wA                            ; 6A                    ' 80
2192   10E9                         wait174                     ; sync                  ' 174   | (254)
2192   10E9 3E 0A       >            LD      A, w            ; 7-2
2192   10EB 3D          >            DEC     A               ; 4
2192   10EC 20 FD       >            JR      NZ, .loop       ; 12
2192   10EE 18 00       >            JR      .loop
2193   10F0                         sampleOutput                ; sample output         ' 36    | (36)
2193   10F0 D9          >            EXX                     ;                           ' 4     | 4
2193   10F1 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2193   10F2 03          >            INC     BC              ; increment read address    ' 6     |
2193   10F3 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2193   10F5 12          >            LD      (DE), A         ; play sample               ' 7     |
2193   10F6 D9          >            EXX                     ;                           ' 4     | (36)
2194   10F7             
2195   10F7                         wait36                      ; sync                  ' 36    |
2195   10F7 ED 4F       >            LD      R, A
2195   10F9 ED 4F       >            LD      R, A
2195   10FB ED 4F       >            LD      R, A
2195   10FD ED 4F       >            LD      R, A
2196   10FF 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 53 (89)
2197   1101 C3 6A 11                JP      state_wA            ; execute               ' 10    |
2198   1104             
2199   1104             com_state_wB                            ; 6B                    ' 80
2200   1104                         wait157                     ; sync                  ' 157   |
2200   1104 3E 09       >            LD      A, w            ; 7-2
2200   1106 3D          >            DEC     A               ; 4
2200   1107 20 FD       >            JR      NZ, .loop       ; 12
2200   1109 3E 00       >            LD      A, $0
2200   110B 00          >            NOP
2201   110C 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 174 (254)
2202   110E C3 58 11                JP      state_wB            ; execute               ' 10    |
2203   1111             
2204   1111             com_state_wC                            ; 6C                    ' 80
2205   1111                         wait124                     ; sync                  ' 124   |
2205   1111 3E 07       >            LD      A, w            ; 7-2
2205   1113 3D          >            DEC     A               ; 4
2205   1114 20 FD       >            JR      NZ, .loop       ; 12
2205   1116 C3 19 11    >            JP      .loop
2206   1119 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 141 (221)
2207   111B C3 52 11                JP      state_wC            ; execute               ' 10    |
2208   111E             
2209   111E             com_state_wD                            ; 6D                    ' 80
2210   111E                         wait91                      ; sync                  ' 91    |
2210   111E 3E 05       >            LD      A, w            ; 7-2
2210   1120 3D          >            DEC     A               ; 4
2210   1121 20 FD       >            JR      NZ, .loop       ; 12
2210   1123 ED 4F       >            LD      R, A
2211   1125 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 108 (188)
2212   1127 C3 4C 11                JP      state_wD            ; execute               ' 10    |
2213   112A             
2214   112A             com_state_wE                            ; 6E                    ' 80
2215   112A                         wait58                      ; sync                  ' 58    |
2215   112A 3E 03       >            LD      A, w            ; 7-2
2215   112C 3D          >            DEC     A               ; 4
2215   112D 20 FD       >            JR      NZ, .loop       ; 12
2215   112F 00          >            NOP
2215   1130 00          >            NOP
2216   1131 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 75 (155)
2217   1133 C3 46 11                JP      state_wE            ; execute               ' 10    |
2218   1136             
2219   1136             com_state_wF                            ; 6F                    ' 80
2220   1136                         wait35                      ; sync                  ' 35    |
2220   1136 18 00       >            JR      .loop
2220   1138 ED 4F       >            LD      R, A
2220   113A 3E 00       >            LD      A, $0
2220   113C 3E 00       >            LD      A, $0
2221   113E 26 01                   LD      H, (YM_RR_SAV >> 8) ; H point on YM save H  ' 7     | 42 (122)
2222   1140             
2223   1140             state_wF                                ;                       ' 122
2224   1140 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2225   1141 1C                      INC     E                   ; next data             ' 4     |
2226   1142 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (155)
2227   1143 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2228   1144 1C                      INC     E                   ; next data             ' 4     |
2229   1145 77                      LD      (HL), A             ; write to save         ' 7     |
2230   1146             
2231   1146             state_wE
2232   1146 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2233   1147 1C                      INC     E                   ; next data             ' 4     |
2234   1148 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (188)
2235   1149 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2236   114A 1C                      INC     E                   ; next data             ' 4     |
2237   114B 77                      LD      (HL), A             ; write to save         ' 7     |
2238   114C             
2239   114C             state_wD
2240   114C 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2241   114D 1C                      INC     E                   ; next data             ' 4     |
2242   114E 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (221)
2243   114F 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2244   1150 1C                      INC     E                   ; next data             ' 4     |
2245   1151 77                      LD      (HL), A             ; write to save         ' 7     |
2246   1152             
2247   1152             state_wC
2248   1152 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2249   1153 1C                      INC     E                   ; next data             ' 4     |
2250   1154 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (254)
2251   1155 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2252   1156 1C                      INC     E                   ; next data             ' 4     |
2253   1157 77                      LD      (HL), A             ; write to save         ' 7     |
2254   1158             
2255   1158             state_wB
2256   1158                         sampleOutput                ; sample output         ' 36    |
2256   1158 D9          >            EXX                     ;                           ' 4     | 4
2256   1159 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2256   115A 03          >            INC     BC              ; increment read address    ' 6     |
2256   115B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2256   115D 12          >            LD      (DE), A         ; play sample               ' 7     |
2256   115E D9          >            EXX                     ;                           ' 4     | (36)
2257   115F                         wait20                      ; wait                  ' 20    | (56)
2257   115F 3E 00       >            LD      A, $0
2257   1161 00          >            NOP
2257   1162 ED 4F       >            LD      R, A
2258   1164             
2259   1164 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2260   1165 1C                      INC     E                   ; next data             ' 4     |
2261   1166 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (89)
2262   1167 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2263   1168 1C                      INC     E                   ; next data             ' 4     |
2264   1169 77                      LD      (HL), A             ; write to save         ' 7     |
2265   116A             
2266   116A             state_wA
2267   116A 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2268   116B 1C                      INC     E                   ; next data             ' 4     |
2269   116C 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (122)
2270   116D 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2271   116E 1C                      INC     E                   ; next data             ' 4     |
2272   116F 77                      LD      (HL), A             ; write to save         ' 7     |
2273   1170             
2274   1170             state_w9
2275   1170 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2276   1171 1C                      INC     E                   ; next data             ' 4     |
2277   1172 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (155)
2278   1173 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2279   1174 1C                      INC     E                   ; next data             ' 4     |
2280   1175 77                      LD      (HL), A             ; write to save         ' 7     |
2281   1176             
2282   1176             state_w8
2283   1176 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2284   1177 1C                      INC     E                   ; next data             ' 4     |
2285   1178 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (188)
2286   1179 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2287   117A 1C                      INC     E                   ; next data             ' 4     |
2288   117B 77                      LD      (HL), A             ; write to save         ' 7     |
2289   117C             
2290   117C             state_w7
2291   117C 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2292   117D 1C                      INC     E                   ; next data             ' 4     |
2293   117E 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (221)
2294   117F 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2295   1180 1C                      INC     E                   ; next data             ' 4     |
2296   1181 77                      LD      (HL), A             ; write to save         ' 7     |
2297   1182             
2298   1182             state_w6
2299   1182 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2300   1183 1C                      INC     E                   ; next data             ' 4     |
2301   1184 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (254)
2302   1185 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2303   1186 1C                      INC     E                   ; next data             ' 4     |
2304   1187 77                      LD      (HL), A             ; write to save         ' 7     |
2305   1188             
2306   1188             state_w5
2307   1188                         sampleOutput                ; sample output         ' 36    |
2307   1188 D9          >            EXX                     ;                           ' 4     | 4
2307   1189 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2307   118A 03          >            INC     BC              ; increment read address    ' 6     |
2307   118B CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2307   118D 12          >            LD      (DE), A         ; play sample               ' 7     |
2307   118E D9          >            EXX                     ;                           ' 4     | (36)
2308   118F                         wait10                      ; wait                  ' 10    | (46)
2308   118F C3 92 11    >            JP      .loop
2309   1192             
2310   1192 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2311   1193 1C                      INC     E                   ; next data             ' 4     |
2312   1194 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (79)
2313   1195 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2314   1196 1C                      INC     E                   ; next data             ' 4     |
2315   1197 77                      LD      (HL), A             ; write to save         ' 7     |
2316   1198             
2317   1198             state_w4
2318   1198 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2319   1199 1C                      INC     E                   ; next data             ' 4     |
2320   119A 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (112)
2321   119B 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2322   119C 1C                      INC     E                   ; next data             ' 4     |
2323   119D 77                      LD      (HL), A             ; write to save         ' 7     |
2324   119E             
2325   119E             state_w3
2326   119E 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2327   119F 1C                      INC     E                   ; next data             ' 4     |
2328   11A0 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (145)
2329   11A1 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2330   11A2 1C                      INC     E                   ; next data             ' 4     |
2331   11A3 77                      LD      (HL), A             ; write to save         ' 7     |
2332   11A4             
2333   11A4             state_w2
2334   11A4 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2335   11A5 1C                      INC     E                   ; next data             ' 4     |
2336   11A6 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (178)
2337   11A7 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2338   11A8 1C                      INC     E                   ; next data             ' 4     |
2339   11A9 77                      LD      (HL), A             ; write to save         ' 7     |
2340   11AA             
2341   11AA             state_w1
2342   11AA 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2343   11AB 1C                      INC     E                   ; next data             ' 4     |
2344   11AC 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (211)
2345   11AD 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2346   11AE 1C                      INC     E                   ; next data             ' 4     |
2347   11AF 77                      LD      (HL), A             ; write to save         ' 7     |
2348   11B0             
2349   11B0             state_w0
2350   11B0 1A                      LD      A, (DE)             ; A = state register    ' 7     |
2351   11B1 1C                      INC     E                   ; next data             ' 4     |
2352   11B2 6F                      LD      L, A                ; HL point on save      ' 4     | 33 (244)
2353   11B3 1A                      LD      A, (DE)             ; A = state value       ' 7     |
2354   11B4 1C                      INC     E                   ; next data             ' 4     |
2355   11B5 77                      LD      (HL), A             ; write to save         ' 7     |
2356   11B6             
2357   11B6 C3 3C 0A                JP      execute_xgm         ;                       ' 10    | (254)
2358   11B9             
2359   11B9             
2360   11B9             ; NULL command
2361   11B9             ; ------------
2362   11B9             
2363   11B9             com_null                                ; 01-0F / 60-7C         ' 80
2364   11B9                         wait164                     ; sync                  ' 164   |
2364   11B9 3E 09       >            LD      A, w            ; 7-2
2364   11BB 3D          >            DEC     A               ; 4
2364   11BC 20 FD       >            JR      NZ, .loop       ; 12
2364   11BE ED 4F       >            LD      R, A
2364   11C0 ED 4F       >            LD      R, A
2365   11C2 C3 3C 0A                JP      execute_xgm         ;                       ' 10    | 174 (254)
2366   11C5             
2367   11C5             
2368   11C5             ; EXTRA FRAME command
2369   11C5             ; -------------------
2370   11C5             
2371   11C5             com_extra_frm                           ; 7D                            ' 80
2372   11C5             
2373   11C5 3E 01                   LD      A, $1               ;                               ' 7     |
2374   11C7 32 12 01                LD      (MODIFYING_F), A    ; we are modifying variable     ' 13    | 20 (100)
2375   11CA             
2376   11CA 3A 13 01                LD      A, (PENDING_FRM)    ;                               ' 13    |
2377   11CD 3C                      INC     A                   ; force process 1 more frame    ' 4     | 30 (130)
2378   11CE 32 13 01                LD      (PENDING_FRM), A    ;                               ' 13    |
2379   11D1             
2380   11D1 AF                      XOR     A                   ;                               ' 4     |
2381   11D2 32 12 01                LD      (MODIFYING_F), A    ; no more modifying variable    ' 13    | 17 (147)
2382   11D5             
2383   11D5 21 94 01                LD      HL, ELAPSED         ;                               ' 10    | 10 (157)
2384   11D8             
2385   11D8 7E                      LD      A, (HL)             ;                               ' 7     |
2386   11D9 D6 01                   SUB     A, #1               ;                               ' 7     |
2387   11DB 77                      LD      (HL), A             ;                               ' 7     |
2388   11DC 2C                      INC     L                   ;                               ' 4     |
2389   11DD 7E                      LD      A, (HL)             ;                               ' 7     |
2390   11DE DE 00                   SBC     A, #0               ; fix elapsed frame (24 bit)    ' 7     | 71 (228)
2391   11E0 77                      LD      (HL), A             ;                               ' 7     |
2392   11E1 2C                      INC     L                   ;                               ' 4     |
2393   11E2 7E                      LD      A, (HL)             ;                               ' 7     |
2394   11E3 DE 00                   SBC     A, #0               ;                               ' 7     |
2395   11E5 77                      LD      (HL), A             ;                               ' 7     |
2396   11E6             
2397   11E6                         wait16                      ; sync                          ' 16    | 26 (254)
2397   11E6 18 00       >            JR      .loop
2397   11E8 00          >            NOP
2398   11E9 C3 3C 0A                JP      execute_xgm         ;                               ' 10    |
2399   11EC             
2400   11EC             
2401   11EC             ; LOOP command
2402   11EC             ; ------------
2403   11EC             
2404   11EC             com_loop                                ; 7E                        ' 80
2405   11EC             
2406   11EC 3A 3C 01                LD      A, (REM_LOOP)       ; A = remaining loop        ' 13    |
2407   11EF 3D                      DEC     A                   ; 0 mean infinite loop      ' 4     |
2408   11F0 32 3C 01                LD      (REM_LOOP), A       ; A = remaining loop        ' 13    | 40 (120)
2409   11F3 C2 0D 12                JP      NZ, .continue       ;                           ' 10    |
2410   11F6             
2411   11F6 21 00 01                LD      HL, COMMAND         ; HL = COMMAND              ' 10    | 25 (145)
2412   11F9 CB E6                   SET     XGM_PAUSE_SFT, (HL) ; request pause/end XGM     ' 15    |
2413   11FB             
2414   11FB 21 02 01                LD      HL, STATUS          ; HL = STATUS               ' 10    | 25 (170)
2415   11FE CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear play status         ' 15    |
2416   1200             
2417   1200 1C                      INC     E                   ; next param                ' 4     |
2418   1201 1C                      INC     E                   ;                           ' 4     | 12 (182)
2419   1202 1C                      INC     E                   ;                           ' 4     |
2420   1203             
2421   1203                         wait62                      ; sync                      ' 62    |
2421   1203 3E 03       >            LD      A, w            ; 7-2
2421   1205 3D          >            DEC     A               ; 4
2421   1206 20 FD       >            JR      NZ, .loop       ; 12
2421   1208 18 00       >            JR      .loop
2422   120A C3 3C 0A                JP      execute_xgm         ;                           ' 10    | 72 (254)
2423   120D             
2424   120D             .continue
2425   120D 1A                      LD      A, (DE)             ; A = loop addr b7-b0       ' 7     |
2426   120E 6F                      LD      L, A                ; L = loop addr b7-b0       ' 4     |
2427   120F 1C                      INC     E                   ; next param                ' 4     |
2428   1210 1A                      LD      A, (DE)             ; A = loop addr b15-b8      ' 7     | 30 (150)
2429   1211 67                      LD      H, A                ; HL = loop addr b15-b0     ' 4     |
2430   1212 1C                      INC     E                   ; next param                ' 4     |
2431   1213             
2432   1213 ED 4B 04 01             LD      BC, (XGM_ARG_A+0)   ; BC = XGM base addr (ML)   ' 20    |
2433   1217 09                      ADD     HL, BC              ; HL = XGM base addr + loop ' 11    | 47 (197)
2434   1218 22 34 01                LD      (XGM_ADDR+0), HL    ; set new XGM addr (ML)     ' 16    |
2435   121B             
2436   121B 1A                      LD      A, (DE)             ; A = loop addr b23-b16     ' 7     |
2437   121C 21 06 01                LD      HL, XGM_ARG_A+2     ; HL point XGM base adr H   ' 10    |
2438   121F 8E                      ADC     (HL)                ; A = XGM base addr + loop  ' 7     | 41 (238)
2439   1220 1C                      INC     E                   ; next param                ' 4     |
2440   1221 32 36 01                LD      (XGM_ADDR+2), A     ; set new XGM addr (H)      ' 13    |
2441   1224             
2442   1224 AF                      XOR     A                   ; force end frame fter loop ' 4     |
2443   1225 12                      LD      (DE), A             ; after loop taken          ' 7     | 11 (249)
2444   1226             
2445   1226 C3 3C 0A                JP      execute_xgm         ; +5 cycles delay here..    ' 10    | (254+5)
2446   1229             
2447   1229             
2448   1229             ; END XGM command
2449   1229             ; ---------------
2450   1229             
2451   1229             com_end                                 ; 7F                        ' 80
2452   1229 21 00 01                LD      HL, COMMAND         ; HL = COMMAND              ' 10    | 25 (105)
2453   122C CB E6                   SET     XGM_PAUSE_SFT, (HL) ; request pause/end XGM     ' 15    |
2454   122E             
2455   122E 21 02 01                LD      HL, STATUS          ; HL = STATUS               ' 10    | 25 (130)
2456   1231 CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear play status         ' 15    |
2457   1233             
2458   1233                         wait114                     ; sync                      ' 114   |
2458   1233 3E 07       >            LD      A, w            ; 7-2
2458   1235 3D          >            DEC     A               ; 4
2458   1236 20 FD       >            JR      NZ, .loop       ; 12
2459   1238 C3 3C 0A                JP      execute_xgm         ;                           ' 10    | 124 (254)
2460   123B             
2461   123B             
2462   123B             ; $BC+X+Y+Z
2463   123B             do_xgm_again                            ;                           ' 135
2464   123B 2D                      DEC     L                   ; HL point on MODIFYING_F   ' 4     |
2465   123C 36 00                   LD      (HL), $0            ; no more modifying         ' 10    | 14 (149)
2466   123E             
2467   123E                         wait95                      ; sync                      ' 95    |
2467   123E 3E 05       >            LD      A, w            ; 7-2
2467   1240 3D          >            DEC     A               ; 4
2467   1241 20 FD       >            JR      NZ, .loop       ; 12
2467   1243 ED 4F       >            LD      R, A
2467   1245 00          >            NOP
2468   1246 C3 AF 02                JP      main_loop           ; restart loop (prep xgm)   ' 10    | 105 (254)
2469   1249             
2470   1249             ; $BC+X+Y+Z
2471   1249             xgm_done                                ;                               ' 90
2472   1249             
2473   1249             ;    LD  A, (VCOUNTER)
2474   1249             ;    LD  (DEBUG_8), A
2475   1249             
2476   1249 21 12 01                LD      HL, MODIFYING_F     ;                               ' 10    |
2477   124C 36 01                   LD      (HL), $1            ; we are modifying variable     ' 10    | 24 (114)
2478   124E 2C                      INC     L                   ; HL point on PENDING_FRM       ' 4     |
2479   124F             
2480   124F 35                      DEC     (HL)                ; still have frame to process ? ' 11    |
2481   1250 C2 3B 12                JP      NZ, do_xgm_again    ; do XGM process again          ' 10    | 21 (135)
2482   1253             
2483   1253 2D                      DEC     L                   ; HL point on MODIFYING_F       ' 4     |
2484   1254 36 00                   LD      (HL), $0            ; no more modifying variable    ' 10    | 14 (149)
2485   1256             
2486   1256             
2487   1256             ;    LD  A, (VCOUNTER)
2488   1256             ;    LD  (DEBUG_9), A
2489   1256             
2490   1256             ; execute external command
2491   1256             ; ------------------------
2492   1256             
2493   1256             ; $BC+X+Y+Z
2494   1256             external_com                            ;                           ' 149
2495   1256 31 00 16                LD      SP, STACK           ; restore stack             ' 10    |
2496   1259 21 00 01                LD      HL, COMMAND         ; HL point on COMMAND       ' 10    | 20 (159)
2497   125C             
2498   125C             .chk_xgm_play
2499   125C CB 76                   BIT     XGM_PLAY_SFT, (HL)  ; play XGM command ?        ' 12    |
2500   125E CA 89 12                JP      Z, .chk_xgm_resume  ;                           ' 10    | 22 (181)
2501   1261             
2502   1261 CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear command             ' 15    |
2503   1263 2C                      INC     L                   ;                           ' 4     |
2504   1264 2C                      INC     L                   ; HL point on status        ' 4     | 38 (219)
2505   1265 CB F6                   SET     XGM_PLAY_SFT, (HL)  ; set play status           ' 15    |
2506   1267             
2507   1267 2A 04 01                LD      HL, (XGM_ARG_A)     ; set new XGM address       ' 16    |
2508   126A 22 34 01                LD      (XGM_ADDR), HL      ;                           ' 16    | 58 (277)
2509   126D 3A 06 01                LD      A, (XGM_ARG_A+2)    ;                           ' 13    |
2510   1270 32 36 01                LD      (XGM_ADDR+2),A      ;                           ' 13    |
2511   1273             
2512   1273 3A 10 01                LD      A, (LOOP_ARG)       ; set remaining loop        ' 13    |
2513   1276 32 3C 01                LD      (REM_LOOP),A        ;                           ' 13    | 26 (303)
2514   1279             
2515   1279 21 00 00                LD      HL, #0000           ; clear elapsed frame       ' 10    |
2516   127C 22 94 01                LD      (ELAPSED), HL       ; (24 bit counter)          ' 16    |
2517   127F AF                      XOR     A                   ;                           ' 4     | 43 (346)
2518   1280 32 96 01                LD      (ELAPSED+2), A      ;                           ' 13    |
2519   1283             
2520   1283 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2521   1286 C3 1B 13                JP      external_com_pcm    ; do PCM commands           ' 10    | 20 (254+112)
2522   1289                                                     ; +112 cycles here, ignore
2523   1289             
2524   1289             .chk_xgm_resume
2525   1289 CB 6E                   BIT     XGM_RESUME_SFT, (HL)    ; play XGM command ?    ' 12    |
2526   128B CA AA 12                JP      Z, .chk_xgm_stop        ;                       ' 10    | 22 (203)
2527   128E             
2528   128E CB AE                   RES     XGM_RESUME_SFT, (HL)    ; clear command         ' 15    |
2529   1290 2C                      INC     L                       ;                       ' 4     |
2530   1291 2C                      INC     L                       ; HL point on status    ' 4     | 38 (241)
2531   1292 CB F6                   SET     XGM_PLAY_SFT, (HL)      ; set play status       ' 15    |
2532   1294             
2533   1294 11 44 01                LD      DE, YM_RR_SAV       ; DE point on save state    ' 10    |
2534   1297 31 00 16                LD      SP, STACK           ; set STACK                 ' 10    | 20 (254+7)
2535   129A                                                     ; +7 cycles here, ignore
2536   129A             
2537   129A CD EC 14                CALL    loadState           ; load state                ' 140+  | (140)
2538   129D             
2539   129D                         wait94                      ; sync                      ' 94    |
2539   129D 3E 05       >            LD      A, w            ; 7-2
2539   129F 3D          >            DEC     A               ; 4
2539   12A0 20 FD       >            JR      NZ, .loop       ; 12
2539   12A2 18 00       >            JR      .loop
2540   12A4 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    | 114 (254)
2541   12A7 C3 1B 13                JP      external_com_pcm    ; do PCM commands           ' 10    |
2542   12AA             
2543   12AA             .chk_xgm_stop
2544   12AA CB 66                   BIT     XGM_PAUSE_SFT, (HL) ; pause/end XGM command ?   ' 12    |
2545   12AC CA 14 13                JP      Z, .chk_pcm0_pre    ;                           ' 10    | 22 (225)
2546   12AF             
2547   12AF CB A6                   RES     XGM_PAUSE_SFT, (HL) ; clear command             ' 15    |
2548   12B1 2C                      INC     L                   ;                           ' 4     |
2549   12B2 2C                      INC     L                   ; HL point on status        ' 4     | 38 (263)
2550   12B3 CB B6                   RES     XGM_PLAY_SFT, (HL)  ; clear play status         ' 15    |
2551   12B5             
2552   12B5 11 64 01                LD      DE, YM_RR_OFF       ; DE point on off state     ' 10    |
2553   12B8 31 00 16                LD      SP, STACK           ; set STACK                 ' 10    | 20 (254+29)
2554   12BB                                                     ; +29 cycles here, ignore
2555   12BB             
2556   12BB CD EC 14                CALL    loadState           ; stop music                ' 140+  | (140)
2557   12BE             
2558   12BE 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0      ' 10    |
2559   12C1 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1      ' 10    | 20 (160)
2560   12C4             
2561   12C4 36 28                   LD      (HL), $28           ; set reg num to YM         ' 10    |
2562   12C6                         waitYMReadyFast             ; wait YM to be ready       ' 22    | 32 (192)
2562   12C6 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2562   12C8 C2 C6 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2563   12CB             
2564   12CB AF                      XOR     A                   ; A = $00                   ' 4     |
2565   12CC 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2566   12CD 3C                      INC     A                   ; A = $01                   ' 4     | 37 (229)
2567   12CE                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2567   12CE CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2567   12D0 C2 CE 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2568   12D3             
2569   12D3 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2570   12D4                         waitYMReadyFast             ; wait YM to be ready       ' 22    | 29 (254+4)
2570   12D4 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2570   12D6 C2 D4 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2571   12D9             
2572   12D9                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+4)
2572   12D9 D9          >            EXX                     ;                           ' 4     | 4
2572   12DA 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
2572   12DC 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2572   12DD 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2572   12DE CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2572   12E0 12          >            LD      (DE), A         ; play sample               ' 7     |
2572   12E1 D9          >            EXX                     ;                           ' 4     | (46)
2573   12E2             
2574   12E2                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2574   12E2 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2574   12E4 C2 E2 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2575   12E7 36 28                   LD      (HL), $28           ; set reg num to YM         ' 10    |
2576   12E9 3E 02                   LD      A, $02              ; A = $02                   ' 7     | 61 (111)
2577   12EB                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2577   12EB CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2577   12ED C2 EB 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2578   12F0             
2579   12F0 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2580   12F1 C6 02                   ADD     $2                  ; A = $04                   ' 7     | 36 (147)
2581   12F3                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2581   12F3 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2581   12F5 C2 F3 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2582   12F8             
2583   12F8 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2584   12F9 3C                      INC     A                   ; A = $05                   ' 4     | 33 (180)
2585   12FA                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2585   12FA CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2585   12FC C2 FA 12    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2586   12FF             
2587   12FF 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2588   1300 3C                      INC     A                   ; A = $06                   ' 4     | 33 (213)
2589   1301                         waitYMReadyFast             ; wait YM to be ready       ' 22    |
2589   1301 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2589   1303 C2 01 13    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2590   1306             
2591   1306 02                      LD      (BC), A             ; key off - all channel     ' 7     |
2592   1307                         waitYMReadyFast             ; wait YM to be ready       ' 22    | 39 (252)
2592   1307 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2592   1309 C2 07 13    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2593   130C 36 2A                   LD      (HL), $2A           ; restore DAC write         ' 10    |
2594   130E             
2595   130E 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2596   1311 C3 1B 13                JP      external_com_pcm    ; continue                  ' 10    | 20 (254+18)
2597   1314                                                     ; +18 cycles here, ignore
2598   1314             
2599   1314             .chk_pcm0_pre                           ;                           ' 225
2600   1314 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2601   1317                         wait19                      ; sync                      ' 19    | 29 (254)
2601   1317 18 00       >            JR      .loop
2601   1319 3E 00       >            LD      A, $0
2602   131B             
2603   131B             ; $BD+X+Y+Z
2604   131B             external_com_pcm
2605   131B                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2605   131B D9          >            EXX                     ;                           ' 4     | 4
2605   131C 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2605   131D 03          >            INC     BC              ; increment read address    ' 6     |
2605   131E CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2605   1320 12          >            LD      (DE), A         ; play sample               ' 7     |
2605   1321 D9          >            EXX                     ;                           ' 4     | (36)
2606   1322             
2607   1322             .chk_pcm0
2608   1322 CB 46                   BIT     CH0_SFT, (HL)       ; play PCM0 command ?       ' 12    |
2609   1324 CA 69 13                JP      Z, .chk_pcm1        ;                           ' 10    | 22 (58)
2610   1327             
2611   1327 CB 86                   RES     CH0_SFT, (HL)       ; clear command             ' 15    | (73)
2612   1329             
2613   1329                         handlePCMCommand 0          ; handle play PCM command   ' 157   | 167 (240)
2613   1329 ED 4B 08 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2613   132D 21 14 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2613   1330 79          >            LD      A, C                    ; A = new prio              ' 4     |
2613   1331 BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2613   1332 D2 41 13    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2613   1335 3E 05       >            LD      A, w            ; 7-2
2613   1337 3D          >            DEC     A               ; 4
2613   1338 20 FD       >            JR      NZ, .loop       ; 12
2613   133A 3E 00       >            LD      A, $0
2613   133C 3E 00       >            LD      A, $0
2613   133E C3 56 13    >            JP      .end                    ;                           ' 10    | 106 (157)
2613   1341 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2613   1342 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2613   1343 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2613   1345 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2613   1347 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2613   1348 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2613   134A 6F          >            LD      L, A                    ;                           ' 4     |
2613   134B 29          >            ADD     HL, HL                  ;                           ' 6     |
2613   134C 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2613   134D F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2613   134E E1          >            POP     HL                      ; copy params               ' 10    |
2613   134F 22 16 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2613   1352 E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2613   1353 22 18 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2614   1356 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2615   1359             
2616   1359                         wait14                      ; sync                      ' 14    | (254)
2616   1359 3E 00       >            LD      A, $0
2616   135B 3E 00       >            LD      A, $0
2617   135D             
2618   135D                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2618   135D D9          >            EXX                     ;                           ' 4     | 4
2618   135E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2618   135F 03          >            INC     BC              ; increment read address    ' 6     |
2618   1360 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2618   1362 12          >            LD      (DE), A         ; play sample               ' 7     |
2618   1363 D9          >            EXX                     ;                           ' 4     | (36)
2619   1364             
2620   1364                         wait22                      ; sync                      ' 22    | (58)
2620   1364 ED 4F       >            LD      R, A
2620   1366 ED 4F       >            LD      R, A
2620   1368 00          >            NOP
2621   1369             
2622   1369             .chk_pcm1
2623   1369 CB 4E                   BIT     CH1_SFT, (HL)       ; play PCM1 command ?       ' 12    |
2624   136B CA AF 13                JP      Z, .chk_pcm2        ;                           ' 10    | 22 (80)
2625   136E             
2626   136E CB 8E                   RES     CH1_SFT, (HL)       ; clear command             ' 15    | (95)
2627   1370             
2628   1370                         handlePCMCommand 1          ; handle play PCM command   ' 157   | (254-2)
2628   1370 ED 4B 0A 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2628   1374 21 1C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2628   1377 79          >            LD      A, C                    ; A = new prio              ' 4     |
2628   1378 BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2628   1379 D2 88 13    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2628   137C 3E 05       >            LD      A, w            ; 7-2
2628   137E 3D          >            DEC     A               ; 4
2628   137F 20 FD       >            JR      NZ, .loop       ; 12
2628   1381 3E 00       >            LD      A, $0
2628   1383 3E 00       >            LD      A, $0
2628   1385 C3 9D 13    >            JP      .end                    ;                           ' 10    | 106 (157)
2628   1388 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2628   1389 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2628   138A 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2628   138C 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2628   138E 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2628   138F 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2628   1391 6F          >            LD      L, A                    ;                           ' 4     |
2628   1392 29          >            ADD     HL, HL                  ;                           ' 6     |
2628   1393 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2628   1394 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2628   1395 E1          >            POP     HL                      ; copy params               ' 10    |
2628   1396 22 1E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2628   1399 E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2628   139A 22 20 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2629   139D             
2630   139D                         sampleOutput                ; *** sample output ****    ' 36    | (36-2)
2630   139D D9          >            EXX                     ;                           ' 4     | 4
2630   139E 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2630   139F 03          >            INC     BC              ; increment read address    ' 6     |
2630   13A0 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2630   13A2 12          >            LD      (DE), A         ; play sample               ' 7     |
2630   13A3 D9          >            EXX                     ;                           ' 4     | (36)
2631   13A4             
2632   13A4                         wait36                      ; sync                      ' 36    | 46 (80)
2632   13A4 ED 4F       >            LD      R, A
2632   13A6 ED 4F       >            LD      R, A
2632   13A8 ED 4F       >            LD      R, A
2632   13AA ED 4F       >            LD      R, A
2633   13AC 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2634   13AF             
2635   13AF             .chk_pcm2
2636   13AF CB 56                   BIT     CH2_SFT, (HL)       ; play PCM2 command ?       ' 12    |
2637   13B1 CA F5 13                JP      Z, .chk_pcm3        ;                           ' 10    | 22 (102)
2638   13B4             
2639   13B4 CB 96                   RES     CH2_SFT, (HL)       ; clear command             ' 15    | (117)
2640   13B6             
2641   13B6                         handlePCMCommand 2          ; handle play PCM command   ' 157   | (254+20)
2641   13B6 ED 4B 0C 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2641   13BA 21 24 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2641   13BD 79          >            LD      A, C                    ; A = new prio              ' 4     |
2641   13BE BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2641   13BF D2 CE 13    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2641   13C2 3E 05       >            LD      A, w            ; 7-2
2641   13C4 3D          >            DEC     A               ; 4
2641   13C5 20 FD       >            JR      NZ, .loop       ; 12
2641   13C7 3E 00       >            LD      A, $0
2641   13C9 3E 00       >            LD      A, $0
2641   13CB C3 E3 13    >            JP      .end                    ;                           ' 10    | 106 (157)
2641   13CE 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2641   13CF B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2641   13D0 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2641   13D2 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2641   13D4 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2641   13D5 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2641   13D7 6F          >            LD      L, A                    ;                           ' 4     |
2641   13D8 29          >            ADD     HL, HL                  ;                           ' 6     |
2641   13D9 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2641   13DA F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2641   13DB E1          >            POP     HL                      ; copy params               ' 10    |
2641   13DC 22 26 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2641   13DF E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2641   13E0 22 28 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2642   13E3             
2643   13E3                         sampleOutput                ; *** sample output ****    ' 36    | (36+20)
2643   13E3 D9          >            EXX                     ;                           ' 4     | 4
2643   13E4 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2643   13E5 03          >            INC     BC              ; increment read address    ' 6     |
2643   13E6 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2643   13E8 12          >            LD      (DE), A         ; play sample               ' 7     |
2643   13E9 D9          >            EXX                     ;                           ' 4     | (36)
2644   13EA             
2645   13EA                         wait36                      ; sync                      ' 36    | 46 (102)
2645   13EA ED 4F       >            LD      R, A
2645   13EC ED 4F       >            LD      R, A
2645   13EE ED 4F       >            LD      R, A
2645   13F0 ED 4F       >            LD      R, A
2646   13F2 21 00 01                LD      HL, COMMAND         ; restore HL                ' 10    |
2647   13F5             
2648   13F5             .chk_pcm3
2649   13F5 CB 5E                   BIT     CH3_SFT, (HL)       ; play PCM3 command ?       ' 12    |
2650   13F7 CA 37 14                JP      Z, ext_com_done     ;                           ' 10    | 22 (124)
2651   13FA             
2652   13FA CB 9E                   RES     CH3_SFT, (HL)       ; clear command             ' 15    | (139)
2653   13FC             
2654   13FC                         handlePCMCommand 3          ; handle play PCM command   ' 157   | (254+42)
2654   13FC ED 4B 0E 01 >            LD      BC, (PCM_ARG_P+(ch*2))  ; C = SFX prio, B = SFX id  ' 20    |
2654   1400 21 2C 01    >            LD      HL, PCM_PRIO+(ch*8)     ; HL point on PCM info      ' 10    | (30)
2654   1403 79          >            LD      A, C                    ; A = new prio              ' 4     |
2654   1404 BE          >            CP      (HL)                    ; compare to old prio       ' 7     | 21 (51)
2654   1405 D2 14 14    >            JP      NC, .play_new           ; >= old prio --> play new  ' 10    |
2654   1408 3E 05       >            LD      A, w            ; 7-2
2654   140A 3D          >            DEC     A               ; 4
2654   140B 20 FD       >            JR      NZ, .loop       ; 12
2654   140D 3E 00       >            LD      A, $0
2654   140F 3E 00       >            LD      A, $0
2654   1411 C3 29 14    >            JP      .end                    ;                           ' 10    | 106 (157)
2654   1414 78          >            LD      A, B                    ; A = SFX id                ' 4     |
2654   1415 B7          >            OR      A                       ; not a stop PCM command ?  ' 4     | 18 (69)
2654   1416 20 02       >            JR      NZ, .PCM_play           ; go set new prio           ' 7/12  |
2654   1418 0E 00       >            LD      C, 0                    ; reset prio for stop       ' 7     | +2
2654   141A 71          >            LD      (HL), C                 ; set new prio              ' 7     | (76)
2654   141B 26 07       >            LD      H, (ID_TABLE>>10)       ;                           ' 7     |
2654   141D 6F          >            LD      L, A                    ;                           ' 4     |
2654   141E 29          >            ADD     HL, HL                  ;                           ' 6     |
2654   141F 29          >            ADD     HL, HL                  ; HL point on new PCM addr  ' 6     | 29 (105)
2654   1420 F9          >            LD      SP, HL                  ; set SP to new PCM addr    ' 6     |
2654   1421 E1          >            POP     HL                      ; copy params               ' 10    |
2654   1422 22 2E 01    >            LD      (PCM_ADDR+(ch*8)),HL    ;                           ' 16    |
2654   1425 E1          >            POP     HL                      ;                           ' 10    | 52 (157)
2654   1426 22 30 01    >            LD      (PCM_LEN+(ch*8)),HL     ;                           ' 16    |
2655   1429             
2656   1429                         sampleOutput                ; *** sample output ****    ' 36    | (36+42)
2656   1429 D9          >            EXX                     ;                           ' 4     | 4
2656   142A 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2656   142B 03          >            INC     BC              ; increment read address    ' 6     |
2656   142C CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2656   142E 12          >            LD      (DE), A         ; play sample               ' 7     |
2656   142F D9          >            EXX                     ;                           ' 4     | (36)
2657   1430             
2658   1430                         wait46                      ; sync                      ' 46    | (124)
2658   1430 3E 02       >            LD      A, w            ; 7-2
2658   1432 3D          >            DEC     A               ; 4
2658   1433 20 FD       >            JR      NZ, .loop       ; 12
2658   1435 18 00       >            JR      .loop
2659   1437             
2660   1437             ; $BD+X+Y+Z
2661   1437             ext_com_done                                ;                           ' 124
2662   1437 01 02 01                LD      BC, STATUS              ; BC point on STATUS        ' 10    |
2663   143A 0A                      LD      A, (BC)                 ; A = STATUS                ' 7     | 24 (148)
2664   143B E6 F0                   AND     $F0                     ; clear PCM play status     ' 7     |
2665   143D             
2666   143D 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2667   1440 ED 5B 16 01             LD      DE, (PCM_ADDR+(0*8))    ; DE = PCM ch0 addr         ' 20    |
2668   1444 ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (211)
2669   1446 28 02                   JR      Z, .ch0_silent          ; ch0 is not playing        ' 12    |
2670   1448             
2671   1448 F6 01                   OR      A, $01                  ; set play status for ch0   ' +2
2672   144A             
2673   144A             .ch0_silent
2674   144A 08                      EX      AF, AF'                 ; preserve AF               ' 4     |
2675   144B                         wait35                          ; sync                      ' 35    | 39 (254-4)
2675   144B 18 00       >            JR      .loop
2675   144D ED 4F       >            LD      R, A
2675   144F 3E 00       >            LD      A, $0
2675   1451 3E 00       >            LD      A, $0
2676   1453             
2677   1453             ; $BE+X+Y+Z
2678   1453                         sampleOutput                    ; sample output             ' 36-4  | (36)
2678   1453 D9          >            EXX                     ;                           ' 4     | 4
2678   1454 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2678   1455 03          >            INC     BC              ; increment read address    ' 6     |
2678   1456 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2678   1458 12          >            LD      (DE), A         ; play sample               ' 7     |
2678   1459 D9          >            EXX                     ;                           ' 4     | (36)
2679   145A 08                      EX      AF, AF'                 ; restore AF                ' 4     |
2680   145B             
2681   145B 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2682   145E ED 5B 1E 01             LD      DE, (PCM_ADDR+(1*8))    ; DE = PCM ch1 addr         ' 20    |
2683   1462 ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (99)
2684   1464 28 02                   JR      Z, .ch1_silent          ; ch1 is not playing        ' 12    |
2685   1466             
2686   1466 F6 02                   OR      A, $02                  ; set play status for ch1   ' +2
2687   1468             
2688   1468             .ch1_silent
2689   1468 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2690   146B ED 5B 26 01             LD      DE, (PCM_ADDR+(2*8))    ; DE = PCM ch2 addr         ' 20    |
2691   146F ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (162)
2692   1471 28 02                   JR      Z, .ch2_silent          ; ch2 is not playing        ' 12    |
2693   1473             
2694   1473 F6 04                   OR      A, $04                  ; set play status for ch2   ' +2
2695   1475             
2696   1475             .ch2_silent
2697   1475 2A 00 1C                LD      HL, (ID_TABLE+0)        ; HL = null PCM addr        ' 16    |
2698   1478 ED 5B 2E 01             LD      DE, (PCM_ADDR+(3*8))    ; DE = PCM ch3 addr         ' 20    |
2699   147C ED 52                   SBC     HL, DE                  ; HL == DE ?                ' 15    | 63 (225)
2700   147E 28 02                   JR      Z, .ch3_silent          ; ch3 is not playing        ' 12    |
2701   1480             
2702   1480 F6 08                   OR      A, $08                  ; set play status for ch3   ' +2
2703   1482             
2704   1482             .ch3_silent
2705   1482 02                      LD      (BC), A                 ; set new status            ' 7     | (229)
2706   1483             
2707   1483 3A 11 01                LD      A, (PROTECT_ARG)        ; get BUS protect state     ' 13    |
2708   1486 B7                      OR      A                       ; no protecting ?           ' 4     | 27 (254+2)
2709   1487 CA AF 02                JP      Z, main_loop            ; process next frame        ' 10    |
2710   148A                                                         ; +2 cycles here, ignore...
2711   148A             
2712   148A             ; frame done
2713   148A             ;
2714   148A             ; 1 frame of PCM sample (256 bytes) is ~287 lines.
2715   148A             ;
2716   148A             ; NTSC: we should be <= 0xE8 to respect frame time here and we need to update PCM buffer 0.9 time per frame
2717   148A             ; so we have a free PCM mix frame from time to time.
2718   148A             ; Median (X+Y+Z) should be < 0x2A (< 42) plus some lines from the free PCM mix
2719   148A             ;
2720   148A             ; PAL: we should be <= 0118 to respect frame time here but we need to update PCM buffer 1.1 time per frame
2721   148A             ; so we have a penalty PCM mix frame from time to time.
2722   148A             ; Median (X+Y+Z) should be < 0x5A (< 90) minus some lines for the extra PCM mix
2723   148A             ; -------------------------------------------------------------------------------------
2724   148A             
2725   148A             
2726   148A             ;    LD  A, (VCOUNTER)
2727   148A             ;    LD  (DEBUG_A), A
2728   148A             
2729   148A             ; BUS protection wait (to avoid BUS contention with DMA)
2730   148A             ;
2731   148A             ; $BF+X+Y+Z
2732   148A             
2733   148A             bus_protect_wait
2734   148A                         sampleOutput                ; *** sample output *** ' 36    | (36)
2734   148A D9          >            EXX                     ;                           ' 4     | 4
2734   148B 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2734   148C 03          >            INC     BC              ; increment read address    ' 6     |
2734   148D CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2734   148F 12          >            LD      (DE), A         ; play sample               ' 7     |
2734   1490 D9          >            EXX                     ;                           ' 4     | (36)
2735   1491             
2736   1491                         wait105                     ; sync                  ' 105   | (141)
2736   1491 3E 06       >            LD      A, w            ; 7-2
2736   1493 3D          >            DEC     A               ; 4
2736   1494 20 FD       >            JR      NZ, .loop       ; 12
2736   1496 3E 00       >            LD      A, $0
2737   1498             
2738   1498 3A 11 01                LD      A, (PROTECT_ARG)    ; get BUS protect state ' 13    |
2739   149B B7                      OR      A                   ; no more protecting ?  ' 4     | 27 (168)
2740   149C CA B0 14                JP      Z, .continue        ; continue              ' 10    |
2741   149F             
2742   149F 2A 80 01                LD      HL, (IDLE_LOOP)     ;                       ' 16    |
2743   14A2 23                      INC     HL                  ; increment idle loop   ' 6     | 38 (206)
2744   14A3 22 80 01                LD      (IDLE_LOOP), HL     ;                       ' 16    |
2745   14A6             
2746   14A6 2A 82 01                LD      HL, (WAIT_LOOP)     ;                       ' 16    |
2747   14A9 23                      INC     HL                  ; increment wait loop   ' 6     | 38 (244)
2748   14AA 22 82 01                LD      (WAIT_LOOP), HL     ;                       ' 16    |
2749   14AD             
2750   14AD C3 8A 14                JP      bus_protect_wait    ; wait until bus is ok  ' 10    | (254)
2751   14B0             
2752   14B0             .continue                               ;                       ' 168
2753   14B0             
2754   14B0             ;    LD  A, (VCOUNTER)
2755   14B0             ;    LD  (DEBUG_B), A
2756   14B0             
2757   14B0                         wait76                      ; sync                  ' 76    |
2757   14B0 3E 04       >            LD      A, w            ; 7-2
2757   14B2 3D          >            DEC     A               ; 4
2757   14B3 20 FD       >            JR      NZ, .loop       ; 12
2757   14B5 C3 B8 14    >            JP      .loop
2758   14B8 C3 AF 02                JP      main_loop           ; process next frame    ' 10    | 86 (254)
2759   14BB             
2760   14BB             
2761   14BB             
2762   14BB             ; ##############################  functions  ################################
2763   14BB             
2764   14BB                         INCLUDE "z80_fct.i80"   ; basic functions
0001+  14BB             ; ########################### function #############################
0002+  14BB             
0003+  14BB             ; initDAC
0004+  14BB             ; -----------
0005+  14BB             ; HL <-  YMPORT0
0006+  14BB             ; DE <-  $2A80
0007+  14BB             ;
0008+  14BB             ; prepare DAC for output
0009+  14BB             
0010+  14BB             initDAC
0011+  14BB 11 80 2B                LD      DE, $2B80
0012+  14BE CD C8 14                CALL    writeYM0        ; enable DAC
0013+  14C1 11 80 2A                LD      DE, $2A80
0014+  14C4 CD C8 14                CALL    writeYM0        ; DAC data to silent
0015+  14C7 C9                      RET
0016+  14C8             
0017+  14C8             ; writeYM0 / writeYM1
0018+  14C8             ; -------------------
0019+  14C8             ; D   -> address
0020+  14C8             ; E   -> value
0021+  14C8             ; HL <-  YMPORT0 / YMPORT2
0022+  14C8             ;
0023+  14C8             ; write to YM2612
0024+  14C8             
0025+  14C8             writeYM0
0026+  14C8 21 00 40                LD      HL, YMPORT0     ; HL = YM port 0            ' 10    | (10)
0027+  14CB             
0028+  14CB             .wait0
0029+  14CB CB 7E                   BIT     7, (HL)         ; test YM not busy          ' 12    |
0030+  14CD 20 FC                   JR      NZ, .wait0      ;                           ' 7     | 19 (29)
0031+  14CF             
0032+  14CF 72                      LD      (HL), D         ; write address             ' 7     | (36)
0033+  14D0             
0034+  14D0             .wait1
0035+  14D0 CB 7E                   BIT     7, (HL)         ; test YM not busy          ' 12    |
0036+  14D2 20 FC                   JR      NZ, .wait1      ;                           ' 7     | 19 (55)
0037+  14D4             
0038+  14D4 2C                      INC     L               ; next port                 ' 4     | 11 (66)
0039+  14D5 73                      LD      (HL), E         ; write value               ' 7     |
0040+  14D6             
0041+  14D6 C9                      RET                     ; end                       ' 10    | (76)
0042+  14D7             
0043+  14D7             
0044+  14D7             writeYM1
0045+  14D7 21 00 40                LD      HL, YMPORT0     ; HL = YM port 0            ' 10    | (10)
0046+  14DA             
0047+  14DA             .wait0
0048+  14DA CB 7E                   BIT     7, (HL)         ; test YM not busy          ' 12    |
0049+  14DC 20 FC                   JR      NZ, .wait0      ;                           ' 7     | 19 (29)
0050+  14DE             
0051+  14DE 2C                      INC     L               ;                           ' 4     |
0052+  14DF 2C                      INC     L               ; HL = YM port 2            ' 4     |
0053+  14E0 72                      LD      (HL), D         ; write address             ' 7     | 23 (52)
0054+  14E1 2D                      DEC     L               ;                           ' 4     |
0055+  14E2 2D                      DEC     L               ; HL = YM port 0            ' 4     |
0056+  14E3             
0057+  14E3             .wait1
0058+  14E3 CB 7E                   BIT     7, (HL)         ; test YM not busy          ' 12    |
0059+  14E5 20 FC                   JR      NZ, .wait1      ;                           ' 7     | 19 (71)
0060+  14E7             
0061+  14E7 2C                      INC     L               ;                           ' 4     |
0062+  14E8 2C                      INC     L               ;                           ' 4     |
0063+  14E9 2C                      INC     L               ; HL = YM port 3            ' 4     | 19 (90)
0064+  14EA 73                      LD      (HL), E         ; write value               ' 7     |
0065+  14EB             
0066+  14EB C9                      RET                     ; end                       ' 10    | (100)
2765   14EC             
2766   14EC             
2767   14EC             ; loadState
2768   14EC             ; ---------
2769   14EC             ;     ?       ->  HL  -> ?
2770   14EC             ;     ?       ->  BC  -> ?
2771   14EC             ; reg source  ->  DE  -> ?
2772   14EC             ;
2773   14EC             ; load the YM and PSG state
2774   14EC             ; = 8 samples + 140 cycles
2775   14EC             
2776   14EC             loadState
2777   14EC             
2778   14EC                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2778   14EC D9          >            EXX                     ;                           ' 4     | 4
2778   14ED 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2778   14EE 03          >            INC     BC              ; increment read address    ' 6     |
2778   14EF CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2778   14F1 12          >            LD      (DE), A         ; play sample               ' 7     |
2778   14F2 D9          >            EXX                     ;                           ' 4     | (36)
2779   14F3             
2780   14F3 21 00 40                LD      HL, YMPORT0         ; HL point on YM port0      ' 10    |
2781   14F6 01 01 40                LD      BC, YMPORT1         ; BC point on YM port1      ' 10    | 20 (56)
2782   14F9             
2783   14F9 CD 1B 15                CALL    loadYMState         ; load YM state             ' 188+  | (244)
2784   14FC             
2785   14FC 21 02 40                LD      HL, YMPORT2         ; HL point on YM port2      ' 10    |
2786   14FF 01 03 40                LD      BC, YMPORT3         ; BC point on YM port3      ' 10    | 20 (254+10)
2787   1502             
2788   1502                         sampleOutputSafe            ; *** sample output ****    ' 46    | (46+10)
2788   1502 D9          >            EXX                     ;                           ' 4     | 4
2788   1503 36 2A       >            LD      (HL), $2A       ; prepare DAC write         ' 10    |
2788   1505 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2788   1506 03          >            INC     BC              ; increment read address    ' 6     | 38 (42)
2788   1507 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     |
2788   1509 12          >            LD      (DE), A         ; play sample               ' 7     |
2788   150A D9          >            EXX                     ;                           ' 4     | (46)
2789   150B             
2790   150B CD 1B 15                CALL    loadYMState         ; load YM state             ' 188+  | (244)
2791   150E             
2792   150E 21 11 7F                LD      HL, PSGPORT         ; HL point on PSG           ' 10    | (254)
2793   1511             
2794   1511                         sampleOutput                ; *** sample output ****    ' 36    | (36)
2794   1511 D9          >            EXX                     ;                           ' 4     | 4
2794   1512 0A          >            LD      A, (BC)         ; read sample from buffer   ' 7     |
2794   1513 03          >            INC     BC              ; increment read address    ' 6     |
2794   1514 CB 90       >            RES     2, B            ; read_address &= 0x03FF    ' 8     | 28 (32)
2794   1516 12          >            LD      (DE), A         ; play sample               ' 7     |
2794   1517 D9          >            EXX                     ;                           ' 4     | (36)
2795   1518             
2796   1518 C3 E0 15                JP      loadPSGState        ; load PSG state            ' 10+94 | (140)
2797   151B             
2798   151B             
2799   151B             ; loadYMState
2800   151B             ; -----------
2801   151B             ; YMPORT0/2   ->  HL
2802   151B             ; YMPORT1/3   ->  BC
2803   151B             ; reg source  ->  DE  -> ?
2804   151B             ;
2805   151B             ; load the YM RR state
2806   151B             ; = 4 samples (244 cycles)
2807   151B             
2808   151B             loadYMState                             ;                           ' 56
2809   151B             
2810   151B                         waitYMReady                 ; wait YM to be ready       ' 30    |
2810   151B D9          >            EXX                     ;                           ' 4     | (4)
2810   151C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2810   151E C2 1C 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2810   1521 D9          >            EXX                     ;                           ' 4     | (30)
2811   1522 36 80                   LD      (HL), $80           ; set reg num to YM         ' 10    |
2812   1524 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2813   1525 1C                      INC     E                   ; next                      ' 4     | 62 (118)
2814   1526                         wait4                       ; wait YM to be ready       ' 4     |
2814   1526 00          >            NOP
2815   1527 02                      LD      (BC), A             ; restore state             ' 7     |
2816   1528             
2817   1528                         waitYMReady                 ; wait YM to be ready       ' 30    |
2817   1528 D9          >            EXX                     ;                           ' 4     | (4)
2817   1529 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2817   152B C2 29 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2817   152E D9          >            EXX                     ;                           ' 4     | (30)
2818   152F 36 81                   LD      (HL), $81           ; set reg num to YM         ' 10    |
2819   1531 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (180)
2820   1532 1C                      INC     E                   ; next                      ' 4     |
2821   1533                         wait4                       ; wait YM to be ready       ' 4     |
2821   1533 00          >            NOP
2822   1534 02                      LD      (BC), A             ; restore state             ' 7     |
2823   1535             
2824   1535                         waitYMReady                 ; wait YM to be ready       ' 30    |
2824   1535 D9          >            EXX                     ;                           ' 4     | (4)
2824   1536 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2824   1538 C2 36 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2824   153B D9          >            EXX                     ;                           ' 4     | (30)
2825   153C 36 82                   LD      (HL), $82           ; set reg num to YM         ' 10    |
2826   153E 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (242)
2827   153F 1C                      INC     E                   ; next                      ' 4     |
2828   1540                         wait4                       ; wait YM to be ready       ' 4     |
2828   1540 00          >            NOP
2829   1541 02                      LD      (BC), A             ; restore state             ' 7     |
2830   1542             
2831   1542 D9                      EXX                         ;                           ' 4     | (246)
2832   1543             
2833   1543             .wait1
2834   1543 CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2835   1545 C2 43 15                JP      NZ, .wait1          ; wait while busy           ' 10    | 22 (254+14)
2836   1548             
2837   1548 36 2A                   LD      (HL), $2A           ;                           ' 10    |
2838   154A 0A                      LD      A, (BC)             ;                           ' 7     |
2839   154B 03                      INC     BC                  ; *** sample output ****    ' 6     | 38 (52)
2840   154C CB 90                   RES     2, B                ;                           ' 8     |
2841   154E 12                      LD      (DE), A             ;                           ' 7     |
2842   154F             
2843   154F             .wait2
2844   154F CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2845   1551 C2 4F 15                JP      NZ, .wait2          ; wait while busy           ' 10    | 22 (74)
2846   1554             
2847   1554 D9                      EXX                         ;                           ' 4     | (78)
2848   1555             
2849   1555 36 84                   LD      (HL), $84           ; set reg num to YM         ' 10    |
2850   1557 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2851   1558 1C                      INC     E                   ; next                      ' 4     | 32 (110)
2852   1559                         wait4                       ; wait YM to be ready       ' 4     |
2852   1559 00          >            NOP
2853   155A 02                      LD      (BC), A             ; restore state             ' 7     |
2854   155B             
2855   155B                         waitYMReady                 ; wait YM to be ready       ' 30    |
2855   155B D9          >            EXX                     ;                           ' 4     | (4)
2855   155C CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2855   155E C2 5C 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2855   1561 D9          >            EXX                     ;                           ' 4     | (30)
2856   1562 36 85                   LD      (HL), $85           ; set reg num to YM         ' 10    |
2857   1564 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2858   1565 1C                      INC     E                   ; next                      ' 4     |
2859   1566                         wait4                       ; wait YM to be ready       ' 4     |
2859   1566 00          >            NOP
2860   1567 02                      LD      (BC), A             ; restore state             ' 7     |
2861   1568             
2862   1568                         waitYMReady                 ; wait YM to be ready       ' 30    |
2862   1568 D9          >            EXX                     ;                           ' 4     | (4)
2862   1569 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2862   156B C2 69 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2862   156E D9          >            EXX                     ;                           ' 4     | (30)
2863   156F 36 86                   LD      (HL), $86           ; set reg num to YM         ' 10    |
2864   1571 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2865   1572 1C                      INC     E                   ; next                      ' 4     |
2866   1573                         wait4                       ; wait YM to be ready       ' 4     |
2866   1573 00          >            NOP
2867   1574 02                      LD      (BC), A             ; restore state             ' 7     |
2868   1575             
2869   1575 D9                      EXX                         ;                           ' 4     | (238)
2870   1576             
2871   1576             .wait3
2872   1576 CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2873   1578 C2 76 15                JP      NZ, .wait3          ; wait while busy           ' 10    | 22 (254+6)
2874   157B             
2875   157B 36 2A                   LD      (HL), $2A           ;                           ' 10    |
2876   157D 0A                      LD      A, (BC)             ;                           ' 7     |
2877   157E 03                      INC     BC                  ; *** sample output ****    ' 6     | 38 (44)
2878   157F CB 90                   RES     2, B                ;                           ' 8     |
2879   1581 12                      LD      (DE), A             ;                           ' 7     |
2880   1582             
2881   1582             .wait4
2882   1582 CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2883   1584 C2 82 15                JP      NZ, .wait4          ; wait while busy           ' 10    | 22 (66)
2884   1587             
2885   1587 D9                      EXX                         ;                           ' 4     | (78)
2886   1588                         wait8                       ; sync                      ' 8     |
2886   1588 00          >            NOP
2886   1589 00          >            NOP
2887   158A             
2888   158A 36 88                   LD      (HL), $88           ; set reg num to YM         ' 10    |
2889   158C 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2890   158D 1C                      INC     E                   ; next                      ' 4     | 32 (110)
2891   158E                         wait4                       ; wait YM to be ready       ' 4     |
2891   158E 00          >            NOP
2892   158F 02                      LD      (BC), A             ; restore state             ' 7     |
2893   1590             
2894   1590                         waitYMReady                 ; wait YM to be ready       ' 30    |
2894   1590 D9          >            EXX                     ;                           ' 4     | (4)
2894   1591 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2894   1593 C2 91 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2894   1596 D9          >            EXX                     ;                           ' 4     | (30)
2895   1597 36 89                   LD      (HL), $89           ; set reg num to YM         ' 10    |
2896   1599 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2897   159A 1C                      INC     E                   ; next                      ' 4     |
2898   159B                         wait4                       ; wait YM to be ready       ' 4     |
2898   159B 00          >            NOP
2899   159C 02                      LD      (BC), A             ; restore state             ' 7     |
2900   159D             
2901   159D                         waitYMReady                 ; wait YM to be ready       ' 30    |
2901   159D D9          >            EXX                     ;                           ' 4     | (4)
2901   159E CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2901   15A0 C2 9E 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2901   15A3 D9          >            EXX                     ;                           ' 4     | (30)
2902   15A4 36 8A                   LD      (HL), $8A           ; set reg num to YM         ' 10    |
2903   15A6 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2904   15A7 1C                      INC     E                   ; next                      ' 4     |
2905   15A8                         wait4                       ; wait YM to be ready       ' 4     |
2905   15A8 00          >            NOP
2906   15A9 02                      LD      (BC), A             ; restore state             ' 7     |
2907   15AA             
2908   15AA D9                      EXX                         ;                           ' 4     | (238)
2909   15AB             
2910   15AB             .wait5
2911   15AB CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2912   15AD C2 AB 15                JP      NZ, .wait5          ; wait while busy           ' 10    | 22 (254+6)
2913   15B0             
2914   15B0 36 2A                   LD      (HL), $2A           ;                           ' 10    |
2915   15B2 0A                      LD      A, (BC)             ;                           ' 7     |
2916   15B3 03                      INC     BC                  ; *** sample output ****    ' 6     | 38 (44)
2917   15B4 CB 90                   RES     2, B                ;                           ' 8     |
2918   15B6 12                      LD      (DE), A             ;                           ' 7     |
2919   15B7             
2920   15B7             .wait6
2921   15B7 CB 7E                   BIT     7, (HL)             ; test YM ready bit         ' 12    |
2922   15B9 C2 B7 15                JP      NZ, .wait6          ; wait while busy           ' 10    | 22 (66)
2923   15BC             
2924   15BC D9                      EXX                         ;                           ' 4     | (78)
2925   15BD                         wait8                       ; sync                      ' 8     |
2925   15BD 00          >            NOP
2925   15BE 00          >            NOP
2926   15BF             
2927   15BF 36 8C                   LD      (HL), $8C           ; set reg num to YM         ' 10    |
2928   15C1 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2929   15C2 1C                      INC     E                   ; next                      ' 4     | 32 (110)
2930   15C3                         wait4                       ; wait YM to be ready       ' 4     |
2930   15C3 00          >            NOP
2931   15C4 02                      LD      (BC), A             ; restore state             ' 7     |
2932   15C5             
2933   15C5                         waitYMReady                 ; wait YM to be ready       ' 30    |
2933   15C5 D9          >            EXX                     ;                           ' 4     | (4)
2933   15C6 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2933   15C8 C2 C6 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2933   15CB D9          >            EXX                     ;                           ' 4     | (30)
2934   15CC 36 8D                   LD      (HL), $8D           ; set reg num to YM         ' 10    |
2935   15CE 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (172)
2936   15CF 1C                      INC     E                   ; next                      ' 4     |
2937   15D0                         wait4                       ; wait YM to be ready       ' 4     |
2937   15D0 00          >            NOP
2938   15D1 02                      LD      (BC), A             ; restore state             ' 7     |
2939   15D2             
2940   15D2                         waitYMReady                 ; wait YM to be ready       ' 30    |
2940   15D2 D9          >            EXX                     ;                           ' 4     | (4)
2940   15D3 CB 7E       >            BIT     7, (HL)         ; test YM ready bit         ' 12    | (22)
2940   15D5 C2 D3 15    >            JP      NZ, .wait       ; wait while busy           ' 10    |
2940   15D8 D9          >            EXX                     ;                           ' 4     | (30)
2941   15D9 36 8E                   LD      (HL), $8E           ; set reg num to YM         ' 10    |
2942   15DB 1A                      LD      A, (DE)             ; get saved value           ' 7     | 62 (234)
2943   15DC 1C                      INC     E                   ; next                      ' 4     |
2944   15DD                         wait4                       ; wait YM to be ready       ' 4     |
2944   15DD 00          >            NOP
2945   15DE 02                      LD      (BC), A             ; restore state             ' 7     |
2946   15DF             
2947   15DF C9                      RET                         ; done                      ' 10    | (244)
2948   15E0             
2949   15E0             
2950   15E0             ; loadPSGState
2951   15E0             ; ------------
2952   15E0             ; PSGPORT     ->  HL
2953   15E0             ; reg source  ->  DE  -> ?
2954   15E0             ;
2955   15E0             ; load the PSG env state
2956   15E0             ; 94 cycles
2957   15E0             
2958   15E0             loadPSGState
2959   15E0             
2960   15E0 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2961   15E1 1C                      INC     E                   ; next                      ' 4     | (21)
2962   15E2 77                      LD      (HL), A             ; PSG restore channel 0 env ' 10    |
2963   15E3             
2964   15E3 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2965   15E4 1C                      INC     E                   ; next                      ' 4     | 21 (42)
2966   15E5 77                      LD      (HL), A             ; PSG restore channel 1 env ' 10    |
2967   15E6             
2968   15E6 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2969   15E7 1C                      INC     E                   ; next                      ' 4     | 21 (63)
2970   15E8 77                      LD      (HL), A             ; PSG restore channel 2 env ' 10    |
2971   15E9             
2972   15E9 1A                      LD      A, (DE)             ; get saved value           ' 7     |
2973   15EA 1C                      INC     E                   ; next                      ' 4     | 21 (84)
2974   15EB 77                      LD      (HL), A             ; PSG restore channel 3 env ' 10    |
2975   15EC             
2976   15EC C9                      RET                         ; done                      ' 10    | (94)
2977   15ED             
2978   15ED             
2979   15ED             ; ##############################  jump table  ################################
2980   15ED             
2981   15ED 00                      BLOCK   $1600-$
2982   1600             
2983   1600 4C 0A                   DW      com_next_frame                                                                  ; 00
2984   1602             
2985   1602                         DW      com_null, com_null, com_null                                                    ; 01-03
2985   1602 B911B911B911
2986   1608                         DW      com_null, com_null, com_null, com_null                                          ; 04-07
2986   1608 B911B911B911B911
2987   1610                         DW      com_null, com_null, com_null, com_null                                          ; 08-0B
2987   1610 B911B911B911B911
2988   1618                         DW      com_null, com_null, com_null, com_null                                          ; 0C-0F
2988   1618 B911B911B911B911
2989   1620             
2990   1620                         DW      com_psg_tone_w0, com_psg_tone_w1, com_psg_tone_w2, com_psg_tone_w3              ; 10-13
2990   1620 4F0A5C0A6A0A770A
2991   1628                         DW      com_psg_tone_w4, com_psg_tone_w5, com_psg_tone_w6, com_psg_tone_w7              ; 14-17
2991   1628 870A930AA10AAB0A
2992   1630                         DW      com_psg_env_w0, com_psg_env_w1, com_psg_env_w2, com_psg_env_w3                  ; 18-1B
2992   1630 CC0ADF0AEB0A040B
2993   1638                         DW      com_null, com_null, com_null, com_null                                          ; 1C-1F
2993   1638 B911B911B911B911
2994   1640             
2995   1640                         DW      com_ym_port0_w0, com_ym_port0_w1, com_ym_port0_w2, com_ym_port0_w3              ; 20-23
2995   1640 500B610B6A0B7C0B
2996   1648                         DW      com_ym_port0_w4, com_ym_port0_w5, com_ym_port0_w6, com_ym_port0_w7              ; 24-27
2996   1648 850B980BAA0BB30B
2997   1650                         DW      com_ym_port0_w8, com_ym_port0_w9, com_ym_port0_wA, com_ym_port0_wB              ; 28-2B
2997   1650 C60BD80BE10BF40B
2998   1658                         DW      com_ym_port0_wC, com_ym_port0_wD, com_ym_port0_wE, com_ym_port0_wF              ; 2C-2F
2998   1658 060C0F0C210C320C
2999   1660             
3000   1660                         DW      com_ym_port2_w0, com_ym_port2_w1, com_ym_port2_w2, com_ym_port2_w3              ; 30-33
3000   1660 3B0C4C0C550C670C
3001   1668                         DW      com_ym_port2_w4, com_ym_port2_w5, com_ym_port2_w6, com_ym_port2_w7              ; 34-37
3001   1668 700C830C950C9E0C
3002   1670                         DW      com_ym_port2_w8, com_ym_port2_w9, com_ym_port2_wA, com_ym_port2_wB              ; 38-3B
3002   1670 B10CC30CCC0CDF0C
3003   1678                         DW      com_ym_port2_wC, com_ym_port2_wD, com_ym_port2_wE, com_ym_port2_wF              ; 3C-3F
3003   1678 F10CFA0C0C0D1D0D
3004   1680             
3005   1680                         DW      com_ym_key_w0, com_ym_key_w1, com_ym_key_w2, com_ym_key_w3                      ; 40-43
3005   1680 700E830E8F0EA00E
3006   1688                         DW      com_ym_key_w4, com_ym_key_w5, com_null, com_null                                ; 44-47
3006   1688 B40EC30EB911B911
3007   1690                         DW      com_null, com_null, com_null, com_null                                          ; 48-4B
3007   1690 B911B911B911B911
3008   1698                         DW      com_null, com_null, com_null, com_null                                          ; 4C-4F
3008   1698 B911B911B911B911
3009   16A0             
3010   16A0                         DW      com_pcm_p0_ch0, com_pcm_p0_ch1, com_pcm_p0_ch2, com_pcm_p0_ch3                  ; 50-53
3010   16A0 570F6B0F7F0F930F
3011   16A8                         DW      com_pcm_p1_ch0, com_pcm_p1_ch1, com_pcm_p1_ch2, com_pcm_p1_ch3                  ; 54-57
3011   16A8 5C0F700F840F980F
3012   16B0                         DW      com_pcm_p2_ch0, com_pcm_p2_ch1, com_pcm_p2_ch2, com_pcm_p2_ch3                  ; 58-5B
3012   16B0 610F750F890F9D0F
3013   16B8                         DW      com_pcm_p3_ch0, com_pcm_p3_ch1, com_pcm_p3_ch2, com_pcm_p3_ch3                  ; 5C-5F
3013   16B8 660F7A0F8E0FA20F
3014   16C0             
3015   16C0                         DW      com_state_w0, com_state_w1, com_state_w2, com_state_w3                          ; 60-63
3015   16C0 63106D107B108A10
3016   16C8                         DW      com_state_w4, com_state_w5, com_state_w6, com_state_w7                          ; 64-67
3016   16C8 9310AC10B910C610
3017   16D0                         DW      com_state_w8, com_state_w9, com_state_wA, com_state_wB                          ; 68-6B
3017   16D0 D210DE10E9100411
3018   16D8                         DW      com_state_wC, com_state_wD, com_state_wE, com_state_wF                          ; 6C-6F
3018   16D8 11111E112A113611
3019   16E0             
3020   16E0                         DW      com_null, com_null, com_null, com_null                                          ; 70-74
3020   16E0 B911B911B911B911
3021   16E8                         DW      com_null, com_null, com_null, com_null                                          ; 74-77
3021   16E8 B911B911B911B911
3022   16F0                         DW      com_null, com_null, com_null, com_null                                          ; 78-7B
3022   16F0 B911B911B911B911
3023   16F8 B9 11                   DW      com_null                                                                        ; 7C
3024   16FA             
3025   16FA C5 11                   DW      com_extra_frm                                                                   ; 7D
3026   16FC EC 11                   DW      com_loop                                                                        ; 7E
3027   16FE 29 12                   DW      com_end                                                                         ; 7F
3028   1700             
3029   1700             
3030   1700                         END
